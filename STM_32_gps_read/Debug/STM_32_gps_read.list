
STM_32_gps_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a164  0800a164  0000b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  0000c088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1cc  0800a1cc  0000b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d4  0800a1d4  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d4  0800a1d4  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1d8  0800a1d8  0000b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a1dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c088  2**0
                  CONTENTS
 10 .bss          00000a68  20000088  20000088  0000c088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af0  20000af0  0000c088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d57  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d9e  00000000  00000000  00024e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00028bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f86  00000000  00000000  00029fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025082  00000000  00000000  0002af66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa29  00000000  00000000  0004ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfe18  00000000  00000000  0006aa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a829  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c64  00000000  00000000  0013a86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001404d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a14c 	.word	0x0800a14c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a14c 	.word	0x0800a14c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <configureButtonInput>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to configure GPIO pin as input
void configureButtonInput(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
    // Enable clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <configureButtonInput+0x50>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b8:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <configureButtonInput+0x50>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <configureButtonInput+0x50>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO pin as input with pull-up
    GPIO_InitStruct.Pin = GPIO_PIN_0; // Using PA0
 80005cc:	2301      	movs	r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // Use GPIO_PULLUP for internal pull-up
 80005d4:	2301      	movs	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <configureButtonInput+0x54>)
 80005de:	f000 ff13 	bl	8001408 <HAL_GPIO_Init>
}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <configurePB7Output>:

// Function to configure PB7 as output
void configurePB7Output(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
    // Enable clock for GPIOB
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <configurePB7Output+0x54>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000610:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <configurePB7Output+0x54>)
 8000612:	f043 0302 	orr.w	r3, r3, #2
 8000616:	6313      	str	r3, [r2, #48]	@ 0x30
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <configurePB7Output+0x54>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	f003 0302 	and.w	r3, r3, #2
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

    // Configure PB7 as output
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <configurePB7Output+0x58>)
 800063a:	f000 fee5 	bl	8001408 <HAL_GPIO_Init>
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020400 	.word	0x40020400

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fd2f 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f847 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f96d 	bl	800093c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000662:	f000 f8ad 	bl	80007c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000666:	f000 f8d9 	bl	800081c <MX_I2S3_Init>
  MX_SPI1_Init();
 800066a:	f000 f907 	bl	800087c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800066e:	f008 fac7 	bl	8008c00 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000672:	f000 f939 	bl	80008e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  configureButtonInput();
 8000676:	f7ff ff91 	bl	800059c <configureButtonInput>
  configurePB7Output();
 800067a:	f7ff ffbb 	bl	80005f4 <configurePB7Output>
  //uint8_t buffer[100]; // Buffer to store received GPS data

  while (1) {
      // Read button state
      uint32_t buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800067e:	2101      	movs	r1, #1
 8000680:	4815      	ldr	r0, [pc, #84]	@ (80006d8 <main+0x88>)
 8000682:	f001 f85d 	bl	8001740 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	607b      	str	r3, [r7, #4]
      printf("test");
 800068a:	4814      	ldr	r0, [pc, #80]	@ (80006dc <main+0x8c>)
 800068c:	f008 ff42 	bl	8009514 <iprintf>
      if (buttonState == GPIO_PIN_RESET) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d111      	bne.n	80006ba <main+0x6a>
          // Button is pressed (assuming active low)
          // Handle button press here
          printf("Button pressed!\n");
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <main+0x90>)
 8000698:	f008 ffa4 	bl	80095e4 <puts>
          HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET); // Turn on the light
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a2:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <main+0x94>)
 80006a4:	f001 f864 	bl	8001770 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Set PB7 high
 80006a8:	2201      	movs	r2, #1
 80006aa:	2180      	movs	r1, #128	@ 0x80
 80006ac:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <main+0x98>)
 80006ae:	f001 f85f 	bl	8001770 <HAL_GPIO_WritePin>
          HAL_Delay(200); // Debounce delay
 80006b2:	20c8      	movs	r0, #200	@ 0xc8
 80006b4:	f000 fd72 	bl	800119c <HAL_Delay>
 80006b8:	e00a      	b.n	80006d0 <main+0x80>
      } else {
          HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET); // Turn off the light
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c0:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <main+0x94>)
 80006c2:	f001 f855 	bl	8001770 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Set PB7 low
 80006c6:	2200      	movs	r2, #0
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <main+0x98>)
 80006cc:	f001 f850 	bl	8001770 <HAL_GPIO_WritePin>
      }
      MX_USB_HOST_Process();
 80006d0:	f008 fabc 	bl	8008c4c <MX_USB_HOST_Process>
  while (1) {
 80006d4:	e7d3      	b.n	800067e <main+0x2e>
 80006d6:	bf00      	nop
 80006d8:	40020000 	.word	0x40020000
 80006dc:	0800a164 	.word	0x0800a164
 80006e0:	0800a16c 	.word	0x0800a16c
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020400 	.word	0x40020400

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 ff7a 	bl	80095f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <SystemClock_Config+0xcc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <SystemClock_Config+0xd0>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000760:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076a:	2307      	movs	r3, #7
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4618      	mov	r0, r3
 8000774:	f003 ff2e 	bl	80045d4 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077e:	f000 f9db 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2105      	movs	r1, #5
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 f98f 	bl	8004ac4 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007ac:	f000 f9c4 	bl	8000b38 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	@ 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f003 f905 	bl	8003a0c <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f996 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000a4 	.word	0x200000a4
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000822:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <MX_I2S3_Init+0x58>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <MX_I2S3_Init+0x54>)
 800083c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000840:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000844:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <MX_I2S3_Init+0x5c>)
 8000846:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_I2S3_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2S3_Init+0x54>)
 800085c:	f003 fa1a 	bl	8003c94 <HAL_I2S_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000866:	f000 f967 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000f8 	.word	0x200000f8
 8000874:	40003c00 	.word	0x40003c00
 8000878:	00017700 	.word	0x00017700

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_SPI1_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	@ (80008e4 <MX_SPI1_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_SPI1_Init+0x64>)
 8000888:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_SPI1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_SPI1_Init+0x64>)
 80008ce:	f004 fc5b 	bl	8005188 <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 f92e 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000140 	.word	0x20000140
 80008e4:	40013000 	.word	0x40013000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000918:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000922:	f004 fcba 	bl	800529a <HAL_UART_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800092c:	f000 f904 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000198 	.word	0x20000198
 8000938:	40004400 	.word	0x40004400

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b72      	ldr	r3, [pc, #456]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a71      	ldr	r2, [pc, #452]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b6f      	ldr	r3, [pc, #444]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b6b      	ldr	r3, [pc, #428]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a6a      	ldr	r2, [pc, #424]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b68      	ldr	r3, [pc, #416]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b64      	ldr	r3, [pc, #400]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a63      	ldr	r2, [pc, #396]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b61      	ldr	r3, [pc, #388]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b5d      	ldr	r3, [pc, #372]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a5c      	ldr	r2, [pc, #368]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b56      	ldr	r3, [pc, #344]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a55      	ldr	r2, [pc, #340]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b53      	ldr	r3, [pc, #332]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a4e      	ldr	r2, [pc, #312]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000b20 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4849      	ldr	r0, [pc, #292]	@ (8000b24 <MX_GPIO_Init+0x1e8>)
 8000a00:	f000 feb6 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	4847      	ldr	r0, [pc, #284]	@ (8000b28 <MX_GPIO_Init+0x1ec>)
 8000a0a:	f000 feb1 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a14:	4845      	ldr	r0, [pc, #276]	@ (8000b2c <MX_GPIO_Init+0x1f0>)
 8000a16:	f000 feab 	bl	8001770 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	483c      	ldr	r0, [pc, #240]	@ (8000b24 <MX_GPIO_Init+0x1e8>)
 8000a32:	f000 fce9 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4836      	ldr	r0, [pc, #216]	@ (8000b28 <MX_GPIO_Init+0x1ec>)
 8000a4e:	f000 fcdb 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a62:	2305      	movs	r3, #5
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	482e      	ldr	r0, [pc, #184]	@ (8000b28 <MX_GPIO_Init+0x1ec>)
 8000a6e:	f000 fccb 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a76:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0x1f4>)
 8000a88:	f000 fcbe 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4825      	ldr	r0, [pc, #148]	@ (8000b34 <MX_GPIO_Init+0x1f8>)
 8000aa0:	f000 fcb2 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <MX_GPIO_Init+0x1f8>)
 8000ac2:	f000 fca1 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ac6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000aca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <MX_GPIO_Init+0x1f0>)
 8000ae0:	f000 fc92 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae4:	2320      	movs	r3, #32
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_GPIO_Init+0x1f0>)
 8000af8:	f000 fc86 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b00:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_GPIO_Init+0x1e8>)
 8000b12:	f000 fc79 	bl	8001408 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3730      	adds	r7, #48	@ 0x30
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fbfe 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <HAL_I2C_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bd2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be4:	2304      	movs	r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <HAL_I2C_MspInit+0x8c>)
 8000bf0:	f000 fc0a 	bl	8001408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <HAL_I2C_MspInit+0x88>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_I2C_MspInit+0x88>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	@ 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a31      	ldr	r2, [pc, #196]	@ (8000d14 <HAL_I2S_MspInit+0xf0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d15a      	bne.n	8000d0a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c58:	23c0      	movs	r3, #192	@ 0xc0
 8000c5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f94d 	bl	8004f04 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c70:	f7ff ff62 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a26      	ldr	r2, [pc, #152]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c84:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	4a1f      	ldr	r2, [pc, #124]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_I2S_MspInit+0xf4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <HAL_I2S_MspInit+0xf8>)
 8000ce4:	f000 fb90 	bl	8001408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ce8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <HAL_I2S_MspInit+0xfc>)
 8000d06:	f000 fb7f 	bl	8001408 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	@ 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40003c00 	.word	0x40003c00
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40020800 	.word	0x40020800

08000d24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	@ (8000da8 <HAL_SPI_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d7e:	23e0      	movs	r3, #224	@ 0xe0
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <HAL_SPI_MspInit+0x8c>)
 8000d9a:	f000 fb35 	bl	8001408 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013000 	.word	0x40013000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a28      	ldr	r2, [pc, #160]	@ (8000e74 <HAL_UART_MspInit+0xc0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d149      	bne.n	8000e6a <HAL_UART_MspInit+0xb6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a26      	ldr	r2, [pc, #152]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a18      	ldr	r2, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_UART_MspInit+0xc4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD3     ------> USART2_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e2a:	230e      	movs	r3, #14
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <HAL_UART_MspInit+0xc8>)
 8000e46:	f000 fadf 	bl	8001408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4806      	ldr	r0, [pc, #24]	@ (8000e80 <HAL_UART_MspInit+0xcc>)
 8000e66:	f000 facf 	bl	8001408 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020c00 	.word	0x40020c00

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eda:	f000 f93f 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <OTG_FS_IRQHandler+0x10>)
 8000eea:	f000 ff3b 	bl	8001d64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200005c4 	.word	0x200005c4

08000ef8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
  }

  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
  }
  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f008 fb0e 	bl	8009624 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20020000 	.word	0x20020000
 8001034:	00000400 	.word	0x00000400
 8001038:	200001e0 	.word	0x200001e0
 800103c:	20000af0 	.word	0x20000af0

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800109c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001068:	f7ff ffea 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f008 facd 	bl	8009630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fadb 	bl	8000650 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80010a8:	0800a1dc 	.word	0x0800a1dc
  ldr r2, =_sbss
 80010ac:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010b0:	20000af0 	.word	0x20000af0

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f94f 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fd2a 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f967 	bl	80013ee <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001138:	f000 f92f 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200001e4 	.word	0x200001e4

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200001e4 	.word	0x200001e4

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e16b      	b.n	80016fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 815a 	bne.w	80016f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80b4 	beq.w	80016f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b60      	ldr	r3, [pc, #384]	@ (8001714 <HAL_GPIO_Init+0x30c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a5f      	ldr	r2, [pc, #380]	@ (8001714 <HAL_GPIO_Init+0x30c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <HAL_GPIO_Init+0x30c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <HAL_GPIO_Init+0x310>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a52      	ldr	r2, [pc, #328]	@ (800171c <HAL_GPIO_Init+0x314>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d02b      	beq.n	800162e <HAL_GPIO_Init+0x226>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a51      	ldr	r2, [pc, #324]	@ (8001720 <HAL_GPIO_Init+0x318>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x222>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <HAL_GPIO_Init+0x31c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x21e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001728 <HAL_GPIO_Init+0x320>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x21a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4e      	ldr	r2, [pc, #312]	@ (800172c <HAL_GPIO_Init+0x324>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x216>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001730 <HAL_GPIO_Init+0x328>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x212>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4c      	ldr	r2, [pc, #304]	@ (8001734 <HAL_GPIO_Init+0x32c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x20e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4b      	ldr	r2, [pc, #300]	@ (8001738 <HAL_GPIO_Init+0x330>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x20a>
 800160e:	2307      	movs	r3, #7
 8001610:	e00e      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001612:	2308      	movs	r3, #8
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001616:	2306      	movs	r3, #6
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800161a:	2305      	movs	r3, #5
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800162e:	2300      	movs	r3, #0
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001640:	4935      	ldr	r1, [pc, #212]	@ (8001718 <HAL_GPIO_Init+0x310>)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_GPIO_Init+0x334>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001672:	4a32      	ldr	r2, [pc, #200]	@ (800173c <HAL_GPIO_Init+0x334>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <HAL_GPIO_Init+0x334>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800169c:	4a27      	ldr	r2, [pc, #156]	@ (800173c <HAL_GPIO_Init+0x334>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_GPIO_Init+0x334>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c6:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_GPIO_Init+0x334>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_GPIO_Init+0x334>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_GPIO_Init+0x334>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	f67f ae90 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40013800 	.word	0x40013800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800
 8001728:	40020c00 	.word	0x40020c00
 800172c:	40021000 	.word	0x40021000
 8001730:	40021400 	.word	0x40021400
 8001734:	40021800 	.word	0x40021800
 8001738:	40021c00 	.word	0x40021c00
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af02      	add	r7, sp, #8
 80017a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e059      	b.n	8001868 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f007 fa74 	bl	8008cbc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e2:	d102      	bne.n	80017ea <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f88d 	bl	800590e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7c1a      	ldrb	r2, [r3, #16]
 80017fc:	f88d 2000 	strb.w	r2, [sp]
 8001800:	3304      	adds	r3, #4
 8001802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001804:	f004 f80e 	bl	8005824 <USB_CoreInit>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2202      	movs	r2, #2
 8001812:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e026      	b.n	8001868 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2101      	movs	r1, #1
 8001820:	4618      	mov	r0, r3
 8001822:	f004 f885 	bl	8005930 <USB_SetCurrentMode>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e017      	b.n	8001868 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7c1a      	ldrb	r2, [r3, #16]
 8001840:	f88d 2000 	strb.w	r2, [sp]
 8001844:	3304      	adds	r3, #4
 8001846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001848:	f004 fa28 	bl	8005c9c <USB_HostInit>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e004      	b.n	8001868 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b08b      	sub	sp, #44	@ 0x2c
 8001874:	af04      	add	r7, sp, #16
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	70fb      	strb	r3, [r7, #3]
 8001882:	460b      	mov	r3, r1
 8001884:	70bb      	strb	r3, [r7, #2]
 8001886:	4613      	mov	r3, r2
 8001888:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800188a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800188c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_HCD_HC_Init+0x2c>
 8001898:	2302      	movs	r3, #2
 800189a:	e09d      	b.n	80019d8 <HAL_HCD_HC_Init+0x168>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3319      	adds	r3, #25
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3314      	adds	r3, #20
 80018c8:	787a      	ldrb	r2, [r7, #1]
 80018ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3315      	adds	r3, #21
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3326      	adds	r3, #38	@ 0x26
 80018f0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018fe:	b2d8      	uxtb	r0, r3
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3316      	adds	r3, #22
 800190e:	4602      	mov	r2, r0
 8001910:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fbc8 	bl	80020ac <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800191c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001920:	2b00      	cmp	r3, #0
 8001922:	da0a      	bge.n	800193a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3317      	adds	r3, #23
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e009      	b.n	800194e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3317      	adds	r3, #23
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fb06 	bl	8005f64 <USB_GetHostSpeed>
 8001958:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800195a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10b      	bne.n	800197a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_HCD_HC_Init+0x10a>
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d104      	bne.n	800197a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2bbc      	cmp	r3, #188	@ 0xbc
 8001974:	d901      	bls.n	800197a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001976:	23bc      	movs	r3, #188	@ 0xbc
 8001978:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3318      	adds	r3, #24
 800198a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800198e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	b298      	uxth	r0, r3
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3328      	adds	r3, #40	@ 0x28
 80019a4:	4602      	mov	r2, r0
 80019a6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	787c      	ldrb	r4, [r7, #1]
 80019b2:	78ba      	ldrb	r2, [r7, #2]
 80019b4:	78f9      	ldrb	r1, [r7, #3]
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4623      	mov	r3, r4
 80019c6:	f004 faf5 	bl	8005fb4 <USB_HC_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_HCD_HC_Halt+0x1e>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e00f      	b.n	8001a1e <HAL_HCD_HC_Halt+0x3e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fe87 	bl	8006722 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	70fb      	strb	r3, [r7, #3]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70bb      	strb	r3, [r7, #2]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3317      	adds	r3, #23
 8001a52:	78ba      	ldrb	r2, [r7, #2]
 8001a54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3326      	adds	r3, #38	@ 0x26
 8001a66:	787a      	ldrb	r2, [r7, #1]
 8001a68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a6a:	7c3b      	ldrb	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d114      	bne.n	8001a9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	332a      	adds	r3, #42	@ 0x2a
 8001a80:	2203      	movs	r2, #3
 8001a82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3319      	adds	r3, #25
 8001a94:	7f3a      	ldrb	r2, [r7, #28]
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e009      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	332a      	adds	r3, #42	@ 0x2a
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001aae:	787b      	ldrb	r3, [r7, #1]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	f200 8102 	bhi.w	8001cba <HAL_HCD_HC_SubmitRequest+0x292>
 8001ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ca5 	.word	0x08001ca5
 8001ac4:	08001b91 	.word	0x08001b91
 8001ac8:	08001c1b 	.word	0x08001c1b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001acc:	7c3b      	ldrb	r3, [r7, #16]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80f5 	bne.w	8001cbe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ad4:	78bb      	ldrb	r3, [r7, #2]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d12d      	bne.n	8001b36 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001ada:	8b3b      	ldrh	r3, [r7, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	333d      	adds	r3, #61	@ 0x3d
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333d      	adds	r3, #61	@ 0x3d
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10a      	bne.n	8001b20 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	332a      	adds	r3, #42	@ 0x2a
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b1e:	e0ce      	b.n	8001cbe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	332a      	adds	r3, #42	@ 0x2a
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]
      break;
 8001b34:	e0c3      	b.n	8001cbe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	331a      	adds	r3, #26
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	f040 80b8 	bne.w	8001cbe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	333c      	adds	r3, #60	@ 0x3c
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	332a      	adds	r3, #42	@ 0x2a
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e0a1      	b.n	8001cbe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	332a      	adds	r3, #42	@ 0x2a
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
      break;
 8001b8e:	e096      	b.n	8001cbe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b90:	78bb      	ldrb	r3, [r7, #2]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d120      	bne.n	8001bd8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	333d      	adds	r3, #61	@ 0x3d
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	332a      	adds	r3, #42	@ 0x2a
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bc0:	e07e      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	332a      	adds	r3, #42	@ 0x2a
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	701a      	strb	r2, [r3, #0]
      break;
 8001bd6:	e073      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	333c      	adds	r3, #60	@ 0x3c
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	332a      	adds	r3, #42	@ 0x2a
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
      break;
 8001c02:	e05d      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	332a      	adds	r3, #42	@ 0x2a
 8001c14:	2202      	movs	r2, #2
 8001c16:	701a      	strb	r2, [r3, #0]
      break;
 8001c18:	e052      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c1a:	78bb      	ldrb	r3, [r7, #2]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d120      	bne.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	333d      	adds	r3, #61	@ 0x3d
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	332a      	adds	r3, #42	@ 0x2a
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c4a:	e039      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	332a      	adds	r3, #42	@ 0x2a
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	701a      	strb	r2, [r3, #0]
      break;
 8001c60:	e02e      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	333c      	adds	r3, #60	@ 0x3c
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	332a      	adds	r3, #42	@ 0x2a
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
      break;
 8001c8c:	e018      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	332a      	adds	r3, #42	@ 0x2a
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	332a      	adds	r3, #42	@ 0x2a
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
      break;
 8001cb8:	e002      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001cba:	bf00      	nop
 8001cbc:	e000      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001cbe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	332c      	adds	r3, #44	@ 0x2c
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	8b39      	ldrh	r1, [r7, #24]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4403      	add	r3, r0
 8001ce4:	3334      	adds	r3, #52	@ 0x34
 8001ce6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	334c      	adds	r3, #76	@ 0x4c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3338      	adds	r3, #56	@ 0x38
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3315      	adds	r3, #21
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	334d      	adds	r3, #77	@ 0x4d
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3310      	adds	r3, #16
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	1d19      	adds	r1, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	799b      	ldrb	r3, [r3, #6]
 8001d52:	461a      	mov	r2, r3
 8001d54:	f004 fa5a 	bl	800620c <USB_HC_StartXfer>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop

08001d64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 ff4e 	bl	8005c1c <USB_GetMode>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	f040 80fb 	bne.w	8001f7e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 ff11 	bl	8005bb4 <USB_ReadInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80f1 	beq.w	8001f7c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 ff08 	bl	8005bb4 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dae:	d104      	bne.n	8001dba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001db8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fef8 	bl	8005bb4 <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dce:	d104      	bne.n	8001dda <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fee8 	bl	8005bb4 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001dee:	d104      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001df8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fed8 	bl	8005bb4 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d103      	bne.n	8001e16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 feca 	bl	8005bb4 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e2a:	d120      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d113      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e46:	2110      	movs	r1, #16
 8001e48:	6938      	ldr	r0, [r7, #16]
 8001e4a:	f003 fdbd 	bl	80059c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e4e:	6938      	ldr	r0, [r7, #16]
 8001e50:	f003 fdec 	bl	8005a2c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7a5b      	ldrb	r3, [r3, #9]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d105      	bne.n	8001e68 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 ffde 	bl	8005e24 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f006 ffa5 	bl	8008db8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fe9e 	bl	8005bb4 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e82:	d102      	bne.n	8001e8a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f001 fd4d 	bl	8003924 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fe90 	bl	8005bb4 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d106      	bne.n	8001eac <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f006 ff6e 	bl	8008d80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fe7f 	bl	8005bb4 <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ec0:	d139      	bne.n	8001f36 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 fc1a 	bl	8006700 <USB_HC_ReadInterrupt>
 8001ecc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e025      	b.n	8001f20 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d018      	beq.n	8001f1a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001efe:	d106      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f905 	bl	8002116 <HCD_HC_IN_IRQHandler>
 8001f0c:	e005      	b.n	8001f1a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 ff67 	bl	8002de8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	795b      	ldrb	r3, [r3, #5]
 8001f24:	461a      	mov	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d3d3      	bcc.n	8001ed4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fe3a 	bl	8005bb4 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d101      	bne.n	8001f4e <HAL_HCD_IRQHandler+0x1ea>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_HCD_IRQHandler+0x1ec>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d014      	beq.n	8001f7e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0210 	bic.w	r2, r2, #16
 8001f62:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f001 fbfe 	bl	8003766 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0210 	orr.w	r2, r2, #16
 8001f78:	619a      	str	r2, [r3, #24]
 8001f7a:	e000      	b.n	8001f7e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001f7c:	bf00      	nop
    }
  }
}
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_HCD_Start+0x16>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e013      	b.n	8001fc2 <HAL_HCD_Start+0x3e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 ffa2 	bl	8005ef2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fc9a 	bl	80058ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_HCD_Stop+0x16>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e00d      	b.n	8001ffc <HAL_HCD_Stop+0x32>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fcf5 	bl	80069dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f003 ff44 	bl	8005e9e <USB_ResetPort>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	334c      	adds	r3, #76	@ 0x4c
 800203c:	781b      	ldrb	r3, [r3, #0]
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3338      	adds	r3, #56	@ 0x38
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 ff86 	bl	8005f92 <USB_GetCurrentFrame>
 8002086:	4603      	mov	r3, r0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 ff61 	bl	8005f64 <USB_GetHostSpeed>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	331a      	adds	r3, #26
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	331b      	adds	r3, #27
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3325      	adds	r3, #37	@ 0x25
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3324      	adds	r3, #36	@ 0x24
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fd50 	bl	8005bda <USB_ReadChInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11a      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2304      	movs	r3, #4
 8002154:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334d      	adds	r3, #77	@ 0x4d
 8002166:	2207      	movs	r2, #7
 8002168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f004 fad5 	bl	8006722 <USB_HC_Halt>
 8002178:	e09e      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fd29 	bl	8005bda <USB_ReadChInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002192:	d11b      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	334d      	adds	r3, #77	@ 0x4d
 80021b8:	2208      	movs	r2, #8
 80021ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 faac 	bl	8006722 <USB_HC_Halt>
 80021ca:	e075      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fd00 	bl	8005bda <USB_ReadChInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d11a      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f0:	461a      	mov	r2, r3
 80021f2:	2308      	movs	r3, #8
 80021f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	334d      	adds	r3, #77	@ 0x4d
 8002206:	2206      	movs	r2, #6
 8002208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f004 fa85 	bl	8006722 <USB_HC_Halt>
 8002218:	e04e      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fcd9 	bl	8005bda <USB_ReadChInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002232:	d11b      	bne.n	800226c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002246:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	334d      	adds	r3, #77	@ 0x4d
 8002258:	2209      	movs	r2, #9
 800225a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fa5c 	bl	8006722 <USB_HC_Halt>
 800226a:	e025      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fcb0 	bl	8005bda <USB_ReadChInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	2b80      	cmp	r3, #128	@ 0x80
 8002282:	d119      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	334d      	adds	r3, #77	@ 0x4d
 80022a6:	2207      	movs	r2, #7
 80022a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fa35 	bl	8006722 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fc8a 	bl	8005bda <USB_ReadChInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d0:	d112      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 fa21 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022f2:	6093      	str	r3, [r2, #8]
 80022f4:	f000 bd75 	b.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fc6a 	bl	8005bda <USB_ReadChInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 8128 	bne.w	8002562 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	2320      	movs	r3, #32
 8002322:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	331b      	adds	r3, #27
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d119      	bne.n	800236e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	331b      	adds	r3, #27
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	0151      	lsls	r1, r2, #5
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	440a      	add	r2, r1
 8002364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	799b      	ldrb	r3, [r3, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01b      	beq.n	80023ae <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3330      	adds	r3, #48	@ 0x30
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	1ac9      	subs	r1, r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4403      	add	r3, r0
 80023aa:	3338      	adds	r3, #56	@ 0x38
 80023ac:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	334d      	adds	r3, #77	@ 0x4d
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3344      	adds	r3, #68	@ 0x44
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2301      	movs	r3, #1
 80023e6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3326      	adds	r3, #38	@ 0x26
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3326      	adds	r3, #38	@ 0x26
 800240e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002410:	2b02      	cmp	r3, #2
 8002412:	d110      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f004 f980 	bl	8006722 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242e:	461a      	mov	r2, r3
 8002430:	2310      	movs	r3, #16
 8002432:	6093      	str	r3, [r2, #8]
 8002434:	e03d      	b.n	80024b2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3326      	adds	r3, #38	@ 0x26
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d00a      	beq.n	8002462 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	3326      	adds	r3, #38	@ 0x26
 800245c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800245e:	2b01      	cmp	r3, #1
 8002460:	d127      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	0151      	lsls	r1, r2, #5
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	440a      	add	r2, r1
 8002478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800247c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002480:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334c      	adds	r3, #76	@ 0x4c
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	334c      	adds	r3, #76	@ 0x4c
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f006 fc91 	bl	8008dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	799b      	ldrb	r3, [r3, #6]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d13b      	bne.n	8002532 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3338      	adds	r3, #56	@ 0x38
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4403      	add	r3, r0
 80024da:	3328      	adds	r3, #40	@ 0x28
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	440b      	add	r3, r1
 80024e0:	1e59      	subs	r1, r3, #1
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4403      	add	r3, r0
 80024f0:	3328      	adds	r3, #40	@ 0x28
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8470 	beq.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	333c      	adds	r3, #60	@ 0x3c
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	333c      	adds	r3, #60	@ 0x3c
 800252a:	4602      	mov	r2, r0
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	f000 bc58 	b.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	333c      	adds	r3, #60	@ 0x3c
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2d8      	uxtb	r0, r3
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	333c      	adds	r3, #60	@ 0x3c
 800255a:	4602      	mov	r2, r0
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	f000 bc40 	b.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f003 fb35 	bl	8005bda <USB_ReadChInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b20      	cmp	r3, #32
 8002578:	d131      	bne.n	80025de <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	2320      	movs	r3, #32
 800258a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	331a      	adds	r3, #26
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 841f 	bne.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	331b      	adds	r3, #27
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	334d      	adds	r3, #77	@ 0x4d
 80025c8:	2203      	movs	r2, #3
 80025ca:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 f8a4 	bl	8006722 <USB_HC_Halt>
 80025da:	f000 bc02 	b.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 faf7 	bl	8005bda <USB_ReadChInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f040 8305 	bne.w	8002c02 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	2302      	movs	r3, #2
 8002608:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	334d      	adds	r3, #77	@ 0x4d
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d114      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	2202      	movs	r2, #2
 8002632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334c      	adds	r3, #76	@ 0x4c
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e2cc      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334d      	adds	r3, #77	@ 0x4d
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b06      	cmp	r3, #6
 800265e:	d114      	bne.n	800268a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334d      	adds	r3, #77	@ 0x4d
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334c      	adds	r3, #76	@ 0x4c
 8002684:	2205      	movs	r2, #5
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e2ac      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	334d      	adds	r3, #77	@ 0x4d
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b07      	cmp	r3, #7
 800269e:	d00b      	beq.n	80026b8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334d      	adds	r3, #77	@ 0x4d
 80026b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026b2:	2b09      	cmp	r3, #9
 80026b4:	f040 80a6 	bne.w	8002804 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334d      	adds	r3, #77	@ 0x4d
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3344      	adds	r3, #68	@ 0x44
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4403      	add	r3, r0
 80026ec:	3344      	adds	r3, #68	@ 0x44
 80026ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3344      	adds	r3, #68	@ 0x44
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d943      	bls.n	800278e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	3344      	adds	r3, #68	@ 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	331a      	adds	r3, #26
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d123      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	331b      	adds	r3, #27
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	331c      	adds	r3, #28
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	334c      	adds	r3, #76	@ 0x4c
 8002788:	2204      	movs	r2, #4
 800278a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800278c:	e229      	b.n	8002be2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	334c      	adds	r3, #76	@ 0x4c
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3326      	adds	r3, #38	@ 0x26
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3326      	adds	r3, #38	@ 0x26
 80027c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	f040 8209 	bne.w	8002be2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fc:	461a      	mov	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002802:	e1ee      	b.n	8002be2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334d      	adds	r3, #77	@ 0x4d
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b05      	cmp	r3, #5
 8002818:	f040 80c8 	bne.w	80029ac <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	334d      	adds	r3, #77	@ 0x4d
 800282c:	2202      	movs	r2, #2
 800282e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	331b      	adds	r3, #27
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 81ce 	bne.w	8002be4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3326      	adds	r3, #38	@ 0x26
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d16b      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3348      	adds	r3, #72	@ 0x48
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1c59      	adds	r1, r3, #1
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	3348      	adds	r3, #72	@ 0x48
 8002880:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3348      	adds	r3, #72	@ 0x48
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d943      	bls.n	8002920 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3348      	adds	r3, #72	@ 0x48
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	331b      	adds	r3, #27
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3344      	adds	r3, #68	@ 0x44
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d809      	bhi.n	80028ea <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	331c      	adds	r3, #28
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	0151      	lsls	r1, r2, #5
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	440a      	add	r2, r1
 8002900:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002908:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	334c      	adds	r3, #76	@ 0x4c
 800291a:	2204      	movs	r2, #4
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e014      	b.n	800294a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	334c      	adds	r3, #76	@ 0x4c
 8002930:	2202      	movs	r2, #2
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e009      	b.n	800294a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	334c      	adds	r3, #76	@ 0x4c
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3326      	adds	r3, #38	@ 0x26
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3326      	adds	r3, #38	@ 0x26
 8002970:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 8136 	bne.w	8002be4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800298e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002996:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e11b      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	334d      	adds	r3, #77	@ 0x4d
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	f040 8081 	bne.w	8002ac6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334d      	adds	r3, #77	@ 0x4d
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	331b      	adds	r3, #27
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	f040 80fa 	bne.w	8002be4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	334c      	adds	r3, #76	@ 0x4c
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a22:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a42:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a5e:	f023 0320 	bic.w	r3, r3, #32
 8002a62:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3326      	adds	r3, #38	@ 0x26
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3326      	adds	r3, #38	@ 0x26
 8002a8a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f040 80a9 	bne.w	8002be4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002aa8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ab0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e08e      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	334d      	adds	r3, #77	@ 0x4d
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d143      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334d      	adds	r3, #77	@ 0x4d
 8002aec:	2202      	movs	r2, #2
 8002aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334c      	adds	r3, #76	@ 0x4c
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3326      	adds	r3, #38	@ 0x26
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3326      	adds	r3, #38	@ 0x26
 8002b2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d159      	bne.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b46:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b4e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e03f      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334d      	adds	r3, #77	@ 0x4d
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d126      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	334d      	adds	r3, #77	@ 0x4d
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3344      	adds	r3, #68	@ 0x44
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c59      	adds	r1, r3, #1
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4403      	add	r3, r0
 8002bae:	3344      	adds	r3, #68	@ 0x44
 8002bb0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	334c      	adds	r3, #76	@ 0x4c
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e00d      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	334d      	adds	r3, #77	@ 0x4d
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	f000 8100 	beq.w	8002de0 <HCD_HC_IN_IRQHandler+0xcca>
 8002be0:	e000      	b.n	8002be4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002be2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334c      	adds	r3, #76	@ 0x4c
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f006 f8ea 	bl	8008dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c00:	e0ef      	b.n	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f002 ffe5 	bl	8005bda <USB_ReadChInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c16:	2b40      	cmp	r3, #64	@ 0x40
 8002c18:	d12f      	bne.n	8002c7a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	2340      	movs	r3, #64	@ 0x40
 8002c2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	334d      	adds	r3, #77	@ 0x4d
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331a      	adds	r3, #26
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3344      	adds	r3, #68	@ 0x44
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fd55 	bl	8006722 <USB_HC_Halt>
 8002c78:	e0b3      	b.n	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 ffa9 	bl	8005bda <USB_ReadChInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	f040 80a7 	bne.w	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3326      	adds	r3, #38	@ 0x26
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d11b      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3344      	adds	r3, #68	@ 0x44
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	334d      	adds	r3, #77	@ 0x4d
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fd21 	bl	8006722 <USB_HC_Halt>
 8002ce0:	e03f      	b.n	8002d62 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3326      	adds	r3, #38	@ 0x26
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3326      	adds	r3, #38	@ 0x26
 8002d08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d129      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3344      	adds	r3, #68	@ 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	799b      	ldrb	r3, [r3, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HCD_HC_IN_IRQHandler+0xc2a>
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	331b      	adds	r3, #27
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d110      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	334d      	adds	r3, #77	@ 0x4d
 8002d50:	2204      	movs	r2, #4
 8002d52:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fce0 	bl	8006722 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	331b      	adds	r3, #27
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d129      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	331b      	adds	r3, #27
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002daa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	0151      	lsls	r1, r2, #5
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	440a      	add	r2, r1
 8002dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
 8002dca:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2310      	movs	r3, #16
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	e000      	b.n	8002de2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002de0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fee7 	bl	8005bda <USB_ReadChInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d11b      	bne.n	8002e4e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	2304      	movs	r3, #4
 8002e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	334d      	adds	r3, #77	@ 0x4d
 8002e38:	2207      	movs	r2, #7
 8002e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fc6c 	bl	8006722 <USB_HC_Halt>
 8002e4a:	f000 bc89 	b.w	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 febf 	bl	8005bda <USB_ReadChInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 8082 	bne.w	8002f6c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2320      	movs	r3, #32
 8002e78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3319      	adds	r3, #25
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d124      	bne.n	8002eda <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3319      	adds	r3, #25
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334c      	adds	r3, #76	@ 0x4c
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334d      	adds	r3, #77	@ 0x4d
 8002ec8:	2203      	movs	r2, #3
 8002eca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fc24 	bl	8006722 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	331a      	adds	r3, #26
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	f040 8437 	bne.w	8003760 <HCD_HC_OUT_IRQHandler+0x978>
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	331b      	adds	r3, #27
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 842b 	bne.w	8003760 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3326      	adds	r3, #38	@ 0x26
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d009      	beq.n	8002f34 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	331b      	adds	r3, #27
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	334d      	adds	r3, #77	@ 0x4d
 8002f44:	2203      	movs	r2, #3
 8002f46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 fbe6 	bl	8006722 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3344      	adds	r3, #68	@ 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e3f9      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fe30 	bl	8005bda <USB_ReadChInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	d111      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fbbd 	bl	8006722 <USB_HC_Halt>
 8002fa8:	e3da      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 fe11 	bl	8005bda <USB_ReadChInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d168      	bne.n	8003094 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3344      	adds	r3, #68	@ 0x44
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fdfb 	bl	8005bda <USB_ReadChInterrupts>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d112      	bne.n	8003014 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3319      	adds	r3, #25
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	2340      	movs	r3, #64	@ 0x40
 8003012:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	331b      	adds	r3, #27
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d019      	beq.n	800305e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	331b      	adds	r3, #27
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	440a      	add	r2, r1
 8003054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	461a      	mov	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	334d      	adds	r3, #77	@ 0x4d
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fb48 	bl	8006722 <USB_HC_Halt>
 8003092:	e365      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f002 fd9c 	bl	8005bda <USB_ReadChInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d139      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	334d      	adds	r3, #77	@ 0x4d
 80030bc:	2205      	movs	r2, #5
 80030be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	331a      	adds	r3, #26
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3319      	adds	r3, #25
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3344      	adds	r3, #68	@ 0x44
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fb0b 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2340      	movs	r3, #64	@ 0x40
 800311c:	6093      	str	r3, [r2, #8]
 800311e:	e31f      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fd56 	bl	8005bda <USB_ReadChInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b08      	cmp	r3, #8
 8003136:	d11a      	bne.n	800316e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	2308      	movs	r3, #8
 8003148:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	2206      	movs	r2, #6
 800315c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fadb 	bl	8006722 <USB_HC_Halt>
 800316c:	e2f8      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fd2f 	bl	8005bda <USB_ReadChInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b10      	cmp	r3, #16
 8003184:	d144      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3344      	adds	r3, #68	@ 0x44
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	334d      	adds	r3, #77	@ 0x4d
 80031aa:	2204      	movs	r2, #4
 80031ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3319      	adds	r3, #25
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d114      	bne.n	80031ee <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3318      	adds	r3, #24
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3319      	adds	r3, #25
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fa93 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	2310      	movs	r3, #16
 800320c:	6093      	str	r3, [r2, #8]
 800320e:	e2a7      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fcde 	bl	8005bda <USB_ReadChInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003224:	2b80      	cmp	r3, #128	@ 0x80
 8003226:	f040 8083 	bne.w	8003330 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	799b      	ldrb	r3, [r3, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d111      	bne.n	8003256 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	334d      	adds	r3, #77	@ 0x4d
 8003242:	2207      	movs	r2, #7
 8003244:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fa67 	bl	8006722 <USB_HC_Halt>
 8003254:	e062      	b.n	800331c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	3344      	adds	r3, #68	@ 0x44
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1c59      	adds	r1, r3, #1
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4403      	add	r3, r0
 8003276:	3344      	adds	r3, #68	@ 0x44
 8003278:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	@ 0x44
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d922      	bls.n	80032d6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3344      	adds	r3, #68	@ 0x44
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334c      	adds	r3, #76	@ 0x4c
 80032b4:	2204      	movs	r2, #4
 80032b6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334c      	adds	r3, #76	@ 0x4c
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f005 fd80 	bl	8008dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032d4:	e022      	b.n	800331c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334c      	adds	r3, #76	@ 0x4c
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003300:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003308:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	e217      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f002 fc4e 	bl	8005bda <USB_ReadChInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003348:	d11b      	bne.n	8003382 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334d      	adds	r3, #77	@ 0x4d
 800335a:	2209      	movs	r2, #9
 800335c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f003 f9db 	bl	8006722 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	461a      	mov	r2, r3
 800337a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800337e:	6093      	str	r3, [r2, #8]
 8003380:	e1ee      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f002 fc25 	bl	8005bda <USB_ReadChInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 81df 	bne.w	800375a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2302      	movs	r3, #2
 80033ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	@ 0x4d
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 8093 	bne.w	80034ec <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334d      	adds	r3, #77	@ 0x4d
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334c      	adds	r3, #76	@ 0x4c
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3326      	adds	r3, #38	@ 0x26
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d00b      	beq.n	800341c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3326      	adds	r3, #38	@ 0x26
 8003414:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003416:	2b03      	cmp	r3, #3
 8003418:	f040 8190 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	799b      	ldrb	r3, [r3, #6]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d115      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	333d      	adds	r3, #61	@ 0x3d
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2d8      	uxtb	r0, r3
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	333d      	adds	r3, #61	@ 0x3d
 800344c:	4602      	mov	r2, r0
 800344e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	799b      	ldrb	r3, [r3, #6]
 8003454:	2b01      	cmp	r3, #1
 8003456:	f040 8171 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x954>
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3334      	adds	r3, #52	@ 0x34
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8165 	beq.w	800373c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3334      	adds	r3, #52	@ 0x34
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	3328      	adds	r3, #40	@ 0x28
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	440b      	add	r3, r1
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4403      	add	r3, r0
 80034a8:	3328      	adds	r3, #40	@ 0x28
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 813f 	beq.w	800373c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	333d      	adds	r3, #61	@ 0x3d
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	b2d8      	uxtb	r0, r3
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	333d      	adds	r3, #61	@ 0x3d
 80034e6:	4602      	mov	r2, r0
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e127      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334d      	adds	r3, #77	@ 0x4d
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d120      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	334d      	adds	r3, #77	@ 0x4d
 8003512:	2202      	movs	r2, #2
 8003514:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	331b      	adds	r3, #27
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 8107 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334c      	adds	r3, #76	@ 0x4c
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e0fb      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	334d      	adds	r3, #77	@ 0x4d
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d13a      	bne.n	80035d0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334d      	adds	r3, #77	@ 0x4d
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	334c      	adds	r3, #76	@ 0x4c
 800357e:	2202      	movs	r2, #2
 8003580:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	331b      	adds	r3, #27
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 80d1 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	331b      	adds	r3, #27
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035cc:	6053      	str	r3, [r2, #4]
 80035ce:	e0b5      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d114      	bne.n	8003610 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	334d      	adds	r3, #77	@ 0x4d
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334c      	adds	r3, #76	@ 0x4c
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e095      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	334d      	adds	r3, #77	@ 0x4d
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b06      	cmp	r3, #6
 8003624:	d114      	bne.n	8003650 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334d      	adds	r3, #77	@ 0x4d
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334c      	adds	r3, #76	@ 0x4c
 800364a:	2205      	movs	r2, #5
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e075      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	334d      	adds	r3, #77	@ 0x4d
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b07      	cmp	r3, #7
 8003664:	d00a      	beq.n	800367c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	334d      	adds	r3, #77	@ 0x4d
 8003676:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003678:	2b09      	cmp	r3, #9
 800367a:	d170      	bne.n	800375e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334d      	adds	r3, #77	@ 0x4d
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4403      	add	r3, r0
 80036b0:	3344      	adds	r3, #68	@ 0x44
 80036b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3344      	adds	r3, #68	@ 0x44
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d914      	bls.n	80036f4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3344      	adds	r3, #68	@ 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334c      	adds	r3, #76	@ 0x4c
 80036ee:	2204      	movs	r2, #4
 80036f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f2:	e022      	b.n	800373a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	334c      	adds	r3, #76	@ 0x4c
 8003704:	2202      	movs	r2, #2
 8003706:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800371e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003726:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800373a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334c      	adds	r3, #76	@ 0x4c
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f005 fb3e 	bl	8008dd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003758:	e002      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800375e:	bf00      	nop
  }
}
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b08a      	sub	sp, #40	@ 0x28
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	0c5b      	lsrs	r3, r3, #17
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d004      	beq.n	80037ac <HCD_RXQLVL_IRQHandler+0x46>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	f000 80b6 	beq.w	8003916 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037aa:	e0b7      	b.n	800391c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80b3 	beq.w	800391a <HCD_RXQLVL_IRQHandler+0x1b4>
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	332c      	adds	r3, #44	@ 0x2c
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80a7 	beq.w	800391a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3338      	adds	r3, #56	@ 0x38
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	18d1      	adds	r1, r2, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4403      	add	r3, r0
 80037f0:	3334      	adds	r3, #52	@ 0x34
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4299      	cmp	r1, r3
 80037f6:	f200 8083 	bhi.w	8003900 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	332c      	adds	r3, #44	@ 0x2c
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	b292      	uxth	r2, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f002 f975 	bl	8005b04 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	332c      	adds	r3, #44	@ 0x2c
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	18d1      	adds	r1, r2, r3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4403      	add	r3, r0
 800383e:	332c      	adds	r3, #44	@ 0x2c
 8003840:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3338      	adds	r3, #56	@ 0x38
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	18d1      	adds	r1, r2, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4403      	add	r3, r0
 8003866:	3338      	adds	r3, #56	@ 0x38
 8003868:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	0cdb      	lsrs	r3, r3, #19
 800387a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	3328      	adds	r3, #40	@ 0x28
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4293      	cmp	r3, r2
 8003898:	d13f      	bne.n	800391a <HCD_RXQLVL_IRQHandler+0x1b4>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03c      	beq.n	800391a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038be:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	333c      	adds	r3, #60	@ 0x3c
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2d8      	uxtb	r0, r3
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	333c      	adds	r3, #60	@ 0x3c
 80038fa:	4602      	mov	r2, r0
 80038fc:	701a      	strb	r2, [r3, #0]
      break;
 80038fe:	e00c      	b.n	800391a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	334c      	adds	r3, #76	@ 0x4c
 8003910:	2204      	movs	r2, #4
 8003912:	701a      	strb	r2, [r3, #0]
      break;
 8003914:	e001      	b.n	800391a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800391a:	bf00      	nop
  }
}
 800391c:	bf00      	nop
 800391e:	3728      	adds	r7, #40	@ 0x28
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003950:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d10b      	bne.n	8003974 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f005 fa18 	bl	8008d9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b08      	cmp	r3, #8
 800397c:	d132      	bne.n	80039e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d126      	bne.n	80039de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7a5b      	ldrb	r3, [r3, #9]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d113      	bne.n	80039c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800399e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039a2:	d106      	bne.n	80039b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 fa3a 	bl	8005e24 <USB_InitFSLSPClkSel>
 80039b0:	e011      	b.n	80039d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 fa33 	bl	8005e24 <USB_InitFSLSPClkSel>
 80039be:	e00a      	b.n	80039d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	79db      	ldrb	r3, [r3, #7]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039ce:	461a      	mov	r2, r3
 80039d0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80039d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f005 fa0a 	bl	8008df0 <HAL_HCD_PortEnabled_Callback>
 80039dc:	e002      	b.n	80039e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f005 fa14 	bl	8008e0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d103      	bne.n	80039f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f043 0320 	orr.w	r3, r3, #32
 80039f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6013      	str	r3, [r2, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e12b      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f8ae 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	@ 0x24
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a70:	f001 fa20 	bl	8004eb4 <HAL_RCC_GetPCLK1Freq>
 8003a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a81      	ldr	r2, [pc, #516]	@ (8003c80 <HAL_I2C_Init+0x274>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d807      	bhi.n	8003a90 <HAL_I2C_Init+0x84>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a80      	ldr	r2, [pc, #512]	@ (8003c84 <HAL_I2C_Init+0x278>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e006      	b.n	8003a9e <HAL_I2C_Init+0x92>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a7d      	ldr	r2, [pc, #500]	@ (8003c88 <HAL_I2C_Init+0x27c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0e7      	b.n	8003c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a78      	ldr	r2, [pc, #480]	@ (8003c8c <HAL_I2C_Init+0x280>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0c9b      	lsrs	r3, r3, #18
 8003ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c80 <HAL_I2C_Init+0x274>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d802      	bhi.n	8003ae0 <HAL_I2C_Init+0xd4>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	e009      	b.n	8003af4 <HAL_I2C_Init+0xe8>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a69      	ldr	r2, [pc, #420]	@ (8003c90 <HAL_I2C_Init+0x284>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	3301      	adds	r3, #1
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	495c      	ldr	r1, [pc, #368]	@ (8003c80 <HAL_I2C_Init+0x274>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	d819      	bhi.n	8003b48 <HAL_I2C_Init+0x13c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e59      	subs	r1, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b28:	400b      	ands	r3, r1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_I2C_Init+0x138>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e59      	subs	r1, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	e051      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e04f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <HAL_I2C_Init+0x168>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e012      	b.n	8003b9a <HAL_I2C_Init+0x18e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x196>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_I2C_Init+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e58      	subs	r0, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	440b      	add	r3, r1
 8003bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc6:	e00f      	b.n	8003be8 <HAL_I2C_Init+0x1dc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6809      	ldr	r1, [r1, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6911      	ldr	r1, [r2, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	000186a0 	.word	0x000186a0
 8003c84:	001e847f 	.word	0x001e847f
 8003c88:	003d08ff 	.word	0x003d08ff
 8003c8c:	431bde83 	.word	0x431bde83
 8003c90:	10624dd3 	.word	0x10624dd3

08003c94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e128      	b.n	8003ef8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a90      	ldr	r2, [pc, #576]	@ (8003f00 <HAL_I2S_Init+0x26c>)
 8003cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fc ffaf 	bl	8000c24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cdc:	f023 030f 	bic.w	r3, r3, #15
 8003ce0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d060      	beq.n	8003db4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e001      	b.n	8003d04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d802      	bhi.n	8003d12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f001 f9d8 	bl	80050c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d18:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d22:	d125      	bne.n	8003d70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	3305      	adds	r3, #5
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	e01f      	b.n	8003d8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	3305      	adds	r3, #5
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	e00e      	b.n	8003d8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	461a      	mov	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	3305      	adds	r3, #5
 8003d8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4a5c      	ldr	r2, [pc, #368]	@ (8003f04 <HAL_I2S_Init+0x270>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003db4:	2302      	movs	r3, #2
 8003db6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d902      	bls.n	8003dc8 <HAL_I2S_Init+0x134>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2bff      	cmp	r3, #255	@ 0xff
 8003dc6:	d907      	bls.n	8003dd8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e08f      	b.n	8003ef8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6851      	ldr	r1, [r2, #4]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	4311      	orrs	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68d2      	ldr	r2, [r2, #12]
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6992      	ldr	r2, [r2, #24]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d161      	bne.n	8003ee8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <HAL_I2S_Init+0x274>)
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a37      	ldr	r2, [pc, #220]	@ (8003f0c <HAL_I2S_Init+0x278>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_I2S_Init+0x1a4>
 8003e34:	4b36      	ldr	r3, [pc, #216]	@ (8003f10 <HAL_I2S_Init+0x27c>)
 8003e36:	e001      	b.n	8003e3c <HAL_I2S_Init+0x1a8>
 8003e38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	4932      	ldr	r1, [pc, #200]	@ (8003f0c <HAL_I2S_Init+0x278>)
 8003e44:	428a      	cmp	r2, r1
 8003e46:	d101      	bne.n	8003e4c <HAL_I2S_Init+0x1b8>
 8003e48:	4a31      	ldr	r2, [pc, #196]	@ (8003f10 <HAL_I2S_Init+0x27c>)
 8003e4a:	e001      	b.n	8003e50 <HAL_I2S_Init+0x1bc>
 8003e4c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e50:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e54:	f023 030f 	bic.w	r3, r3, #15
 8003e58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f0c <HAL_I2S_Init+0x278>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <HAL_I2S_Init+0x1d4>
 8003e64:	4b2a      	ldr	r3, [pc, #168]	@ (8003f10 <HAL_I2S_Init+0x27c>)
 8003e66:	e001      	b.n	8003e6c <HAL_I2S_Init+0x1d8>
 8003e68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	@ (8003f0c <HAL_I2S_Init+0x278>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_I2S_Init+0x1ea>
 8003e7a:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <HAL_I2S_Init+0x27c>)
 8003e7c:	e001      	b.n	8003e82 <HAL_I2S_Init+0x1ee>
 8003e7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8e:	d003      	beq.n	8003e98 <HAL_I2S_Init+0x204>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e001      	b.n	8003ea4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ed0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f0c <HAL_I2S_Init+0x278>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2S_Init+0x24c>
 8003edc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <HAL_I2S_Init+0x27c>)
 8003ede:	e001      	b.n	8003ee4 <HAL_I2S_Init+0x250>
 8003ee0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ee4:	897a      	ldrh	r2, [r7, #10]
 8003ee6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	0800400b 	.word	0x0800400b
 8003f04:	cccccccd 	.word	0xcccccccd
 8003f08:	08004121 	.word	0x08004121
 8003f0c:	40003800 	.word	0x40003800
 8003f10:	40003400 	.word	0x40003400

08003f14 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffb8 	bl	8003f14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ff2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff93 	bl	8003f28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b04      	cmp	r3, #4
 8004024:	d13a      	bne.n	800409c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d109      	bne.n	8004044 <I2S_IRQHandler+0x3a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	d102      	bne.n	8004044 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffb4 	bl	8003fac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d126      	bne.n	800409c <I2S_IRQHandler+0x92>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b20      	cmp	r3, #32
 800405a:	d11f      	bne.n	800409c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800406a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff50 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d136      	bne.n	8004116 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d109      	bne.n	80040c6 <I2S_IRQHandler+0xbc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b80      	cmp	r3, #128	@ 0x80
 80040be:	d102      	bne.n	80040c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff45 	bl	8003f50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d122      	bne.n	8004116 <I2S_IRQHandler+0x10c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d11b      	bne.n	8004116 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff13 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a92      	ldr	r2, [pc, #584]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800413a:	4b92      	ldr	r3, [pc, #584]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a8b      	ldr	r2, [pc, #556]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004158:	4b8a      	ldr	r3, [pc, #552]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800415a:	e001      	b.n	8004160 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800415c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800416c:	d004      	beq.n	8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 8099 	bne.w	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d107      	bne.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f925 	bl	80043dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9c8 	bl	800453c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d13a      	bne.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d035      	beq.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041cc:	e001      	b.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4969      	ldr	r1, [pc, #420]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041da:	428b      	cmp	r3, r1
 80041dc:	d101      	bne.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041de:	4b69      	ldr	r3, [pc, #420]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f043 0202 	orr.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fe88 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b08      	cmp	r3, #8
 8004234:	f040 80c3 	bne.w	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80bd 	beq.w	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004252:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a49      	ldr	r2, [pc, #292]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800425e:	4b49      	ldr	r3, [pc, #292]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004260:	e001      	b.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4944      	ldr	r1, [pc, #272]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426e:	428b      	cmp	r3, r1
 8004270:	d101      	bne.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004272:	4b44      	ldr	r3, [pc, #272]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004274:	e001      	b.n	800427a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800427e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fe4a 	bl	8003f3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a8:	e089      	b.n	80043be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d107      	bne.n	80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f8be 	bl	8004440 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f8fd 	bl	80044d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d12f      	bne.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d02a      	beq.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004300:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800430c:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800430e:	e001      	b.n	8004314 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4919      	ldr	r1, [pc, #100]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d101      	bne.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004320:	4b18      	ldr	r3, [pc, #96]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004322:	e001      	b.n	8004328 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004324:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004328:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800432c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fdfa 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d136      	bne.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d031      	beq.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a07      	ldr	r2, [pc, #28]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004368:	e001      	b.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800436a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4902      	ldr	r1, [pc, #8]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004376:	428b      	cmp	r3, r1
 8004378:	d106      	bne.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800437a:	4b02      	ldr	r3, [pc, #8]	@ (8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800437c:	e006      	b.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800437e:	bf00      	nop
 8004380:	40003800 	.word	0x40003800
 8004384:	40003400 	.word	0x40003400
 8004388:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800438c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004390:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	f043 0204 	orr.w	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fdc0 	bl	8003f3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043bc:	e000      	b.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043be:	bf00      	nop
}
 80043c0:	bf00      	nop
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c99      	adds	r1, r3, #2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d113      	bne.n	8004436 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800441c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ffc9 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	1c99      	adds	r1, r3, #2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6251      	str	r1, [r2, #36]	@ 0x24
 8004452:	8819      	ldrh	r1, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1d      	ldr	r2, [pc, #116]	@ (80044d0 <I2SEx_TxISR_I2SExt+0x90>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <I2SEx_TxISR_I2SExt+0x22>
 800445e:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <I2SEx_TxISR_I2SExt+0x94>)
 8004460:	e001      	b.n	8004466 <I2SEx_TxISR_I2SExt+0x26>
 8004462:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004466:	460a      	mov	r2, r1
 8004468:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d121      	bne.n	80044c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <I2SEx_TxISR_I2SExt+0x90>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <I2SEx_TxISR_I2SExt+0x50>
 800448c:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <I2SEx_TxISR_I2SExt+0x94>)
 800448e:	e001      	b.n	8004494 <I2SEx_TxISR_I2SExt+0x54>
 8004490:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	490d      	ldr	r1, [pc, #52]	@ (80044d0 <I2SEx_TxISR_I2SExt+0x90>)
 800449c:	428b      	cmp	r3, r1
 800449e:	d101      	bne.n	80044a4 <I2SEx_TxISR_I2SExt+0x64>
 80044a0:	4b0c      	ldr	r3, [pc, #48]	@ (80044d4 <I2SEx_TxISR_I2SExt+0x94>)
 80044a2:	e001      	b.n	80044a8 <I2SEx_TxISR_I2SExt+0x68>
 80044a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff81 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40003800 	.word	0x40003800
 80044d4:	40003400 	.word	0x40003400

080044d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68d8      	ldr	r0, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	1c99      	adds	r1, r3, #2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044f0:	b282      	uxth	r2, r0
 80044f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d113      	bne.n	8004534 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800451a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff4a 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a20      	ldr	r2, [pc, #128]	@ (80045cc <I2SEx_RxISR_I2SExt+0x90>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <I2SEx_RxISR_I2SExt+0x16>
 800454e:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <I2SEx_RxISR_I2SExt+0x94>)
 8004550:	e001      	b.n	8004556 <I2SEx_RxISR_I2SExt+0x1a>
 8004552:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004556:	68d8      	ldr	r0, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	1c99      	adds	r1, r3, #2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004562:	b282      	uxth	r2, r0
 8004564:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d121      	bne.n	80045c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a12      	ldr	r2, [pc, #72]	@ (80045cc <I2SEx_RxISR_I2SExt+0x90>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <I2SEx_RxISR_I2SExt+0x50>
 8004588:	4b11      	ldr	r3, [pc, #68]	@ (80045d0 <I2SEx_RxISR_I2SExt+0x94>)
 800458a:	e001      	b.n	8004590 <I2SEx_RxISR_I2SExt+0x54>
 800458c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	490d      	ldr	r1, [pc, #52]	@ (80045cc <I2SEx_RxISR_I2SExt+0x90>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d101      	bne.n	80045a0 <I2SEx_RxISR_I2SExt+0x64>
 800459c:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <I2SEx_RxISR_I2SExt+0x94>)
 800459e:	e001      	b.n	80045a4 <I2SEx_RxISR_I2SExt+0x68>
 80045a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff03 	bl	80043c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40003800 	.word	0x40003800
 80045d0:	40003400 	.word	0x40003400

080045d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e267      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d075      	beq.n	80046de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045f2:	4b88      	ldr	r3, [pc, #544]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d00c      	beq.n	8004618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fe:	4b85      	ldr	r3, [pc, #532]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004606:	2b08      	cmp	r3, #8
 8004608:	d112      	bne.n	8004630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b82      	ldr	r3, [pc, #520]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004616:	d10b      	bne.n	8004630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	4b7e      	ldr	r3, [pc, #504]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05b      	beq.n	80046dc <HAL_RCC_OscConfig+0x108>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d157      	bne.n	80046dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e242      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004638:	d106      	bne.n	8004648 <HAL_RCC_OscConfig+0x74>
 800463a:	4b76      	ldr	r3, [pc, #472]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e01d      	b.n	8004684 <HAL_RCC_OscConfig+0xb0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x98>
 8004652:	4b70      	ldr	r3, [pc, #448]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a6f      	ldr	r2, [pc, #444]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b6d      	ldr	r3, [pc, #436]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6c      	ldr	r2, [pc, #432]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0xb0>
 800466c:	4b69      	ldr	r3, [pc, #420]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a68      	ldr	r2, [pc, #416]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b66      	ldr	r3, [pc, #408]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a65      	ldr	r2, [pc, #404]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 800467e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fc fd7a 	bl	8001184 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fc fd76 	bl	8001184 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	@ 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e207      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0xc0>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fc fd66 	bl	8001184 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fc fd62 	bl	8001184 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	@ 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e1f3      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	4b51      	ldr	r3, [pc, #324]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0xe8>
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d063      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f6:	4b47      	ldr	r3, [pc, #284]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d11c      	bne.n	800473c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004702:	4b44      	ldr	r3, [pc, #272]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d116      	bne.n	800473c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470e:	4b41      	ldr	r3, [pc, #260]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_RCC_OscConfig+0x152>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1c7      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4937      	ldr	r1, [pc, #220]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	e03a      	b.n	80047b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004744:	4b34      	ldr	r3, [pc, #208]	@ (8004818 <HAL_RCC_OscConfig+0x244>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fc fd1b 	bl	8001184 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fc fd17 	bl	8001184 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e1a8      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	4b2b      	ldr	r3, [pc, #172]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b28      	ldr	r3, [pc, #160]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4925      	ldr	r1, [pc, #148]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	e015      	b.n	80047b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b24      	ldr	r3, [pc, #144]	@ (8004818 <HAL_RCC_OscConfig+0x244>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fc fcfa 	bl	8001184 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004794:	f7fc fcf6 	bl	8001184 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e187      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d036      	beq.n	800482c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c6:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_RCC_OscConfig+0x248>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fc fcda 	bl	8001184 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fc fcd6 	bl	8001184 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e167      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_RCC_OscConfig+0x240>)
 80047e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x200>
 80047f2:	e01b      	b.n	800482c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f4:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_OscConfig+0x248>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fc fcc3 	bl	8001184 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	e00e      	b.n	8004820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004802:	f7fc fcbf 	bl	8001184 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d907      	bls.n	8004820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e150      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
 8004814:	40023800 	.word	0x40023800
 8004818:	42470000 	.word	0x42470000
 800481c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004820:	4b88      	ldr	r3, [pc, #544]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ea      	bne.n	8004802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8097 	beq.w	8004968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483e:	4b81      	ldr	r3, [pc, #516]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	4a7c      	ldr	r2, [pc, #496]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	@ 0x40
 800485a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b77      	ldr	r3, [pc, #476]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b74      	ldr	r3, [pc, #464]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a73      	ldr	r2, [pc, #460]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fc fc7f 	bl	8001184 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fc fc7b 	bl	8001184 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e10c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a48 <HAL_RCC_OscConfig+0x474>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x2ea>
 80048b0:	4b64      	ldr	r3, [pc, #400]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a63      	ldr	r2, [pc, #396]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80048bc:	e01c      	b.n	80048f8 <HAL_RCC_OscConfig+0x324>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x30c>
 80048c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0x324>
 80048e0:	4b58      	ldr	r3, [pc, #352]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e4:	4a57      	ldr	r2, [pc, #348]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ec:	4b55      	ldr	r3, [pc, #340]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a54      	ldr	r2, [pc, #336]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 0304 	bic.w	r3, r3, #4
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d015      	beq.n	800492c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fc fc40 	bl	8001184 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	e00a      	b.n	800491e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004908:	f7fc fc3c 	bl	8001184 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0cb      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491e:	4b49      	ldr	r3, [pc, #292]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ee      	beq.n	8004908 <HAL_RCC_OscConfig+0x334>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492c:	f7fc fc2a 	bl	8001184 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fc fc26 	bl	8001184 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0b5      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ee      	bne.n	8004934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4b39      	ldr	r3, [pc, #228]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	4a38      	ldr	r2, [pc, #224]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80a1 	beq.w	8004ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004972:	4b34      	ldr	r3, [pc, #208]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b08      	cmp	r3, #8
 800497c:	d05c      	beq.n	8004a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d141      	bne.n	8004a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <HAL_RCC_OscConfig+0x478>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fc fbfa 	bl	8001184 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004994:	f7fc fbf6 	bl	8001184 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e087      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	4b27      	ldr	r3, [pc, #156]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	019b      	lsls	r3, r3, #6
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	491b      	ldr	r1, [pc, #108]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049dc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <HAL_RCC_OscConfig+0x478>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7fc fbcf 	bl	8001184 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fc fbcb 	bl	8001184 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e05c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fc:	4b11      	ldr	r3, [pc, #68]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x416>
 8004a08:	e054      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0a:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <HAL_RCC_OscConfig+0x478>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fc fbb8 	bl	8001184 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fc fbb4 	bl	8001184 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e045      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x444>
 8004a36:	e03d      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e038      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac0 <HAL_RCC_OscConfig+0x4ec>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d028      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d121      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11a      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a80:	4013      	ands	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d111      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800

08004ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0cc      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d90c      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b65      	ldr	r3, [pc, #404]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b63      	ldr	r3, [pc, #396]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0b8      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b18:	4b59      	ldr	r3, [pc, #356]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a58      	ldr	r2, [pc, #352]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b30:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a52      	ldr	r2, [pc, #328]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3c:	4b50      	ldr	r3, [pc, #320]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	494d      	ldr	r1, [pc, #308]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d044      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d119      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d107      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b82:	4b3f      	ldr	r3, [pc, #252]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e06f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	4b3b      	ldr	r3, [pc, #236]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e067      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba2:	4b37      	ldr	r3, [pc, #220]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4934      	ldr	r1, [pc, #208]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb4:	f7fc fae6 	bl	8001184 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbc:	f7fc fae2 	bl	8001184 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e04f      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 020c 	and.w	r2, r3, #12
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1eb      	bne.n	8004bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be4:	4b25      	ldr	r3, [pc, #148]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d20c      	bcs.n	8004c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b22      	ldr	r3, [pc, #136]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e032      	b.n	8004c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b19      	ldr	r3, [pc, #100]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4916      	ldr	r1, [pc, #88]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c36:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	490e      	ldr	r1, [pc, #56]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c4a:	f000 f821 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	490a      	ldr	r1, [pc, #40]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	5ccb      	ldrb	r3, [r1, r3]
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c66:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCC_ClockConfig+0x1c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc fa46 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023c00 	.word	0x40023c00
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0800a180 	.word	0x0800a180
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	20000004 	.word	0x20000004

08004c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b094      	sub	sp, #80	@ 0x50
 8004c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca8:	4b79      	ldr	r3, [pc, #484]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	f200 80e1 	bhi.w	8004e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x3a>
 8004cc2:	e0db      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b73      	ldr	r3, [pc, #460]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cc8:	e0db      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cca:	4b73      	ldr	r3, [pc, #460]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cce:	e0d8      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cda:	4b6d      	ldr	r3, [pc, #436]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d063      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	2200      	movs	r2, #0
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	f04f 0000 	mov.w	r0, #0
 8004d0a:	f04f 0100 	mov.w	r1, #0
 8004d0e:	0159      	lsls	r1, r3, #5
 8004d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d14:	0150      	lsls	r0, r2, #5
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	1a51      	subs	r1, r2, r1
 8004d1e:	6139      	str	r1, [r7, #16]
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb63 0301 	sbc.w	r3, r3, r1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d34:	4659      	mov	r1, fp
 8004d36:	018b      	lsls	r3, r1, #6
 8004d38:	4651      	mov	r1, sl
 8004d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3e:	4651      	mov	r1, sl
 8004d40:	018a      	lsls	r2, r1, #6
 8004d42:	4651      	mov	r1, sl
 8004d44:	ebb2 0801 	subs.w	r8, r2, r1
 8004d48:	4659      	mov	r1, fp
 8004d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d62:	4690      	mov	r8, r2
 8004d64:	4699      	mov	r9, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	eb18 0303 	adds.w	r3, r8, r3
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	462b      	mov	r3, r5
 8004d70:	eb49 0303 	adc.w	r3, r9, r3
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d82:	4629      	mov	r1, r5
 8004d84:	024b      	lsls	r3, r1, #9
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	024a      	lsls	r2, r1, #9
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d96:	2200      	movs	r2, #0
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004da0:	f7fb fa66 	bl	8000270 <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4613      	mov	r3, r2
 8004daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dac:	e058      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dae:	4b38      	ldr	r3, [pc, #224]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	2200      	movs	r2, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	4611      	mov	r1, r2
 8004dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	f04f 0000 	mov.w	r0, #0
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	0159      	lsls	r1, r3, #5
 8004dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dda:	0150      	lsls	r0, r2, #5
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4641      	mov	r1, r8
 8004de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004de6:	4649      	mov	r1, r9
 8004de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e00:	ebb2 040a 	subs.w	r4, r2, sl
 8004e04:	eb63 050b 	sbc.w	r5, r3, fp
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	00eb      	lsls	r3, r5, #3
 8004e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e16:	00e2      	lsls	r2, r4, #3
 8004e18:	4614      	mov	r4, r2
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	4643      	mov	r3, r8
 8004e1e:	18e3      	adds	r3, r4, r3
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	464b      	mov	r3, r9
 8004e24:	eb45 0303 	adc.w	r3, r5, r3
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e36:	4629      	mov	r1, r5
 8004e38:	028b      	lsls	r3, r1, #10
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e40:	4621      	mov	r1, r4
 8004e42:	028a      	lsls	r2, r1, #10
 8004e44:	4610      	mov	r0, r2
 8004e46:	4619      	mov	r1, r3
 8004e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	61fa      	str	r2, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	f7fb fa0c 	bl	8000270 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e7a:	e002      	b.n	8004e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3750      	adds	r7, #80	@ 0x50
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	00f42400 	.word	0x00f42400
 8004e98:	007a1200 	.word	0x007a1200

08004e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea0:	4b03      	ldr	r3, [pc, #12]	@ (8004eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000000 	.word	0x20000000

08004eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004eb8:	f7ff fff0 	bl	8004e9c <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0a9b      	lsrs	r3, r3, #10
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800a190 	.word	0x0800a190

08004edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ee0:	f7ff ffdc 	bl	8004e9c <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0b5b      	lsrs	r3, r3, #13
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	@ (8004f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0800a190 	.word	0x0800a190

08004f04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d035      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f2c:	4b62      	ldr	r3, [pc, #392]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f32:	f7fc f927 	bl	8001184 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f3a:	f7fc f923 	bl	8001184 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e0b0      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	019a      	lsls	r2, r3, #6
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	071b      	lsls	r3, r3, #28
 8004f64:	4955      	ldr	r1, [pc, #340]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f6c:	4b52      	ldr	r3, [pc, #328]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fc f907 	bl	8001184 <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f7a:	f7fc f903 	bl	8001184 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e090      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8083 	beq.w	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	4b44      	ldr	r3, [pc, #272]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	4a43      	ldr	r2, [pc, #268]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fb6:	4b41      	ldr	r3, [pc, #260]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fcc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fce:	f7fc f8d9 	bl	8001184 <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd6:	f7fc f8d5 	bl	8001184 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e062      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004fe8:	4b35      	ldr	r3, [pc, #212]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff4:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02f      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	429a      	cmp	r2, r3
 8005010:	d028      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005012:	4b2a      	ldr	r3, [pc, #168]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800501c:	4b29      	ldr	r3, [pc, #164]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800501e:	2201      	movs	r2, #1
 8005020:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005022:	4b28      	ldr	r3, [pc, #160]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005028:	4a24      	ldr	r2, [pc, #144]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800502e:	4b23      	ldr	r3, [pc, #140]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d114      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800503a:	f7fc f8a3 	bl	8001184 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	e00a      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fc f89f 	bl	8001184 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e02a      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	4b18      	ldr	r3, [pc, #96]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0ee      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005070:	d10d      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005072:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005086:	490d      	ldr	r1, [pc, #52]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]
 800508c:	e005      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800508e:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4a0a      	ldr	r2, [pc, #40]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005094:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005098:	6093      	str	r3, [r2, #8]
 800509a:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a6:	4905      	ldr	r1, [pc, #20]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	42470068 	.word	0x42470068
 80050bc:	40023800 	.word	0x40023800
 80050c0:	40007000 	.word	0x40007000
 80050c4:	42470e40 	.word	0x42470e40

080050c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d13f      	bne.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050e6:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ee:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050fc:	d12f      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050fe:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005100:	617b      	str	r3, [r7, #20]
          break;
 8005102:	e02f      	b.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005104:	4b1c      	ldr	r3, [pc, #112]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005110:	d108      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005112:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800511a:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e007      	b.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800512c:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005134:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513a:	099b      	lsrs	r3, r3, #6
 800513c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005148:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800514e:	0f1b      	lsrs	r3, r3, #28
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	617b      	str	r3, [r7, #20]
          break;
 800515c:	e002      	b.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
          break;
 8005162:	bf00      	nop
        }
      }
      break;
 8005164:	e000      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005166:	bf00      	nop
    }
  }
  return frequency;
 8005168:	697b      	ldr	r3, [r7, #20]
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
 800517c:	00bb8000 	.word	0x00bb8000
 8005180:	007a1200 	.word	0x007a1200
 8005184:	00f42400 	.word	0x00f42400

08005188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e07b      	b.n	8005292 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051aa:	d009      	beq.n	80051c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	61da      	str	r2, [r3, #28]
 80051b2:	e005      	b.n	80051c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fb fda2 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005244:	ea42 0103 	orr.w	r1, r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	f003 0104 	and.w	r1, r3, #4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	f003 0210 	and.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005280:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e042      	b.n	8005332 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fb fd77 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2224      	movs	r2, #36	@ 0x24
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f82c 	bl	800533c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005302:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005312:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800533c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005340:	b0c0      	sub	sp, #256	@ 0x100
 8005342:	af00      	add	r7, sp, #0
 8005344:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	68d9      	ldr	r1, [r3, #12]
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	ea40 0301 	orr.w	r3, r0, r1
 8005364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	431a      	orrs	r2, r3
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	431a      	orrs	r2, r3
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005394:	f021 010c 	bic.w	r1, r1, #12
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053a2:	430b      	orrs	r3, r1
 80053a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b6:	6999      	ldr	r1, [r3, #24]
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	ea40 0301 	orr.w	r3, r0, r1
 80053c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005608 <UART_SetConfig+0x2cc>)
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d005      	beq.n	80053dc <UART_SetConfig+0xa0>
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b8d      	ldr	r3, [pc, #564]	@ (800560c <UART_SetConfig+0x2d0>)
 80053d8:	429a      	cmp	r2, r3
 80053da:	d104      	bne.n	80053e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053dc:	f7ff fd7e 	bl	8004edc <HAL_RCC_GetPCLK2Freq>
 80053e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053e4:	e003      	b.n	80053ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053e6:	f7ff fd65 	bl	8004eb4 <HAL_RCC_GetPCLK1Freq>
 80053ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f8:	f040 810c 	bne.w	8005614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005406:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800540a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	1891      	adds	r1, r2, r2
 8005414:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005416:	415b      	adcs	r3, r3
 8005418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800541a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800541e:	4621      	mov	r1, r4
 8005420:	eb12 0801 	adds.w	r8, r2, r1
 8005424:	4629      	mov	r1, r5
 8005426:	eb43 0901 	adc.w	r9, r3, r1
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800543a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800543e:	4690      	mov	r8, r2
 8005440:	4699      	mov	r9, r3
 8005442:	4623      	mov	r3, r4
 8005444:	eb18 0303 	adds.w	r3, r8, r3
 8005448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800544c:	462b      	mov	r3, r5
 800544e:	eb49 0303 	adc.w	r3, r9, r3
 8005452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005462:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800546a:	460b      	mov	r3, r1
 800546c:	18db      	adds	r3, r3, r3
 800546e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005470:	4613      	mov	r3, r2
 8005472:	eb42 0303 	adc.w	r3, r2, r3
 8005476:	657b      	str	r3, [r7, #84]	@ 0x54
 8005478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800547c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005480:	f7fa fef6 	bl	8000270 <__aeabi_uldivmod>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4b61      	ldr	r3, [pc, #388]	@ (8005610 <UART_SetConfig+0x2d4>)
 800548a:	fba3 2302 	umull	r2, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	011c      	lsls	r4, r3, #4
 8005492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800549c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	1891      	adds	r1, r2, r2
 80054aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054ac:	415b      	adcs	r3, r3
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054b4:	4641      	mov	r1, r8
 80054b6:	eb12 0a01 	adds.w	sl, r2, r1
 80054ba:	4649      	mov	r1, r9
 80054bc:	eb43 0b01 	adc.w	fp, r3, r1
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d4:	4692      	mov	sl, r2
 80054d6:	469b      	mov	fp, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	eb1a 0303 	adds.w	r3, sl, r3
 80054de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054e2:	464b      	mov	r3, r9
 80054e4:	eb4b 0303 	adc.w	r3, fp, r3
 80054e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005500:	460b      	mov	r3, r1
 8005502:	18db      	adds	r3, r3, r3
 8005504:	643b      	str	r3, [r7, #64]	@ 0x40
 8005506:	4613      	mov	r3, r2
 8005508:	eb42 0303 	adc.w	r3, r2, r3
 800550c:	647b      	str	r3, [r7, #68]	@ 0x44
 800550e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005516:	f7fa feab 	bl	8000270 <__aeabi_uldivmod>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4611      	mov	r1, r2
 8005520:	4b3b      	ldr	r3, [pc, #236]	@ (8005610 <UART_SetConfig+0x2d4>)
 8005522:	fba3 2301 	umull	r2, r3, r3, r1
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2264      	movs	r2, #100	@ 0x64
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	1acb      	subs	r3, r1, r3
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005536:	4b36      	ldr	r3, [pc, #216]	@ (8005610 <UART_SetConfig+0x2d4>)
 8005538:	fba3 2302 	umull	r2, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005544:	441c      	add	r4, r3
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005550:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005560:	415b      	adcs	r3, r3
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005568:	4641      	mov	r1, r8
 800556a:	1851      	adds	r1, r2, r1
 800556c:	6339      	str	r1, [r7, #48]	@ 0x30
 800556e:	4649      	mov	r1, r9
 8005570:	414b      	adcs	r3, r1
 8005572:	637b      	str	r3, [r7, #52]	@ 0x34
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005580:	4659      	mov	r1, fp
 8005582:	00cb      	lsls	r3, r1, #3
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558a:	4651      	mov	r1, sl
 800558c:	00ca      	lsls	r2, r1, #3
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	4603      	mov	r3, r0
 8005594:	4642      	mov	r2, r8
 8005596:	189b      	adds	r3, r3, r2
 8005598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800559c:	464b      	mov	r3, r9
 800559e:	460a      	mov	r2, r1
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055bc:	460b      	mov	r3, r1
 80055be:	18db      	adds	r3, r3, r3
 80055c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c2:	4613      	mov	r3, r2
 80055c4:	eb42 0303 	adc.w	r3, r2, r3
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055d2:	f7fa fe4d 	bl	8000270 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <UART_SetConfig+0x2d4>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	@ 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	3332      	adds	r3, #50	@ 0x32
 80055ee:	4a08      	ldr	r2, [pc, #32]	@ (8005610 <UART_SetConfig+0x2d4>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 0207 	and.w	r2, r3, #7
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4422      	add	r2, r4
 8005602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005604:	e106      	b.n	8005814 <UART_SetConfig+0x4d8>
 8005606:	bf00      	nop
 8005608:	40011000 	.word	0x40011000
 800560c:	40011400 	.word	0x40011400
 8005610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800561e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	1891      	adds	r1, r2, r2
 800562c:	6239      	str	r1, [r7, #32]
 800562e:	415b      	adcs	r3, r3
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
 8005632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005636:	4641      	mov	r1, r8
 8005638:	1854      	adds	r4, r2, r1
 800563a:	4649      	mov	r1, r9
 800563c:	eb43 0501 	adc.w	r5, r3, r1
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	00eb      	lsls	r3, r5, #3
 800564a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564e:	00e2      	lsls	r2, r4, #3
 8005650:	4614      	mov	r4, r2
 8005652:	461d      	mov	r5, r3
 8005654:	4643      	mov	r3, r8
 8005656:	18e3      	adds	r3, r4, r3
 8005658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800565c:	464b      	mov	r3, r9
 800565e:	eb45 0303 	adc.w	r3, r5, r3
 8005662:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005672:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005682:	4629      	mov	r1, r5
 8005684:	008b      	lsls	r3, r1, #2
 8005686:	4621      	mov	r1, r4
 8005688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568c:	4621      	mov	r1, r4
 800568e:	008a      	lsls	r2, r1, #2
 8005690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005694:	f7fa fdec 	bl	8000270 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4b60      	ldr	r3, [pc, #384]	@ (8005820 <UART_SetConfig+0x4e4>)
 800569e:	fba3 2302 	umull	r2, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	011c      	lsls	r4, r3, #4
 80056a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	1891      	adds	r1, r2, r2
 80056be:	61b9      	str	r1, [r7, #24]
 80056c0:	415b      	adcs	r3, r3
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c8:	4641      	mov	r1, r8
 80056ca:	1851      	adds	r1, r2, r1
 80056cc:	6139      	str	r1, [r7, #16]
 80056ce:	4649      	mov	r1, r9
 80056d0:	414b      	adcs	r3, r1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e0:	4659      	mov	r1, fp
 80056e2:	00cb      	lsls	r3, r1, #3
 80056e4:	4651      	mov	r1, sl
 80056e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ea:	4651      	mov	r1, sl
 80056ec:	00ca      	lsls	r2, r1, #3
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	4642      	mov	r2, r8
 80056f6:	189b      	adds	r3, r3, r2
 80056f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056fc:	464b      	mov	r3, r9
 80056fe:	460a      	mov	r2, r1
 8005700:	eb42 0303 	adc.w	r3, r2, r3
 8005704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005712:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005720:	4649      	mov	r1, r9
 8005722:	008b      	lsls	r3, r1, #2
 8005724:	4641      	mov	r1, r8
 8005726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800572a:	4641      	mov	r1, r8
 800572c:	008a      	lsls	r2, r1, #2
 800572e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005732:	f7fa fd9d 	bl	8000270 <__aeabi_uldivmod>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4611      	mov	r1, r2
 800573c:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <UART_SetConfig+0x4e4>)
 800573e:	fba3 2301 	umull	r2, r3, r3, r1
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2264      	movs	r2, #100	@ 0x64
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	1acb      	subs	r3, r1, r3
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	3332      	adds	r3, #50	@ 0x32
 8005750:	4a33      	ldr	r2, [pc, #204]	@ (8005820 <UART_SetConfig+0x4e4>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800575c:	441c      	add	r4, r3
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	673b      	str	r3, [r7, #112]	@ 0x70
 8005766:	677a      	str	r2, [r7, #116]	@ 0x74
 8005768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	1891      	adds	r1, r2, r2
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	415b      	adcs	r3, r3
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800577c:	4641      	mov	r1, r8
 800577e:	1851      	adds	r1, r2, r1
 8005780:	6039      	str	r1, [r7, #0]
 8005782:	4649      	mov	r1, r9
 8005784:	414b      	adcs	r3, r1
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005794:	4659      	mov	r1, fp
 8005796:	00cb      	lsls	r3, r1, #3
 8005798:	4651      	mov	r1, sl
 800579a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800579e:	4651      	mov	r1, sl
 80057a0:	00ca      	lsls	r2, r1, #3
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	4603      	mov	r3, r0
 80057a8:	4642      	mov	r2, r8
 80057aa:	189b      	adds	r3, r3, r2
 80057ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ae:	464b      	mov	r3, r9
 80057b0:	460a      	mov	r2, r1
 80057b2:	eb42 0303 	adc.w	r3, r2, r3
 80057b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80057c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057d0:	4649      	mov	r1, r9
 80057d2:	008b      	lsls	r3, r1, #2
 80057d4:	4641      	mov	r1, r8
 80057d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057da:	4641      	mov	r1, r8
 80057dc:	008a      	lsls	r2, r1, #2
 80057de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057e2:	f7fa fd45 	bl	8000270 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <UART_SetConfig+0x4e4>)
 80057ec:	fba3 1302 	umull	r1, r3, r3, r2
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	2164      	movs	r1, #100	@ 0x64
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	3332      	adds	r3, #50	@ 0x32
 80057fe:	4a08      	ldr	r2, [pc, #32]	@ (8005820 <UART_SetConfig+0x4e4>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	f003 020f 	and.w	r2, r3, #15
 800580a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4422      	add	r2, r4
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800581a:	46bd      	mov	sp, r7
 800581c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005820:	51eb851f 	.word	0x51eb851f

08005824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005824:	b084      	sub	sp, #16
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	f107 001c 	add.w	r0, r7, #28
 8005832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005836:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800583a:	2b01      	cmp	r3, #1
 800583c:	d123      	bne.n	8005886 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005866:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9dc 	bl	8005c38 <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e01b      	b.n	80058be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9d0 	bl	8005c38 <USB_CoreReset>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800589c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d106      	bne.n	80058b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80058b0:	e005      	b.n	80058be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058be:	7fbb      	ldrb	r3, [r7, #30]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10b      	bne.n	80058dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f043 0206 	orr.w	r2, r3, #6
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f043 0220 	orr.w	r2, r3, #32
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e8:	b004      	add	sp, #16
 80058ea:	4770      	bx	lr

080058ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f043 0201 	orr.w	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f023 0201 	bic.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d115      	bne.n	800597e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800595e:	200a      	movs	r0, #10
 8005960:	f7fb fc1c 	bl	800119c <HAL_Delay>
      ms += 10U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	330a      	adds	r3, #10
 8005968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f956 	bl	8005c1c <USB_GetMode>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d01e      	beq.n	80059b4 <USB_SetCurrentMode+0x84>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2bc7      	cmp	r3, #199	@ 0xc7
 800597a:	d9f0      	bls.n	800595e <USB_SetCurrentMode+0x2e>
 800597c:	e01a      	b.n	80059b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d115      	bne.n	80059b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005990:	200a      	movs	r0, #10
 8005992:	f7fb fc03 	bl	800119c <HAL_Delay>
      ms += 10U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	330a      	adds	r3, #10
 800599a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f93d 	bl	8005c1c <USB_GetMode>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <USB_SetCurrentMode+0x84>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80059ac:	d9f0      	bls.n	8005990 <USB_SetCurrentMode+0x60>
 80059ae:	e001      	b.n	80059b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e005      	b.n	80059c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80059b8:	d101      	bne.n	80059be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059e2:	d901      	bls.n	80059e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e01b      	b.n	8005a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	daf2      	bge.n	80059d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	019b      	lsls	r3, r3, #6
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e006      	b.n	8005a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d0f0      	beq.n	8005a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a44:	d901      	bls.n	8005a4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e018      	b.n	8005a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	daf2      	bge.n	8005a38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a68:	d901      	bls.n	8005a6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e006      	b.n	8005a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d0f0      	beq.n	8005a5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	@ 0x24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4611      	mov	r1, r2
 8005a94:	461a      	mov	r2, r3
 8005a96:	460b      	mov	r3, r1
 8005a98:	71fb      	strb	r3, [r7, #7]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d123      	bne.n	8005af6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005aae:	88bb      	ldrh	r3, [r7, #4]
 8005ab0:	3303      	adds	r3, #3
 8005ab2:	089b      	lsrs	r3, r3, #2
 8005ab4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e018      	b.n	8005aee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	031a      	lsls	r2, r3, #12
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac8:	461a      	mov	r2, r3
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	3301      	adds	r3, #1
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d3e2      	bcc.n	8005abc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3724      	adds	r7, #36	@ 0x24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b08b      	sub	sp, #44	@ 0x2c
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	089b      	lsrs	r3, r3, #2
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	e014      	b.n	8005b5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	3301      	adds	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	3301      	adds	r3, #1
 8005b46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	3301      	adds	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	3301      	adds	r3, #1
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	6a3a      	ldr	r2, [r7, #32]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d3e6      	bcc.n	8005b30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b62:	8bfb      	ldrh	r3, [r7, #30]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01e      	beq.n	8005ba6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b72:	461a      	mov	r2, r3
 8005b74:	f107 0310 	add.w	r3, r7, #16
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	3301      	adds	r3, #1
 8005b92:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	3301      	adds	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b9a:	8bfb      	ldrh	r3, [r7, #30]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ba0:	8bfb      	ldrh	r3, [r7, #30]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1ea      	bne.n	8005b7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	372c      	adds	r7, #44	@ 0x2c
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f003 0301 	and.w	r3, r3, #1
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c50:	d901      	bls.n	8005c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e01b      	b.n	8005c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	daf2      	bge.n	8005c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f043 0201 	orr.w	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3301      	adds	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c7a:	d901      	bls.n	8005c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e006      	b.n	8005c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d0f0      	beq.n	8005c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d119      	bne.n	8005d26 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10a      	bne.n	8005d10 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d08:	f043 0304 	orr.w	r3, r3, #4
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e014      	b.n	8005d3a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d1e:	f023 0304 	bic.w	r3, r3, #4
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e009      	b.n	8005d3a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d34:	f023 0304 	bic.w	r3, r3, #4
 8005d38:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff fe43 	bl	80059c8 <USB_FlushTxFifo>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fe6d 	bl	8005a2c <USB_FlushRxFifo>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	e015      	b.n	8005d8e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d74:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d92:	461a      	mov	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d3e3      	bcc.n	8005d62 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005da6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <USB_HostInit+0x170>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10b      	bne.n	8005dc8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005db6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a15      	ldr	r2, [pc, #84]	@ (8005e10 <USB_HostInit+0x174>)
 8005dbc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a14      	ldr	r2, [pc, #80]	@ (8005e14 <USB_HostInit+0x178>)
 8005dc2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005dc6:	e009      	b.n	8005ddc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2280      	movs	r2, #128	@ 0x80
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a11      	ldr	r2, [pc, #68]	@ (8005e18 <USB_HostInit+0x17c>)
 8005dd2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a11      	ldr	r2, [pc, #68]	@ (8005e1c <USB_HostInit+0x180>)
 8005dd8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f043 0210 	orr.w	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <USB_HostInit+0x184>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e08:	b004      	add	sp, #16
 8005e0a:	4770      	bx	lr
 8005e0c:	40040000 	.word	0x40040000
 8005e10:	01000200 	.word	0x01000200
 8005e14:	00e00300 	.word	0x00e00300
 8005e18:	00600080 	.word	0x00600080
 8005e1c:	004000e0 	.word	0x004000e0
 8005e20:	a3200008 	.word	0xa3200008

08005e24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d107      	bne.n	8005e76 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e72:	6053      	str	r3, [r2, #4]
 8005e74:	e00c      	b.n	8005e90 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d107      	bne.n	8005e8c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e82:	461a      	mov	r2, r3
 8005e84:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005e88:	6053      	str	r3, [r2, #4]
 8005e8a:	e001      	b.n	8005e90 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ebe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ecc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ece:	2064      	movs	r0, #100	@ 0x64
 8005ed0:	f7fb f964 	bl	800119c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ee2:	200a      	movs	r0, #10
 8005ee4:	f7fb f95a 	bl	800119c <HAL_Delay>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f16:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <USB_DriveVbus+0x44>
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f34:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f40:	d109      	bne.n	8005f56 <USB_DriveVbus+0x64>
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f54:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	0c5b      	lsrs	r3, r3, #17
 8005f82:	f003 0303 	and.w	r3, r3, #3
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	b29b      	uxth	r3, r3
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	70fb      	strb	r3, [r7, #3]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70bb      	strb	r3, [r7, #2]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fe8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d87c      	bhi.n	80060ec <USB_HC_Init+0x138>
 8005ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <USB_HC_Init+0x44>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	080060af 	.word	0x080060af
 8006000:	08006009 	.word	0x08006009
 8006004:	08006071 	.word	0x08006071
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006014:	461a      	mov	r2, r3
 8006016:	f240 439d 	movw	r3, #1181	@ 0x49d
 800601a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800601c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006020:	2b00      	cmp	r3, #0
 8006022:	da10      	bge.n	8006046 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4413      	add	r3, r2
 800602c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	440a      	add	r2, r1
 800603a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800603e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006042:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006044:	e055      	b.n	80060f2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a6f      	ldr	r2, [pc, #444]	@ (8006208 <USB_HC_Init+0x254>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d151      	bne.n	80060f2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	440a      	add	r2, r1
 8006064:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006068:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800606c:	60d3      	str	r3, [r2, #12]
      break;
 800606e:	e040      	b.n	80060f2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607c:	461a      	mov	r2, r3
 800607e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006082:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006084:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da34      	bge.n	80060f6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060ac:	e023      	b.n	80060f6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ba:	461a      	mov	r2, r3
 80060bc:	f240 2325 	movw	r3, #549	@ 0x225
 80060c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da17      	bge.n	80060fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80060e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060ea:	e006      	b.n	80060fa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	77fb      	strb	r3, [r7, #31]
      break;
 80060f0:	e004      	b.n	80060fc <USB_HC_Init+0x148>
      break;
 80060f2:	bf00      	nop
 80060f4:	e002      	b.n	80060fc <USB_HC_Init+0x148>
      break;
 80060f6:	bf00      	nop
 80060f8:	e000      	b.n	80060fc <USB_HC_Init+0x148>
      break;
 80060fa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006108:	461a      	mov	r2, r3
 800610a:	2300      	movs	r3, #0
 800610c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	2101      	movs	r1, #1
 800613e:	fa01 f303 	lsl.w	r3, r1, r3
 8006142:	6939      	ldr	r1, [r7, #16]
 8006144:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006148:	4313      	orrs	r3, r2
 800614a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006158:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	da03      	bge.n	8006168 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006160:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e001      	b.n	800616c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fef9 	bl	8005f64 <USB_GetHostSpeed>
 8006172:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006174:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006178:	2b02      	cmp	r3, #2
 800617a:	d106      	bne.n	800618a <USB_HC_Init+0x1d6>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d003      	beq.n	800618a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e001      	b.n	800618e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618e:	787b      	ldrb	r3, [r7, #1]
 8006190:	059b      	lsls	r3, r3, #22
 8006192:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006196:	78bb      	ldrb	r3, [r7, #2]
 8006198:	02db      	lsls	r3, r3, #11
 800619a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800619e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061a4:	049b      	lsls	r3, r3, #18
 80061a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80061ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80061ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061b2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80061c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061cc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d003      	beq.n	80061de <USB_HC_Init+0x22a>
 80061d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d10f      	bne.n	80061fe <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40040000 	.word	0x40040000

0800620c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	@ 0x30
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006228:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a5d      	ldr	r2, [pc, #372]	@ (80063a4 <USB_HC_StartXfer+0x198>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d12f      	bne.n	8006292 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d11c      	bne.n	8006272 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	7c9b      	ldrb	r3, [r3, #18]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <USB_HC_StartXfer+0x3c>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	7c9b      	ldrb	r3, [r3, #18]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d124      	bne.n	8006292 <USB_HC_StartXfer+0x86>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	799b      	ldrb	r3, [r3, #6]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d120      	bne.n	8006292 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	440a      	add	r2, r1
 8006266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800626a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626e:	60d3      	str	r3, [r2, #12]
 8006270:	e00f      	b.n	8006292 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	791b      	ldrb	r3, [r3, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <USB_HC_StartXfer+0x86>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	795b      	ldrb	r3, [r3, #5]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d107      	bne.n	8006292 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fb6b 	bl	8006964 <USB_DoPing>
        return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e232      	b.n	80066f8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	799b      	ldrb	r3, [r3, #6]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d158      	bne.n	800634c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800629a:	2301      	movs	r3, #1
 800629c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	78db      	ldrb	r3, [r3, #3]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	8a92      	ldrh	r2, [r2, #20]
 80062ac:	fb03 f202 	mul.w	r2, r3, r2
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	61da      	str	r2, [r3, #28]
 80062b4:	e07c      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	7c9b      	ldrb	r3, [r3, #18]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d130      	bne.n	8006320 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	2bbc      	cmp	r3, #188	@ 0xbc
 80062c4:	d918      	bls.n	80062f8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	8a9b      	ldrh	r3, [r3, #20]
 80062ca:	461a      	mov	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d003      	beq.n	80062e8 <USB_HC_StartXfer+0xdc>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d103      	bne.n	80062f0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2202      	movs	r2, #2
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	e05f      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2201      	movs	r2, #1
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	e05b      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d007      	beq.n	8006318 <USB_HC_StartXfer+0x10c>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d003      	beq.n	8006318 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2204      	movs	r2, #4
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	e04b      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2203      	movs	r2, #3
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	e047      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10d      	bne.n	8006342 <USB_HC_StartXfer+0x136>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	8a92      	ldrh	r2, [r2, #20]
 800632e:	4293      	cmp	r3, r2
 8006330:	d907      	bls.n	8006342 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006332:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	8a92      	ldrh	r2, [r2, #20]
 8006338:	fb03 f202 	mul.w	r2, r3, r2
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	61da      	str	r2, [r3, #28]
 8006340:	e036      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6a1a      	ldr	r2, [r3, #32]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	61da      	str	r2, [r3, #28]
 800634a:	e031      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d018      	beq.n	8006386 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	8a92      	ldrh	r2, [r2, #20]
 800635c:	4413      	add	r3, r2
 800635e:	3b01      	subs	r3, #1
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	8a92      	ldrh	r2, [r2, #20]
 8006364:	fbb3 f3f2 	udiv	r3, r3, r2
 8006368:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800636a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800636c:	8b7b      	ldrh	r3, [r7, #26]
 800636e:	429a      	cmp	r2, r3
 8006370:	d90b      	bls.n	800638a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	8a92      	ldrh	r2, [r2, #20]
 800637c:	fb03 f202 	mul.w	r2, r3, r2
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	61da      	str	r2, [r3, #28]
 8006384:	e001      	b.n	800638a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006386:	2301      	movs	r3, #1
 8006388:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	8a92      	ldrh	r2, [r2, #20]
 8006398:	fb03 f202 	mul.w	r2, r3, r2
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61da      	str	r2, [r3, #28]
 80063a0:	e006      	b.n	80063b0 <USB_HC_StartXfer+0x1a4>
 80063a2:	bf00      	nop
 80063a4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063ba:	04d9      	lsls	r1, r3, #19
 80063bc:	4ba3      	ldr	r3, [pc, #652]	@ (800664c <USB_HC_StartXfer+0x440>)
 80063be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	7d9b      	ldrb	r3, [r3, #22]
 80063c6:	075b      	lsls	r3, r3, #29
 80063c8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063cc:	69f9      	ldr	r1, [r7, #28]
 80063ce:	0148      	lsls	r0, r1, #5
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	4401      	add	r1, r0
 80063d4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6999      	ldr	r1, [r3, #24]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f2:	460a      	mov	r2, r1
 80063f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006428:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800642c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	7e7b      	ldrb	r3, [r7, #25]
 800643e:	075b      	lsls	r3, r3, #29
 8006440:	69f9      	ldr	r1, [r7, #28]
 8006442:	0148      	lsls	r0, r1, #5
 8006444:	6a39      	ldr	r1, [r7, #32]
 8006446:	4401      	add	r1, r0
 8006448:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	799b      	ldrb	r3, [r3, #6]
 8006454:	2b01      	cmp	r3, #1
 8006456:	f040 80c3 	bne.w	80065e0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	7c5b      	ldrb	r3, [r3, #17]
 800645e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006464:	4313      	orrs	r3, r2
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	440a      	add	r2, r1
 800646e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006472:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006476:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	440a      	add	r2, r1
 800648e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006492:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	79db      	ldrb	r3, [r3, #7]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d123      	bne.n	80064e8 <USB_HC_StartXfer+0x2dc>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11f      	bne.n	80064e8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064c6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	7c9b      	ldrb	r3, [r3, #18]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d003      	beq.n	80064f8 <USB_HC_StartXfer+0x2ec>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	7c9b      	ldrb	r3, [r3, #18]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d117      	bne.n	8006528 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d113      	bne.n	8006528 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	78db      	ldrb	r3, [r3, #3]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10f      	bne.n	8006528 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	6a3a      	ldr	r2, [r7, #32]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006526:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	7c9b      	ldrb	r3, [r3, #18]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d162      	bne.n	80065f6 <USB_HC_StartXfer+0x3ea>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	78db      	ldrb	r3, [r3, #3]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d15e      	bne.n	80065f6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	3b01      	subs	r3, #1
 800653e:	2b03      	cmp	r3, #3
 8006540:	d858      	bhi.n	80065f4 <USB_HC_StartXfer+0x3e8>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <USB_HC_StartXfer+0x33c>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006559 	.word	0x08006559
 800654c:	0800657b 	.word	0x0800657b
 8006550:	0800659d 	.word	0x0800659d
 8006554:	080065bf 	.word	0x080065bf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006576:	6053      	str	r3, [r2, #4]
          break;
 8006578:	e03d      	b.n	80065f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	4413      	add	r3, r2
 8006582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	440a      	add	r2, r1
 8006590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006594:	f043 030e 	orr.w	r3, r3, #14
 8006598:	6053      	str	r3, [r2, #4]
          break;
 800659a:	e02c      	b.n	80065f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065ba:	6053      	str	r3, [r2, #4]
          break;
 80065bc:	e01b      	b.n	80065f6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	6a3a      	ldr	r2, [r7, #32]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065dc:	6053      	str	r3, [r2, #4]
          break;
 80065de:	e00a      	b.n	80065f6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ec:	461a      	mov	r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	6053      	str	r3, [r2, #4]
 80065f2:	e000      	b.n	80065f6 <USB_HC_StartXfer+0x3ea>
          break;
 80065f4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800660c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	78db      	ldrb	r3, [r3, #3]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	e003      	b.n	8006628 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006626:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800662e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800663c:	461a      	mov	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	e055      	b.n	80066f8 <USB_HC_StartXfer+0x4ec>
 800664c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	78db      	ldrb	r3, [r3, #3]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d14e      	bne.n	80066f6 <USB_HC_StartXfer+0x4ea>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d04a      	beq.n	80066f6 <USB_HC_StartXfer+0x4ea>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	79db      	ldrb	r3, [r3, #7]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d146      	bne.n	80066f6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	7c9b      	ldrb	r3, [r3, #18]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d831      	bhi.n	80066d4 <USB_HC_StartXfer+0x4c8>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <USB_HC_StartXfer+0x46c>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006689 	.word	0x08006689
 800667c:	080066ad 	.word	0x080066ad
 8006680:	08006689 	.word	0x08006689
 8006684:	080066ad 	.word	0x080066ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	3303      	adds	r3, #3
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006692:	8afa      	ldrh	r2, [r7, #22]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	b29b      	uxth	r3, r3
 800669a:	429a      	cmp	r2, r3
 800669c:	d91c      	bls.n	80066d8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80066aa:	e015      	b.n	80066d8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	3303      	adds	r3, #3
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066b6:	8afa      	ldrh	r2, [r7, #22]
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d90a      	bls.n	80066dc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80066d2:	e003      	b.n	80066dc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <USB_HC_StartXfer+0x4d2>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <USB_HC_StartXfer+0x4d2>
        break;
 80066dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	6999      	ldr	r1, [r3, #24]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	785a      	ldrb	r2, [r3, #1]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2000      	movs	r0, #0
 80066ee:	9000      	str	r0, [sp, #0]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff f9c9 	bl	8005a88 <USB_WritePacket>
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3728      	adds	r7, #40	@ 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	b29b      	uxth	r3, r3
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006722:	b480      	push	{r7}
 8006724:	b089      	sub	sp, #36	@ 0x24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	0c9b      	lsrs	r3, r3, #18
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	0fdb      	lsrs	r3, r3, #31
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	0fdb      	lsrs	r3, r3, #31
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b20      	cmp	r3, #32
 8006786:	d10d      	bne.n	80067a4 <USB_HC_Halt+0x82>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <USB_HC_Halt+0x82>
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d002      	beq.n	80067a0 <USB_HC_Halt+0x7e>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b03      	cmp	r3, #3
 800679e:	d101      	bne.n	80067a4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e0d8      	b.n	8006956 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <USB_HC_Halt+0x8e>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d173      	bne.n	8006898 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d14a      	bne.n	8006872 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d133      	bne.n	8006850 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	440a      	add	r2, r1
 800681e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006822:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006826:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3301      	adds	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006834:	d82e      	bhi.n	8006894 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800684c:	d0ec      	beq.n	8006828 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800684e:	e081      	b.n	8006954 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800686a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800686e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006870:	e070      	b.n	8006954 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800688c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006890:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006892:	e05f      	b.n	8006954 <USB_HC_Halt+0x232>
            break;
 8006894:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006896:	e05d      	b.n	8006954 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d133      	bne.n	8006930 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006906:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	3301      	adds	r3, #1
 800690c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006914:	d81d      	bhi.n	8006952 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800692c:	d0ec      	beq.n	8006908 <USB_HC_Halt+0x1e6>
 800692e:	e011      	b.n	8006954 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e000      	b.n	8006954 <USB_HC_Halt+0x232>
          break;
 8006952:	bf00      	nop
    }
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3724      	adds	r7, #36	@ 0x24
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006978:	2301      	movs	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	04da      	lsls	r2, r3, #19
 8006980:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <USB_DoPing+0x74>)
 8006982:	4013      	ands	r3, r2
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006990:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006994:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c2:	461a      	mov	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	1ff80000 	.word	0x1ff80000

080069dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fe ff8c 	bl	800590e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069f6:	2110      	movs	r1, #16
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fe ffe5 	bl	80059c8 <USB_FlushTxFifo>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f80f 	bl	8005a2c <USB_FlushRxFifo>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e01f      	b.n	8006a5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a52:	461a      	mov	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d9dc      	bls.n	8006a1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e034      	b.n	8006ad4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ab0:	d80c      	bhi.n	8006acc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ac8:	d0ec      	beq.n	8006aa4 <USB_StopHost+0xc8>
 8006aca:	e000      	b.n	8006ace <USB_StopHost+0xf2>
        break;
 8006acc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d9c7      	bls.n	8006a6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ae6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006aee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fe fefb 	bl	80058ec <USB_EnableGlobalInt>

  return ret;
 8006af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b089      	sub	sp, #36	@ 0x24
 8006b04:	af04      	add	r7, sp, #16
 8006b06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b08:	2301      	movs	r3, #1
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fc85 	bl	800741e <USBH_FindInterface>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2bff      	cmp	r3, #255	@ 0xff
 8006b1c:	d002      	beq.n	8006b24 <USBH_CDC_InterfaceInit+0x24>
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d901      	bls.n	8006b28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e13d      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc5a 	bl	80073e6 <USBH_SelectInterface>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e131      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006b46:	2050      	movs	r0, #80	@ 0x50
 8006b48:	f002 fb64 	bl	8009214 <malloc>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e11f      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b64:	2250      	movs	r2, #80	@ 0x50
 8006b66:	2100      	movs	r1, #0
 8006b68:	68b8      	ldr	r0, [r7, #8]
 8006b6a:	f002 fd43 	bl	80095f4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	211a      	movs	r1, #26
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da15      	bge.n	8006bb2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	211a      	movs	r1, #26
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	211a      	movs	r1, #26
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 ffbe 	bl	8008b3a <USBH_AllocPipe>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7819      	ldrb	r1, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	7858      	ldrb	r0, [r3, #1]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	8952      	ldrh	r2, [r2, #10]
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	2203      	movs	r2, #3
 8006be2:	9201      	str	r2, [sp, #4]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4623      	mov	r3, r4
 8006be8:	4602      	mov	r2, r0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 ff76 	bl	8008adc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 fa85 	bl	8009108 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	210a      	movs	r1, #10
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc0a 	bl	800741e <USBH_FindInterface>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2bff      	cmp	r3, #255	@ 0xff
 8006c12:	d002      	beq.n	8006c1a <USBH_CDC_InterfaceInit+0x11a>
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d901      	bls.n	8006c1e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e0c2      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	211a      	movs	r1, #26
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da16      	bge.n	8006c64 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	211a      	movs	r1, #26
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	211a      	movs	r1, #26
 8006c52:	fb01 f303 	mul.w	r3, r1, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	835a      	strh	r2, [r3, #26]
 8006c62:	e015      	b.n	8006c90 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	211a      	movs	r1, #26
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	211a      	movs	r1, #26
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c8a:	881a      	ldrh	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	211a      	movs	r1, #26
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b25b      	sxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	da16      	bge.n	8006cd6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	211a      	movs	r1, #26
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	211a      	movs	r1, #26
 8006cc4:	fb01 f303 	mul.w	r3, r1, r3
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006cce:	881a      	ldrh	r2, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	835a      	strh	r2, [r3, #26]
 8006cd4:	e015      	b.n	8006d02 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	211a      	movs	r1, #26
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	211a      	movs	r1, #26
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	7b9b      	ldrb	r3, [r3, #14]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 ff16 	bl	8008b3a <USBH_AllocPipe>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	7bdb      	ldrb	r3, [r3, #15]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 ff0c 	bl	8008b3a <USBH_AllocPipe>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	7b59      	ldrb	r1, [r3, #13]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	7b98      	ldrb	r0, [r3, #14]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	8b12      	ldrh	r2, [r2, #24]
 8006d42:	9202      	str	r2, [sp, #8]
 8006d44:	2202      	movs	r2, #2
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fec4 	bl	8008adc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	7b19      	ldrb	r1, [r3, #12]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	7bd8      	ldrb	r0, [r3, #15]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	8b52      	ldrh	r2, [r2, #26]
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	9201      	str	r2, [sp, #4]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4623      	mov	r3, r4
 8006d76:	4602      	mov	r2, r0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 feaf 	bl	8008adc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	7b5b      	ldrb	r3, [r3, #13]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f002 f9ba 	bl	8009108 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	7b1b      	ldrb	r3, [r3, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f002 f9b3 	bl	8009108 <USBH_LL_SetToggle>

  return USBH_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd90      	pop	{r4, r7, pc}

08006dac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fea4 	bl	8008b1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fecf 	bl	8008b7c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	7b1b      	ldrb	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00e      	beq.n	8006e0a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	7b1b      	ldrb	r3, [r3, #12]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fe91 	bl	8008b1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	7b1b      	ldrb	r3, [r3, #12]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 febc 	bl	8008b7c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	7b5b      	ldrb	r3, [r3, #13]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	7b5b      	ldrb	r3, [r3, #13]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fe7e 	bl	8008b1a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	7b5b      	ldrb	r3, [r3, #13]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fea9 	bl	8008b7c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f002 f9ed 	bl	8009224 <free>
    phost->pActiveClass->pData = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e50:	2200      	movs	r2, #0
 8006e52:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3340      	adds	r3, #64	@ 0x40
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f8b1 	bl	8006fde <GetLineCoding>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d105      	bne.n	8006e92 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e92:	7afb      	ldrb	r3, [r7, #11]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d877      	bhi.n	8006fb0 <USBH_CDC_Process+0x114>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <USBH_CDC_Process+0x2c>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006edd 	.word	0x08006edd
 8006ecc:	08006ee3 	.word	0x08006ee3
 8006ed0:	08006f13 	.word	0x08006f13
 8006ed4:	08006f87 	.word	0x08006f87
 8006ed8:	08006f95 	.word	0x08006f95
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	e06d      	b.n	8006fbe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f897 	bl	800701c <SetLineCoding>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f00:	e058      	b.n	8006fb4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d055      	beq.n	8006fb4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006f10:	e050      	b.n	8006fb4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	3340      	adds	r3, #64	@ 0x40
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f860 	bl	8006fde <GetLineCoding>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d126      	bne.n	8006f76 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f3a:	791b      	ldrb	r3, [r3, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d13b      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f4a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d133      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d12b      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f68:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d124      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f958 	bl	8007224 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f74:	e020      	b.n	8006fb8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d01d      	beq.n	8006fb8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006f84:	e018      	b.n	8006fb8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f867 	bl	800705a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8da 	bl	8007146 <CDC_ProcessReception>
      break;
 8006f92:	e014      	b.n	8006fbe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f94:	2100      	movs	r1, #0
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f81a 	bl	8007fd0 <USBH_ClrFeature>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006fae:	e005      	b.n	8006fbc <USBH_CDC_Process+0x120>

    default:
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e004      	b.n	8006fbe <USBH_CDC_Process+0x122>
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e002      	b.n	8006fbe <USBH_CDC_Process+0x122>
      break;
 8006fb8:	bf00      	nop
 8006fba:	e000      	b.n	8006fbe <USBH_CDC_Process+0x122>
      break;
 8006fbc:	bf00      	nop

  }

  return status;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	22a1      	movs	r2, #161	@ 0xa1
 8006fec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2221      	movs	r2, #33	@ 0x21
 8006ff2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2207      	movs	r2, #7
 8007004:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2207      	movs	r2, #7
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fb14 	bl	800863a <USBH_CtlReq>
 8007012:	4603      	mov	r3, r0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2221      	movs	r2, #33	@ 0x21
 800702a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2207      	movs	r2, #7
 8007042:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2207      	movs	r2, #7
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 faf5 	bl	800863a <USBH_CtlReq>
 8007050:	4603      	mov	r3, r0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af02      	add	r7, sp, #8
 8007060:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800706c:	2300      	movs	r3, #0
 800706e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007076:	2b01      	cmp	r3, #1
 8007078:	d002      	beq.n	8007080 <CDC_ProcessTransmission+0x26>
 800707a:	2b02      	cmp	r3, #2
 800707c:	d023      	beq.n	80070c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800707e:	e05e      	b.n	800713e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	8b12      	ldrh	r2, [r2, #24]
 8007088:	4293      	cmp	r3, r2
 800708a:	d90b      	bls.n	80070a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8b1a      	ldrh	r2, [r3, #24]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	7b5b      	ldrb	r3, [r3, #13]
 8007098:	2001      	movs	r0, #1
 800709a:	9000      	str	r0, [sp, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fcda 	bl	8008a56 <USBH_BulkSendData>
 80070a2:	e00b      	b.n	80070bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	7b5b      	ldrb	r3, [r3, #13]
 80070b2:	2001      	movs	r0, #1
 80070b4:	9000      	str	r0, [sp, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fccd 	bl	8008a56 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80070c4:	e03b      	b.n	800713e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	7b5b      	ldrb	r3, [r3, #13]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fff1 	bl	80090b4 <USBH_LL_GetURBState>
 80070d2:	4603      	mov	r3, r0
 80070d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d128      	bne.n	800712e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	8b12      	ldrh	r2, [r2, #24]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d90e      	bls.n	8007106 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	8b12      	ldrh	r2, [r2, #24]
 80070f0:	1a9a      	subs	r2, r3, r2
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	8b12      	ldrh	r2, [r2, #24]
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	61da      	str	r2, [r3, #28]
 8007104:	e002      	b.n	800710c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800711c:	e00e      	b.n	800713c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f868 	bl	80071fc <USBH_CDC_TransmitCallback>
      break;
 800712c:	e006      	b.n	800713c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d103      	bne.n	800713c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800713c:	bf00      	nop
  }
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007158:	2300      	movs	r3, #0
 800715a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007162:	2b03      	cmp	r3, #3
 8007164:	d002      	beq.n	800716c <CDC_ProcessReception+0x26>
 8007166:	2b04      	cmp	r3, #4
 8007168:	d00e      	beq.n	8007188 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800716a:	e043      	b.n	80071f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6a19      	ldr	r1, [r3, #32]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	8b5a      	ldrh	r2, [r3, #26]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	7b1b      	ldrb	r3, [r3, #12]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fc91 	bl	8008aa0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2204      	movs	r2, #4
 8007182:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007186:	e035      	b.n	80071f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	7b1b      	ldrb	r3, [r3, #12]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 ff90 	bl	80090b4 <USBH_LL_GetURBState>
 8007194:	4603      	mov	r3, r0
 8007196:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007198:	7cfb      	ldrb	r3, [r7, #19]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d129      	bne.n	80071f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	7b1b      	ldrb	r3, [r3, #12]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fef3 	bl	8008f90 <USBH_LL_GetLastXferSize>
 80071aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d016      	beq.n	80071e4 <CDC_ProcessReception+0x9e>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	8b5b      	ldrh	r3, [r3, #26]
 80071ba:	461a      	mov	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4293      	cmp	r3, r2
 80071c0:	d110      	bne.n	80071e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad2      	subs	r2, r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	441a      	add	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2203      	movs	r2, #3
 80071de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80071e2:	e006      	b.n	80071f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f80f 	bl	8007210 <USBH_CDC_ReceiveCallback>
      break;
 80071f2:	bf00      	nop
  }
}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800724c:	2302      	movs	r3, #2
 800724e:	e029      	b.n	80072a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	79fa      	ldrb	r2, [r7, #7]
 8007254:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f81f 	bl	80072ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f001 fdc3 	bl	8008e28 <USBH_LL_Init>

  return USBH_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e009      	b.n	80072d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	33e0      	adds	r3, #224	@ 0xe0
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d9f2      	bls.n	80072be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e009      	b.n	80072f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f8:	d3f1      	bcc.n	80072de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2240      	movs	r2, #64	@ 0x40
 800731e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	331c      	adds	r3, #28
 800734a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f002 f94f 	bl	80095f4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800735c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f002 f946 	bl	80095f4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800736e:	2212      	movs	r2, #18
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f002 f93e 	bl	80095f4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800737e:	223e      	movs	r2, #62	@ 0x3e
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f002 f936 	bl	80095f4 <memset>

  return USBH_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10e      	bne.n	80073ce <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	33de      	adds	r3, #222	@ 0xde
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	e004      	b.n	80073d8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073ce:	2302      	movs	r3, #2
 80073d0:	73fb      	strb	r3, [r7, #15]
 80073d2:	e001      	b.n	80073d8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073d4:	2302      	movs	r3, #2
 80073d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80073fc:	78fa      	ldrb	r2, [r7, #3]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d204      	bcs.n	800740c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800740a:	e001      	b.n	8007410 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800740c:	2302      	movs	r3, #2
 800740e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800741e:	b480      	push	{r7}
 8007420:	b087      	sub	sp, #28
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	4608      	mov	r0, r1
 8007428:	4611      	mov	r1, r2
 800742a:	461a      	mov	r2, r3
 800742c:	4603      	mov	r3, r0
 800742e:	70fb      	strb	r3, [r7, #3]
 8007430:	460b      	mov	r3, r1
 8007432:	70bb      	strb	r3, [r7, #2]
 8007434:	4613      	mov	r3, r2
 8007436:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007446:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007448:	e025      	b.n	8007496 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	221a      	movs	r2, #26
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	3308      	adds	r3, #8
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	3302      	adds	r3, #2
 800745a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	795b      	ldrb	r3, [r3, #5]
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	429a      	cmp	r2, r3
 8007464:	d002      	beq.n	800746c <USBH_FindInterface+0x4e>
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	2bff      	cmp	r3, #255	@ 0xff
 800746a:	d111      	bne.n	8007490 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007470:	78ba      	ldrb	r2, [r7, #2]
 8007472:	429a      	cmp	r2, r3
 8007474:	d002      	beq.n	800747c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007476:	78bb      	ldrb	r3, [r7, #2]
 8007478:	2bff      	cmp	r3, #255	@ 0xff
 800747a:	d109      	bne.n	8007490 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007480:	787a      	ldrb	r2, [r7, #1]
 8007482:	429a      	cmp	r2, r3
 8007484:	d002      	beq.n	800748c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007486:	787b      	ldrb	r3, [r7, #1]
 8007488:	2bff      	cmp	r3, #255	@ 0xff
 800748a:	d101      	bne.n	8007490 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	e006      	b.n	800749e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	3301      	adds	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d9d6      	bls.n	800744a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800749c:	23ff      	movs	r3, #255	@ 0xff
}
 800749e:	4618      	mov	r0, r3
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fcf4 	bl	8008ea0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074b8:	2101      	movs	r1, #1
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fe0d 	bl	80090da <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af04      	add	r7, sp, #16
 80074d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074d4:	2302      	movs	r3, #2
 80074d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d102      	bne.n	80074ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2203      	movs	r2, #3
 80074ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b0b      	cmp	r3, #11
 80074f6:	f200 81bb 	bhi.w	8007870 <USBH_Process+0x3a4>
 80074fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007500 <USBH_Process+0x34>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	08007531 	.word	0x08007531
 8007504:	08007563 	.word	0x08007563
 8007508:	080075cb 	.word	0x080075cb
 800750c:	0800780b 	.word	0x0800780b
 8007510:	08007871 	.word	0x08007871
 8007514:	0800766b 	.word	0x0800766b
 8007518:	080077b1 	.word	0x080077b1
 800751c:	080076a1 	.word	0x080076a1
 8007520:	080076c1 	.word	0x080076c1
 8007524:	080076df 	.word	0x080076df
 8007528:	08007723 	.word	0x08007723
 800752c:	080077f3 	.word	0x080077f3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 819b 	beq.w	8007874 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007544:	20c8      	movs	r0, #200	@ 0xc8
 8007546:	f001 fe12 	bl	800916e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fd05 	bl	8008f5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007560:	e188      	b.n	8007874 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007568:	2b01      	cmp	r3, #1
 800756a:	d107      	bne.n	800757c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800757a:	e18a      	b.n	8007892 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007586:	d914      	bls.n	80075b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800758e:	3301      	adds	r3, #1
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d903      	bls.n	80075aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	220d      	movs	r2, #13
 80075a6:	701a      	strb	r2, [r3, #0]
      break;
 80075a8:	e173      	b.n	8007892 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
      break;
 80075b0:	e16f      	b.n	8007892 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80075b8:	f103 020a 	add.w	r2, r3, #10
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80075c2:	200a      	movs	r0, #10
 80075c4:	f001 fdd3 	bl	800916e <USBH_Delay>
      break;
 80075c8:	e163      	b.n	8007892 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075da:	2104      	movs	r1, #4
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075e0:	2064      	movs	r0, #100	@ 0x64
 80075e2:	f001 fdc4 	bl	800916e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 fc90 	bl	8008f0c <USBH_LL_GetSpeed>
 80075ec:	4603      	mov	r3, r0
 80075ee:	461a      	mov	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2205      	movs	r2, #5
 80075fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fa9b 	bl	8008b3a <USBH_AllocPipe>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800760c:	2180      	movs	r1, #128	@ 0x80
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fa93 	bl	8008b3a <USBH_AllocPipe>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7919      	ldrb	r1, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007630:	9202      	str	r2, [sp, #8]
 8007632:	2200      	movs	r2, #0
 8007634:	9201      	str	r2, [sp, #4]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4603      	mov	r3, r0
 800763a:	2280      	movs	r2, #128	@ 0x80
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fa4d 	bl	8008adc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7959      	ldrb	r1, [r3, #5]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007656:	9202      	str	r2, [sp, #8]
 8007658:	2200      	movs	r2, #0
 800765a:	9201      	str	r2, [sp, #4]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	4603      	mov	r3, r0
 8007660:	2200      	movs	r2, #0
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fa3a 	bl	8008adc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007668:	e113      	b.n	8007892 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f916 	bl	800789c <USBH_HandleEnum>
 8007670:	4603      	mov	r3, r0
 8007672:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f040 80fd 	bne.w	8007878 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800768c:	2b01      	cmp	r3, #1
 800768e:	d103      	bne.n	8007698 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2208      	movs	r2, #8
 8007694:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007696:	e0ef      	b.n	8007878 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2207      	movs	r2, #7
 800769c:	701a      	strb	r2, [r3, #0]
      break;
 800769e:	e0eb      	b.n	8007878 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80e8 	beq.w	800787c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b2:	2101      	movs	r1, #1
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2208      	movs	r2, #8
 80076bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80076be:	e0dd      	b.n	800787c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fc3a 	bl	8007f42 <USBH_SetCfg>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 80d5 	bne.w	8007880 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2209      	movs	r2, #9
 80076da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076dc:	e0d0      	b.n	8007880 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d016      	beq.n	800771a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076ec:	2101      	movs	r1, #1
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc4a 	bl	8007f88 <USBH_SetFeature>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	220a      	movs	r2, #10
 8007704:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007706:	e0bd      	b.n	8007884 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b03      	cmp	r3, #3
 800770e:	f040 80b9 	bne.w	8007884 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220a      	movs	r2, #10
 8007716:	701a      	strb	r2, [r3, #0]
      break;
 8007718:	e0b4      	b.n	8007884 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	220a      	movs	r2, #10
 800771e:	701a      	strb	r2, [r3, #0]
      break;
 8007720:	e0b0      	b.n	8007884 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80ad 	beq.w	8007888 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
 800773a:	e016      	b.n	800776a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800773c:	7bfa      	ldrb	r2, [r7, #15]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	32de      	adds	r2, #222	@ 0xde
 8007742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007746:	791a      	ldrb	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800774e:	429a      	cmp	r2, r3
 8007750:	d108      	bne.n	8007764 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007752:	7bfa      	ldrb	r2, [r7, #15]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	32de      	adds	r2, #222	@ 0xde
 8007758:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007762:	e005      	b.n	8007770 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	3301      	adds	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0e5      	beq.n	800773c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2206      	movs	r2, #6
 8007790:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007798:	2103      	movs	r1, #3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800779e:	e073      	b.n	8007888 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	220d      	movs	r2, #13
 80077a4:	701a      	strb	r2, [r3, #0]
      break;
 80077a6:	e06f      	b.n	8007888 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220d      	movs	r2, #13
 80077ac:	701a      	strb	r2, [r3, #0]
      break;
 80077ae:	e06b      	b.n	8007888 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d017      	beq.n	80077ea <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d103      	bne.n	80077da <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	220b      	movs	r2, #11
 80077d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077d8:	e058      	b.n	800788c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d154      	bne.n	800788c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	220d      	movs	r2, #13
 80077e6:	701a      	strb	r2, [r3, #0]
      break;
 80077e8:	e050      	b.n	800788c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	220d      	movs	r2, #13
 80077ee:	701a      	strb	r2, [r3, #0]
      break;
 80077f0:	e04c      	b.n	800788c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d049      	beq.n	8007890 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
      }
      break;
 8007808:	e042      	b.n	8007890 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fd4a 	bl	80072ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007846:	2105      	movs	r1, #5
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d107      	bne.n	8007868 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fe22 	bl	80074aa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007866:	e014      	b.n	8007892 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fb19 	bl	8008ea0 <USBH_LL_Start>
      break;
 800786e:	e010      	b.n	8007892 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007870:	bf00      	nop
 8007872:	e00e      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 8007874:	bf00      	nop
 8007876:	e00c      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 8007878:	bf00      	nop
 800787a:	e00a      	b.n	8007892 <USBH_Process+0x3c6>
    break;
 800787c:	bf00      	nop
 800787e:	e008      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 8007880:	bf00      	nop
 8007882:	e006      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <USBH_Process+0x3c6>
      break;
 8007890:	bf00      	nop
  }
  return USBH_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b07      	cmp	r3, #7
 80078b2:	f200 81bd 	bhi.w	8007c30 <USBH_HandleEnum+0x394>
 80078b6:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <USBH_HandleEnum+0x20>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	08007997 	.word	0x08007997
 80078c4:	08007a01 	.word	0x08007a01
 80078c8:	08007a8b 	.word	0x08007a8b
 80078cc:	08007af5 	.word	0x08007af5
 80078d0:	08007b65 	.word	0x08007b65
 80078d4:	08007bab 	.word	0x08007bab
 80078d8:	08007bf1 	.word	0x08007bf1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078dc:	2108      	movs	r1, #8
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa4c 	bl	8007d7c <USBH_Get_DevDesc>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d12e      	bne.n	800794c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7919      	ldrb	r1, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007912:	9202      	str	r2, [sp, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	9201      	str	r2, [sp, #4]
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	4603      	mov	r3, r0
 800791c:	2280      	movs	r2, #128	@ 0x80
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 f8dc 	bl	8008adc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	7959      	ldrb	r1, [r3, #5]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007938:	9202      	str	r2, [sp, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	9201      	str	r2, [sp, #4]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4603      	mov	r3, r0
 8007942:	2200      	movs	r2, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 f8c9 	bl	8008adc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800794a:	e173      	b.n	8007c34 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b03      	cmp	r3, #3
 8007950:	f040 8170 	bne.w	8007c34 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800795a:	3301      	adds	r3, #1
 800795c:	b2da      	uxtb	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800796a:	2b03      	cmp	r3, #3
 800796c:	d903      	bls.n	8007976 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	220d      	movs	r2, #13
 8007972:	701a      	strb	r2, [r3, #0]
      break;
 8007974:	e15e      	b.n	8007c34 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	795b      	ldrb	r3, [r3, #5]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f8fd 	bl	8008b7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 f8f7 	bl	8008b7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
      break;
 8007994:	e14e      	b.n	8007c34 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007996:	2112      	movs	r1, #18
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f9ef 	bl	8007d7c <USBH_Get_DevDesc>
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d103      	bne.n	80079b0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079ae:	e143      	b.n	8007c38 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	f040 8140 	bne.w	8007c38 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079be:	3301      	adds	r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d903      	bls.n	80079da <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	220d      	movs	r2, #13
 80079d6:	701a      	strb	r2, [r3, #0]
      break;
 80079d8:	e12e      	b.n	8007c38 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	795b      	ldrb	r3, [r3, #5]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 f8cb 	bl	8008b7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f8c5 	bl	8008b7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e11b      	b.n	8007c38 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a00:	2101      	movs	r1, #1
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa79 	bl	8007efa <USBH_SetAddress>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d130      	bne.n	8007a74 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007a12:	2002      	movs	r0, #2
 8007a14:	f001 fbab 	bl	800916e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2203      	movs	r2, #3
 8007a24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	7919      	ldrb	r1, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a3a:	9202      	str	r2, [sp, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	9201      	str	r2, [sp, #4]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	4603      	mov	r3, r0
 8007a44:	2280      	movs	r2, #128	@ 0x80
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f848 	bl	8008adc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7959      	ldrb	r1, [r3, #5]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a60:	9202      	str	r2, [sp, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	9201      	str	r2, [sp, #4]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 f835 	bl	8008adc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a72:	e0e3      	b.n	8007c3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	f040 80e0 	bne.w	8007c3c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	220d      	movs	r2, #13
 8007a80:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	705a      	strb	r2, [r3, #1]
      break;
 8007a88:	e0d8      	b.n	8007c3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a8a:	2109      	movs	r1, #9
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9a1 	bl	8007dd4 <USBH_Get_CfgDesc>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d103      	bne.n	8007aa4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aa2:	e0cd      	b.n	8007c40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	f040 80ca 	bne.w	8007c40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d903      	bls.n	8007ace <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220d      	movs	r2, #13
 8007aca:	701a      	strb	r2, [r3, #0]
      break;
 8007acc:	e0b8      	b.n	8007c40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	795b      	ldrb	r3, [r3, #5]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f851 	bl	8008b7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	791b      	ldrb	r3, [r3, #4]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 f84b 	bl	8008b7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	701a      	strb	r2, [r3, #0]
      break;
 8007af2:	e0a5      	b.n	8007c40 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f969 	bl	8007dd4 <USBH_Get_CfgDesc>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2205      	movs	r2, #5
 8007b10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b12:	e097      	b.n	8007c44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	f040 8094 	bne.w	8007c44 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b22:	3301      	adds	r3, #1
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d903      	bls.n	8007b3e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	220d      	movs	r2, #13
 8007b3a:	701a      	strb	r2, [r3, #0]
      break;
 8007b3c:	e082      	b.n	8007c44 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	795b      	ldrb	r3, [r3, #5]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f819 	bl	8008b7c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	791b      	ldrb	r3, [r3, #4]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f813 	bl	8008b7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]
      break;
 8007b62:	e06f      	b.n	8007c44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d019      	beq.n	8007ba2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b7a:	23ff      	movs	r3, #255	@ 0xff
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f953 	bl	8007e28 <USBH_Get_StringDesc>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2206      	movs	r2, #6
 8007b90:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b92:	e059      	b.n	8007c48 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d156      	bne.n	8007c48 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2206      	movs	r2, #6
 8007b9e:	705a      	strb	r2, [r3, #1]
      break;
 8007ba0:	e052      	b.n	8007c48 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2206      	movs	r2, #6
 8007ba6:	705a      	strb	r2, [r3, #1]
      break;
 8007ba8:	e04e      	b.n	8007c48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d019      	beq.n	8007be8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bc0:	23ff      	movs	r3, #255	@ 0xff
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f930 	bl	8007e28 <USBH_Get_StringDesc>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d103      	bne.n	8007bda <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bd8:	e038      	b.n	8007c4c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d135      	bne.n	8007c4c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2207      	movs	r2, #7
 8007be4:	705a      	strb	r2, [r3, #1]
      break;
 8007be6:	e031      	b.n	8007c4c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2207      	movs	r2, #7
 8007bec:	705a      	strb	r2, [r3, #1]
      break;
 8007bee:	e02d      	b.n	8007c4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d017      	beq.n	8007c2a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c06:	23ff      	movs	r3, #255	@ 0xff
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f90d 	bl	8007e28 <USBH_Get_StringDesc>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c1c:	e018      	b.n	8007c50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d115      	bne.n	8007c50 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
      break;
 8007c28:	e012      	b.n	8007c50 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2e:	e00f      	b.n	8007c50 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007c30:	bf00      	nop
 8007c32:	e00e      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c34:	bf00      	nop
 8007c36:	e00c      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c38:	bf00      	nop
 8007c3a:	e00a      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c3c:	bf00      	nop
 8007c3e:	e008      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c40:	bf00      	nop
 8007c42:	e006      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c44:	bf00      	nop
 8007c46:	e004      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c48:	bf00      	nop
 8007c4a:	e002      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <USBH_HandleEnum+0x3b6>
      break;
 8007c50:	bf00      	nop
  }
  return Status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f804 	bl	8007c9e <USBH_HandleSof>
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b0b      	cmp	r3, #11
 8007cae:	d10a      	bne.n	8007cc6 <USBH_HandleSof+0x28>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007cde:	bf00      	nop
}
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007cfa:	bf00      	nop
}
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 f8be 	bl	8008ed6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 ff0b 	bl	8008b7c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	795b      	ldrb	r3, [r3, #5]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff05 	bl	8008b7c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007d88:	887b      	ldrh	r3, [r7, #2]
 8007d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8e:	d901      	bls.n	8007d94 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e01b      	b.n	8007dcc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007d9a:	887b      	ldrh	r3, [r7, #2]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007da4:	2100      	movs	r1, #0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f872 	bl	8007e90 <USBH_GetDescriptor>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007dbc:	887a      	ldrh	r2, [r7, #2]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f929 	bl	8008018 <USBH_ParseDevDesc>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	331c      	adds	r3, #28
 8007de4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dec:	d901      	bls.n	8007df2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e016      	b.n	8007e20 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007df2:	887b      	ldrh	r3, [r7, #2]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f846 	bl	8007e90 <USBH_GetDescriptor>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	461a      	mov	r2, r3
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f9af 	bl	8008178 <USBH_ParseCfgDesc>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	461a      	mov	r2, r3
 8007e34:	460b      	mov	r3, r1
 8007e36:	72fb      	strb	r3, [r7, #11]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007e3c:	893b      	ldrh	r3, [r7, #8]
 8007e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e42:	d802      	bhi.n	8007e4a <USBH_Get_StringDesc+0x22>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e01c      	b.n	8007e88 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007e56:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e5e:	893b      	ldrh	r3, [r7, #8]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	460b      	mov	r3, r1
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f812 	bl	8007e90 <USBH_GetDescriptor>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d107      	bne.n	8007e86 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e7c:	893a      	ldrh	r2, [r7, #8]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fb8d 	bl	80085a0 <USBH_ParseStringDesc>
  }

  return status;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	72fb      	strb	r3, [r7, #11]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	789b      	ldrb	r3, [r3, #2]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d11c      	bne.n	8007ee4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2206      	movs	r2, #6
 8007eba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	893a      	ldrh	r2, [r7, #8]
 8007ec0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ec2:	893b      	ldrh	r3, [r7, #8]
 8007ec4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ecc:	d104      	bne.n	8007ed8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f240 4209 	movw	r2, #1033	@ 0x409
 8007ed4:	829a      	strh	r2, [r3, #20]
 8007ed6:	e002      	b.n	8007ede <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8b3a      	ldrh	r2, [r7, #24]
 8007ee2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ee4:	8b3b      	ldrh	r3, [r7, #24]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fba5 	bl	800863a <USBH_CtlReq>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	789b      	ldrb	r3, [r3, #2]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d10f      	bne.n	8007f2e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2205      	movs	r2, #5
 8007f18:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fb81 	bl	800863a <USBH_CtlReq>
 8007f38:	4603      	mov	r3, r0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	789b      	ldrb	r3, [r3, #2]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d10e      	bne.n	8007f74 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2209      	movs	r2, #9
 8007f60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	887a      	ldrh	r2, [r7, #2]
 8007f66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fb5e 	bl	800863a <USBH_CtlReq>
 8007f7e:	4603      	mov	r3, r0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	789b      	ldrb	r3, [r3, #2]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10f      	bne.n	8007fbc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb3a 	bl	800863a <USBH_CtlReq>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	789b      	ldrb	r3, [r3, #2]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d10f      	bne.n	8008004 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fb16 	bl	800863a <USBH_CtlReq>
 800800e:	4603      	mov	r3, r0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800802c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008038:	2302      	movs	r3, #2
 800803a:	e094      	b.n	8008166 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	785a      	ldrb	r2, [r3, #1]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	3302      	adds	r3, #2
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3303      	adds	r3, #3
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	b29b      	uxth	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b29a      	uxth	r2, r3
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	791a      	ldrb	r2, [r3, #4]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	795a      	ldrb	r2, [r3, #5]
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	799a      	ldrb	r2, [r3, #6]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	79da      	ldrb	r2, [r3, #7]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008096:	2b01      	cmp	r3, #1
 8008098:	d11b      	bne.n	80080d2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	79db      	ldrb	r3, [r3, #7]
 800809e:	2b20      	cmp	r3, #32
 80080a0:	dc0f      	bgt.n	80080c2 <USBH_ParseDevDesc+0xaa>
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	db0f      	blt.n	80080c6 <USBH_ParseDevDesc+0xae>
 80080a6:	3b08      	subs	r3, #8
 80080a8:	4a32      	ldr	r2, [pc, #200]	@ (8008174 <USBH_ParseDevDesc+0x15c>)
 80080aa:	fa22 f303 	lsr.w	r3, r2, r3
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	bf14      	ite	ne
 80080b6:	2301      	movne	r3, #1
 80080b8:	2300      	moveq	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d106      	bne.n	80080ce <USBH_ParseDevDesc+0xb6>
 80080c0:	e001      	b.n	80080c6 <USBH_ParseDevDesc+0xae>
 80080c2:	2b40      	cmp	r3, #64	@ 0x40
 80080c4:	d003      	beq.n	80080ce <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2208      	movs	r2, #8
 80080ca:	71da      	strb	r2, [r3, #7]
        break;
 80080cc:	e000      	b.n	80080d0 <USBH_ParseDevDesc+0xb8>
        break;
 80080ce:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80080d0:	e00e      	b.n	80080f0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d107      	bne.n	80080ec <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	79db      	ldrb	r3, [r3, #7]
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d005      	beq.n	80080f0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2208      	movs	r2, #8
 80080e8:	71da      	strb	r2, [r3, #7]
 80080ea:	e001      	b.n	80080f0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80080ec:	2303      	movs	r3, #3
 80080ee:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d936      	bls.n	8008164 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3308      	adds	r3, #8
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	3309      	adds	r3, #9
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	b29b      	uxth	r3, r3
 8008108:	4313      	orrs	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	330a      	adds	r3, #10
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	330b      	adds	r3, #11
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	b29b      	uxth	r3, r3
 8008122:	4313      	orrs	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	330c      	adds	r3, #12
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	330d      	adds	r3, #13
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	b29b      	uxth	r3, r3
 800813c:	4313      	orrs	r3, r2
 800813e:	b29a      	uxth	r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	7b9a      	ldrb	r2, [r3, #14]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	7bda      	ldrb	r2, [r3, #15]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	7c1a      	ldrb	r2, [r3, #16]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	7c5a      	ldrb	r2, [r3, #17]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
}
 8008166:	4618      	mov	r0, r3
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	01000101 	.word	0x01000101

08008178 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08c      	sub	sp, #48	@ 0x30
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800818c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80081a6:	2302      	movs	r3, #2
 80081a8:	e0da      	b.n	8008360 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	d002      	beq.n	80081bc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b8:	2209      	movs	r2, #9
 80081ba:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	785a      	ldrb	r2, [r3, #1]
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3302      	adds	r3, #2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3303      	adds	r3, #3
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b29b      	uxth	r3, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081e6:	bf28      	it	cs
 80081e8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	791a      	ldrb	r2, [r3, #4]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	795a      	ldrb	r2, [r3, #5]
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	799a      	ldrb	r2, [r3, #6]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	79da      	ldrb	r2, [r3, #7]
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	7a1a      	ldrb	r2, [r3, #8]
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	2b09      	cmp	r3, #9
 800821e:	f240 809d 	bls.w	800835c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008222:	2309      	movs	r3, #9
 8008224:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800822a:	e081      	b.n	8008330 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800822c:	f107 0316 	add.w	r3, r7, #22
 8008230:	4619      	mov	r1, r3
 8008232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008234:	f000 f9e7 	bl	8008606 <USBH_GetNextDesc>
 8008238:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d176      	bne.n	8008330 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b09      	cmp	r3, #9
 8008248:	d002      	beq.n	8008250 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	2209      	movs	r2, #9
 800824e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008254:	221a      	movs	r2, #26
 8008256:	fb02 f303 	mul.w	r3, r2, r3
 800825a:	3308      	adds	r3, #8
 800825c:	6a3a      	ldr	r2, [r7, #32]
 800825e:	4413      	add	r3, r2
 8008260:	3302      	adds	r3, #2
 8008262:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008266:	69f8      	ldr	r0, [r7, #28]
 8008268:	f000 f87e 	bl	8008368 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008276:	e043      	b.n	8008300 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008278:	f107 0316 	add.w	r3, r7, #22
 800827c:	4619      	mov	r1, r3
 800827e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008280:	f000 f9c1 	bl	8008606 <USBH_GetNextDesc>
 8008284:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b05      	cmp	r3, #5
 800828c:	d138      	bne.n	8008300 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	795b      	ldrb	r3, [r3, #5]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d113      	bne.n	80082be <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800829a:	2b02      	cmp	r3, #2
 800829c:	d003      	beq.n	80082a6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	799b      	ldrb	r3, [r3, #6]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d10b      	bne.n	80082be <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	79db      	ldrb	r3, [r3, #7]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <USBH_ParseCfgDesc+0x14e>
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b09      	cmp	r3, #9
 80082b4:	d007      	beq.n	80082c6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80082b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b8:	2209      	movs	r2, #9
 80082ba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082bc:	e003      	b.n	80082c6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	2207      	movs	r2, #7
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e000      	b.n	80082c8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082c6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80082d0:	3201      	adds	r2, #1
 80082d2:	00d2      	lsls	r2, r2, #3
 80082d4:	211a      	movs	r1, #26
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	3308      	adds	r3, #8
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80082e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082e8:	69b9      	ldr	r1, [r7, #24]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f870 	bl	80083d0 <USBH_ParseEPDesc>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80082f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082fa:	3301      	adds	r3, #1
 80082fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	791b      	ldrb	r3, [r3, #4]
 8008304:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008308:	429a      	cmp	r2, r3
 800830a:	d204      	bcs.n	8008316 <USBH_ParseCfgDesc+0x19e>
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	885a      	ldrh	r2, [r3, #2]
 8008310:	8afb      	ldrh	r3, [r7, #22]
 8008312:	429a      	cmp	r2, r3
 8008314:	d8b0      	bhi.n	8008278 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	791b      	ldrb	r3, [r3, #4]
 800831a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800831e:	429a      	cmp	r2, r3
 8008320:	d201      	bcs.n	8008326 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008322:	2303      	movs	r3, #3
 8008324:	e01c      	b.n	8008360 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800832a:	3301      	adds	r3, #1
 800832c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008334:	2b01      	cmp	r3, #1
 8008336:	d805      	bhi.n	8008344 <USBH_ParseCfgDesc+0x1cc>
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	885a      	ldrh	r2, [r3, #2]
 800833c:	8afb      	ldrh	r3, [r7, #22]
 800833e:	429a      	cmp	r2, r3
 8008340:	f63f af74 	bhi.w	800822c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	791b      	ldrb	r3, [r3, #4]
 8008348:	2b02      	cmp	r3, #2
 800834a:	bf28      	it	cs
 800834c:	2302      	movcs	r3, #2
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008354:	429a      	cmp	r2, r3
 8008356:	d201      	bcs.n	800835c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008358:	2303      	movs	r3, #3
 800835a:	e001      	b.n	8008360 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800835c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008360:	4618      	mov	r0, r3
 8008362:	3730      	adds	r7, #48	@ 0x30
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	785a      	ldrb	r2, [r3, #1]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	789a      	ldrb	r2, [r3, #2]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	78da      	ldrb	r2, [r3, #3]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	3304      	adds	r3, #4
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b02      	cmp	r3, #2
 800839a:	bf28      	it	cs
 800839c:	2302      	movcs	r3, #2
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	795a      	ldrb	r2, [r3, #5]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	799a      	ldrb	r2, [r3, #6]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	79da      	ldrb	r2, [r3, #7]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	7a1a      	ldrb	r2, [r3, #8]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	721a      	strb	r2, [r3, #8]
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	785a      	ldrb	r2, [r3, #1]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	789a      	ldrb	r2, [r3, #2]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	78da      	ldrb	r2, [r3, #3]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3305      	adds	r3, #5
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	4313      	orrs	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	799a      	ldrb	r2, [r3, #6]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	889b      	ldrh	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800842e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008432:	d804      	bhi.n	800843e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800843c:	d901      	bls.n	8008442 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800843e:	2303      	movs	r3, #3
 8008440:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008448:	2b00      	cmp	r3, #0
 800844a:	d136      	bne.n	80084ba <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	78db      	ldrb	r3, [r3, #3]
 8008450:	f003 0303 	and.w	r3, r3, #3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d108      	bne.n	800846a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	889b      	ldrh	r3, [r3, #4]
 800845c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008460:	f240 8097 	bls.w	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008464:	2303      	movs	r3, #3
 8008466:	75fb      	strb	r3, [r7, #23]
 8008468:	e093      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	78db      	ldrb	r3, [r3, #3]
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d107      	bne.n	8008486 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	889b      	ldrh	r3, [r3, #4]
 800847a:	2b40      	cmp	r3, #64	@ 0x40
 800847c:	f240 8089 	bls.w	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008480:	2303      	movs	r3, #3
 8008482:	75fb      	strb	r3, [r7, #23]
 8008484:	e085      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	78db      	ldrb	r3, [r3, #3]
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	2b01      	cmp	r3, #1
 8008490:	d005      	beq.n	800849e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	78db      	ldrb	r3, [r3, #3]
 8008496:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800849a:	2b03      	cmp	r3, #3
 800849c:	d10a      	bne.n	80084b4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	799b      	ldrb	r3, [r3, #6]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <USBH_ParseEPDesc+0xde>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	799b      	ldrb	r3, [r3, #6]
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d970      	bls.n	8008590 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80084ae:	2303      	movs	r3, #3
 80084b0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084b2:	e06d      	b.n	8008590 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084b4:	2303      	movs	r3, #3
 80084b6:	75fb      	strb	r3, [r7, #23]
 80084b8:	e06b      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d13c      	bne.n	800853e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	78db      	ldrb	r3, [r3, #3]
 80084c8:	f003 0303 	and.w	r3, r3, #3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d005      	beq.n	80084dc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	889b      	ldrh	r3, [r3, #4]
 80084e0:	2b40      	cmp	r3, #64	@ 0x40
 80084e2:	d956      	bls.n	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084e4:	2303      	movs	r3, #3
 80084e6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084e8:	e053      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d10e      	bne.n	8008514 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	799b      	ldrb	r3, [r3, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008502:	2b10      	cmp	r3, #16
 8008504:	d803      	bhi.n	800850e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800850a:	2b40      	cmp	r3, #64	@ 0x40
 800850c:	d941      	bls.n	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800850e:	2303      	movs	r3, #3
 8008510:	75fb      	strb	r3, [r7, #23]
 8008512:	e03e      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	78db      	ldrb	r3, [r3, #3]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b03      	cmp	r3, #3
 800851e:	d10b      	bne.n	8008538 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	799b      	ldrb	r3, [r3, #6]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <USBH_ParseEPDesc+0x162>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	889b      	ldrh	r3, [r3, #4]
 800852c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008530:	d32f      	bcc.n	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008532:	2303      	movs	r3, #3
 8008534:	75fb      	strb	r3, [r7, #23]
 8008536:	e02c      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008538:	2303      	movs	r3, #3
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	e029      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008544:	2b02      	cmp	r3, #2
 8008546:	d120      	bne.n	800858a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	78db      	ldrb	r3, [r3, #3]
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d106      	bne.n	8008562 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	889b      	ldrh	r3, [r3, #4]
 8008558:	2b08      	cmp	r3, #8
 800855a:	d01a      	beq.n	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800855c:	2303      	movs	r3, #3
 800855e:	75fb      	strb	r3, [r7, #23]
 8008560:	e017      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	78db      	ldrb	r3, [r3, #3]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d10a      	bne.n	8008584 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	799b      	ldrb	r3, [r3, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <USBH_ParseEPDesc+0x1ae>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	889b      	ldrh	r3, [r3, #4]
 800857a:	2b08      	cmp	r3, #8
 800857c:	d909      	bls.n	8008592 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800857e:	2303      	movs	r3, #3
 8008580:	75fb      	strb	r3, [r7, #23]
 8008582:	e006      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008584:	2303      	movs	r3, #3
 8008586:	75fb      	strb	r3, [r7, #23]
 8008588:	e003      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800858a:	2303      	movs	r3, #3
 800858c:	75fb      	strb	r3, [r7, #23]
 800858e:	e000      	b.n	8008592 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008590:	bf00      	nop
  }

  return status;
 8008592:	7dfb      	ldrb	r3, [r7, #23]
}
 8008594:	4618      	mov	r0, r3
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d120      	bne.n	80085fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	1e9a      	subs	r2, r3, #2
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	4293      	cmp	r3, r2
 80085c2:	bf28      	it	cs
 80085c4:	4613      	movcs	r3, r2
 80085c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3302      	adds	r3, #2
 80085cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085ce:	2300      	movs	r3, #0
 80085d0:	82fb      	strh	r3, [r7, #22]
 80085d2:	e00b      	b.n	80085ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085d4:	8afb      	ldrh	r3, [r7, #22]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4413      	add	r3, r2
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085e6:	8afb      	ldrh	r3, [r7, #22]
 80085e8:	3302      	adds	r3, #2
 80085ea:	82fb      	strh	r3, [r7, #22]
 80085ec:	8afa      	ldrh	r2, [r7, #22]
 80085ee:	8abb      	ldrh	r3, [r7, #20]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3ef      	bcc.n	80085d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
  }
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	7812      	ldrb	r2, [r2, #0]
 8008618:	4413      	add	r3, r2
 800861a:	b29a      	uxth	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800862c:	68fb      	ldr	r3, [r7, #12]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	789b      	ldrb	r3, [r3, #2]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d002      	beq.n	800865a <USBH_CtlReq+0x20>
 8008654:	2b02      	cmp	r3, #2
 8008656:	d00f      	beq.n	8008678 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008658:	e027      	b.n	80086aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2202      	movs	r2, #2
 8008670:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008672:	2301      	movs	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
      break;
 8008676:	e018      	b.n	80086aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 f81b 	bl	80086b4 <USBH_HandleControl>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <USBH_CtlReq+0x54>
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b03      	cmp	r3, #3
 800868c:	d106      	bne.n	800869c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	761a      	strb	r2, [r3, #24]
      break;
 800869a:	e005      	b.n	80086a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d102      	bne.n	80086a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	709a      	strb	r2, [r3, #2]
      break;
 80086a8:	bf00      	nop
  }
  return status;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7e1b      	ldrb	r3, [r3, #24]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	2b0a      	cmp	r3, #10
 80086cc:	f200 8156 	bhi.w	800897c <USBH_HandleControl+0x2c8>
 80086d0:	a201      	add	r2, pc, #4	@ (adr r2, 80086d8 <USBH_HandleControl+0x24>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	08008705 	.word	0x08008705
 80086dc:	0800871f 	.word	0x0800871f
 80086e0:	08008789 	.word	0x08008789
 80086e4:	080087af 	.word	0x080087af
 80086e8:	080087e7 	.word	0x080087e7
 80086ec:	08008811 	.word	0x08008811
 80086f0:	08008863 	.word	0x08008863
 80086f4:	08008885 	.word	0x08008885
 80086f8:	080088c1 	.word	0x080088c1
 80086fc:	080088e7 	.word	0x080088e7
 8008700:	08008925 	.word	0x08008925
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f103 0110 	add.w	r1, r3, #16
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	795b      	ldrb	r3, [r3, #5]
 800870e:	461a      	mov	r2, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f943 	bl	800899c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	761a      	strb	r2, [r3, #24]
      break;
 800871c:	e139      	b.n	8008992 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	795b      	ldrb	r3, [r3, #5]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fcc5 	bl	80090b4 <USBH_LL_GetURBState>
 800872a:	4603      	mov	r3, r0
 800872c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d11e      	bne.n	8008772 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	7c1b      	ldrb	r3, [r3, #16]
 8008738:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800873c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	8adb      	ldrh	r3, [r3, #22]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008746:	7b7b      	ldrb	r3, [r7, #13]
 8008748:	2b80      	cmp	r3, #128	@ 0x80
 800874a:	d103      	bne.n	8008754 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2203      	movs	r2, #3
 8008750:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008752:	e115      	b.n	8008980 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2205      	movs	r2, #5
 8008758:	761a      	strb	r2, [r3, #24]
      break;
 800875a:	e111      	b.n	8008980 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800875c:	7b7b      	ldrb	r3, [r7, #13]
 800875e:	2b80      	cmp	r3, #128	@ 0x80
 8008760:	d103      	bne.n	800876a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2209      	movs	r2, #9
 8008766:	761a      	strb	r2, [r3, #24]
      break;
 8008768:	e10a      	b.n	8008980 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2207      	movs	r2, #7
 800876e:	761a      	strb	r2, [r3, #24]
      break;
 8008770:	e106      	b.n	8008980 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	2b04      	cmp	r3, #4
 8008776:	d003      	beq.n	8008780 <USBH_HandleControl+0xcc>
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b02      	cmp	r3, #2
 800877c:	f040 8100 	bne.w	8008980 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	220b      	movs	r2, #11
 8008784:	761a      	strb	r2, [r3, #24]
      break;
 8008786:	e0fb      	b.n	8008980 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800878e:	b29a      	uxth	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6899      	ldr	r1, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	899a      	ldrh	r2, [r3, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	791b      	ldrb	r3, [r3, #4]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f93a 	bl	8008a1a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2204      	movs	r2, #4
 80087aa:	761a      	strb	r2, [r3, #24]
      break;
 80087ac:	e0f1      	b.n	8008992 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	791b      	ldrb	r3, [r3, #4]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc7d 	bl	80090b4 <USBH_LL_GetURBState>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d102      	bne.n	80087ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2209      	movs	r2, #9
 80087c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	d102      	bne.n	80087d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80087d0:	2303      	movs	r3, #3
 80087d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087d4:	e0d6      	b.n	8008984 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b04      	cmp	r3, #4
 80087da:	f040 80d3 	bne.w	8008984 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	220b      	movs	r2, #11
 80087e2:	761a      	strb	r2, [r3, #24]
      break;
 80087e4:	e0ce      	b.n	8008984 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6899      	ldr	r1, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	899a      	ldrh	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	795b      	ldrb	r3, [r3, #5]
 80087f2:	2001      	movs	r0, #1
 80087f4:	9000      	str	r0, [sp, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f8ea 	bl	80089d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2206      	movs	r2, #6
 800880c:	761a      	strb	r2, [r3, #24]
      break;
 800880e:	e0c0      	b.n	8008992 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	795b      	ldrb	r3, [r3, #5]
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fc4c 	bl	80090b4 <USBH_LL_GetURBState>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d103      	bne.n	800882e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2207      	movs	r2, #7
 800882a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800882c:	e0ac      	b.n	8008988 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b05      	cmp	r3, #5
 8008832:	d105      	bne.n	8008840 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220c      	movs	r2, #12
 8008838:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800883a:	2303      	movs	r3, #3
 800883c:	73fb      	strb	r3, [r7, #15]
      break;
 800883e:	e0a3      	b.n	8008988 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d103      	bne.n	800884e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2205      	movs	r2, #5
 800884a:	761a      	strb	r2, [r3, #24]
      break;
 800884c:	e09c      	b.n	8008988 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b04      	cmp	r3, #4
 8008852:	f040 8099 	bne.w	8008988 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	220b      	movs	r2, #11
 800885a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800885c:	2302      	movs	r3, #2
 800885e:	73fb      	strb	r3, [r7, #15]
      break;
 8008860:	e092      	b.n	8008988 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	791b      	ldrb	r3, [r3, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8d5 	bl	8008a1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2208      	movs	r2, #8
 8008880:	761a      	strb	r2, [r3, #24]

      break;
 8008882:	e086      	b.n	8008992 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	791b      	ldrb	r3, [r3, #4]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fc12 	bl	80090b4 <USBH_LL_GetURBState>
 8008890:	4603      	mov	r3, r0
 8008892:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d105      	bne.n	80088a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	220d      	movs	r2, #13
 800889e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088a4:	e072      	b.n	800898c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d103      	bne.n	80088b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	220b      	movs	r2, #11
 80088b0:	761a      	strb	r2, [r3, #24]
      break;
 80088b2:	e06b      	b.n	800898c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d168      	bne.n	800898c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80088ba:	2303      	movs	r3, #3
 80088bc:	73fb      	strb	r3, [r7, #15]
      break;
 80088be:	e065      	b.n	800898c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	795b      	ldrb	r3, [r3, #5]
 80088c4:	2201      	movs	r2, #1
 80088c6:	9200      	str	r2, [sp, #0]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f87f 	bl	80089d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088d8:	b29a      	uxth	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	220a      	movs	r2, #10
 80088e2:	761a      	strb	r2, [r3, #24]
      break;
 80088e4:	e055      	b.n	8008992 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	795b      	ldrb	r3, [r3, #5]
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fbe1 	bl	80090b4 <USBH_LL_GetURBState>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d105      	bne.n	8008908 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	220d      	movs	r2, #13
 8008904:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008906:	e043      	b.n	8008990 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d103      	bne.n	8008916 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2209      	movs	r2, #9
 8008912:	761a      	strb	r2, [r3, #24]
      break;
 8008914:	e03c      	b.n	8008990 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b04      	cmp	r3, #4
 800891a:	d139      	bne.n	8008990 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	220b      	movs	r2, #11
 8008920:	761a      	strb	r2, [r3, #24]
      break;
 8008922:	e035      	b.n	8008990 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7e5b      	ldrb	r3, [r3, #25]
 8008928:	3301      	adds	r3, #1
 800892a:	b2da      	uxtb	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	765a      	strb	r2, [r3, #25]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7e5b      	ldrb	r3, [r3, #25]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d806      	bhi.n	8008946 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008944:	e025      	b.n	8008992 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800894c:	2106      	movs	r1, #6
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	795b      	ldrb	r3, [r3, #5]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f90c 	bl	8008b7c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	791b      	ldrb	r3, [r3, #4]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f906 	bl	8008b7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008976:	2302      	movs	r3, #2
 8008978:	73fb      	strb	r3, [r7, #15]
      break;
 800897a:	e00a      	b.n	8008992 <USBH_HandleControl+0x2de>

    default:
      break;
 800897c:	bf00      	nop
 800897e:	e008      	b.n	8008992 <USBH_HandleControl+0x2de>
      break;
 8008980:	bf00      	nop
 8008982:	e006      	b.n	8008992 <USBH_HandleControl+0x2de>
      break;
 8008984:	bf00      	nop
 8008986:	e004      	b.n	8008992 <USBH_HandleControl+0x2de>
      break;
 8008988:	bf00      	nop
 800898a:	e002      	b.n	8008992 <USBH_HandleControl+0x2de>
      break;
 800898c:	bf00      	nop
 800898e:	e000      	b.n	8008992 <USBH_HandleControl+0x2de>
      break;
 8008990:	bf00      	nop
  }

  return status;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af04      	add	r7, sp, #16
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089aa:	79f9      	ldrb	r1, [r7, #7]
 80089ac:	2300      	movs	r3, #0
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	2308      	movs	r3, #8
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2300      	movs	r3, #0
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	2200      	movs	r2, #0
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fb46 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af04      	add	r7, sp, #16
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	4611      	mov	r1, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	460b      	mov	r3, r1
 80089e0:	80fb      	strh	r3, [r7, #6]
 80089e2:	4613      	mov	r3, r2
 80089e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089f4:	7979      	ldrb	r1, [r7, #5]
 80089f6:	7e3b      	ldrb	r3, [r7, #24]
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	9302      	str	r3, [sp, #8]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2301      	movs	r3, #1
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	2300      	movs	r3, #0
 8008a08:	2200      	movs	r2, #0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 fb21 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af04      	add	r7, sp, #16
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	4611      	mov	r1, r2
 8008a26:	461a      	mov	r2, r3
 8008a28:	460b      	mov	r3, r1
 8008a2a:	80fb      	strh	r3, [r7, #6]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a30:	7979      	ldrb	r1, [r7, #5]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	9302      	str	r3, [sp, #8]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	2301      	movs	r3, #1
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	2201      	movs	r2, #1
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fb03 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a4c:	2300      	movs	r3, #0

}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af04      	add	r7, sp, #16
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	4611      	mov	r1, r2
 8008a62:	461a      	mov	r2, r3
 8008a64:	460b      	mov	r3, r1
 8008a66:	80fb      	strh	r3, [r7, #6]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a7a:	7979      	ldrb	r1, [r7, #5]
 8008a7c:	7e3b      	ldrb	r3, [r7, #24]
 8008a7e:	9303      	str	r3, [sp, #12]
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	9302      	str	r3, [sp, #8]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 fade 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	4611      	mov	r1, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	460b      	mov	r3, r1
 8008ab0:	80fb      	strh	r3, [r7, #6]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ab6:	7979      	ldrb	r1, [r7, #5]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	88fb      	ldrh	r3, [r7, #6]
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	2201      	movs	r2, #1
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fac0 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af04      	add	r7, sp, #16
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4603      	mov	r3, r0
 8008aec:	70fb      	strb	r3, [r7, #3]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70bb      	strb	r3, [r7, #2]
 8008af2:	4613      	mov	r3, r2
 8008af4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008af6:	7878      	ldrb	r0, [r7, #1]
 8008af8:	78ba      	ldrb	r2, [r7, #2]
 8008afa:	78f9      	ldrb	r1, [r7, #3]
 8008afc:	8b3b      	ldrh	r3, [r7, #24]
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	7d3b      	ldrb	r3, [r7, #20]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	7c3b      	ldrb	r3, [r7, #16]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	4603      	mov	r3, r0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa53 	bl	8008fb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa72 	bl	8009014 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f836 	bl	8008bb8 <USBH_GetFreePipe>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b50:	89fb      	ldrh	r3, [r7, #14]
 8008b52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00a      	beq.n	8008b70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b5a:	78fa      	ldrb	r2, [r7, #3]
 8008b5c:	89fb      	ldrh	r3, [r7, #14]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	33e0      	adds	r3, #224	@ 0xe0
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b70:	89fb      	ldrh	r3, [r7, #14]
 8008b72:	b2db      	uxtb	r3, r3
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	2b0f      	cmp	r3, #15
 8008b8c:	d80d      	bhi.n	8008baa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	33e0      	adds	r3, #224	@ 0xe0
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	33e0      	adds	r3, #224	@ 0xe0
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
 8008bc8:	e00f      	b.n	8008bea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	33e0      	adds	r3, #224	@ 0xe0
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	e007      	b.n	8008bf4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	3301      	adds	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d9ec      	bls.n	8008bca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c04:	2201      	movs	r2, #1
 8008c06:	490e      	ldr	r1, [pc, #56]	@ (8008c40 <MX_USB_HOST_Init+0x40>)
 8008c08:	480e      	ldr	r0, [pc, #56]	@ (8008c44 <MX_USB_HOST_Init+0x44>)
 8008c0a:	f7fe fb15 	bl	8007238 <USBH_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c14:	f7f7 ff90 	bl	8000b38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008c18:	490b      	ldr	r1, [pc, #44]	@ (8008c48 <MX_USB_HOST_Init+0x48>)
 8008c1a:	480a      	ldr	r0, [pc, #40]	@ (8008c44 <MX_USB_HOST_Init+0x44>)
 8008c1c:	f7fe fbb9 	bl	8007392 <USBH_RegisterClass>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c26:	f7f7 ff87 	bl	8000b38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c2a:	4806      	ldr	r0, [pc, #24]	@ (8008c44 <MX_USB_HOST_Init+0x44>)
 8008c2c:	f7fe fc3d 	bl	80074aa <USBH_Start>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c36:	f7f7 ff7f 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c3a:	bf00      	nop
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08008c61 	.word	0x08008c61
 8008c44:	200001e8 	.word	0x200001e8
 8008c48:	2000000c 	.word	0x2000000c

08008c4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c50:	4802      	ldr	r0, [pc, #8]	@ (8008c5c <MX_USB_HOST_Process+0x10>)
 8008c52:	f7fe fc3b 	bl	80074cc <USBH_Process>
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200001e8 	.word	0x200001e8

08008c60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d819      	bhi.n	8008ca8 <USBH_UserProcess+0x48>
 8008c74:	a201      	add	r2, pc, #4	@ (adr r2, 8008c7c <USBH_UserProcess+0x1c>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	08008c99 	.word	0x08008c99
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008ca1 	.word	0x08008ca1
 8008c8c:	08008c91 	.word	0x08008c91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c90:	4b09      	ldr	r3, [pc, #36]	@ (8008cb8 <USBH_UserProcess+0x58>)
 8008c92:	2203      	movs	r2, #3
 8008c94:	701a      	strb	r2, [r3, #0]
  break;
 8008c96:	e008      	b.n	8008caa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c98:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <USBH_UserProcess+0x58>)
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	701a      	strb	r2, [r3, #0]
  break;
 8008c9e:	e004      	b.n	8008caa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ca0:	4b05      	ldr	r3, [pc, #20]	@ (8008cb8 <USBH_UserProcess+0x58>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
  break;
 8008ca6:	e000      	b.n	8008caa <USBH_UserProcess+0x4a>

  default:
  break;
 8008ca8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	200005c0 	.word	0x200005c0

08008cbc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	@ 0x28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc4:	f107 0314 	add.w	r3, r7, #20
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	605a      	str	r2, [r3, #4]
 8008cce:	609a      	str	r2, [r3, #8]
 8008cd0:	60da      	str	r2, [r3, #12]
 8008cd2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cdc:	d147      	bne.n	8008d6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	4b25      	ldr	r3, [pc, #148]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce6:	4a24      	ldr	r2, [pc, #144]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008ce8:	f043 0301 	orr.w	r3, r3, #1
 8008cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cee:	4b22      	ldr	r3, [pc, #136]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d08:	f107 0314 	add.w	r3, r7, #20
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	481b      	ldr	r0, [pc, #108]	@ (8008d7c <HAL_HCD_MspInit+0xc0>)
 8008d10:	f7f8 fb7a 	bl	8001408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d22:	2300      	movs	r3, #0
 8008d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d26:	230a      	movs	r3, #10
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d2a:	f107 0314 	add.w	r3, r7, #20
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4812      	ldr	r0, [pc, #72]	@ (8008d7c <HAL_HCD_MspInit+0xc0>)
 8008d32:	f7f8 fb69 	bl	8001408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d36:	4b10      	ldr	r3, [pc, #64]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d40:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d52:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <HAL_HCD_MspInit+0xbc>)
 8008d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2100      	movs	r1, #0
 8008d62:	2043      	movs	r0, #67	@ 0x43
 8008d64:	f7f8 fb19 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d68:	2043      	movs	r0, #67	@ 0x43
 8008d6a:	f7f8 fb32 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d6e:	bf00      	nop
 8008d70:	3728      	adds	r7, #40	@ 0x28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	40020000 	.word	0x40020000

08008d80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe ff73 	bl	8007c7a <USBH_LL_IncTimer>
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe ffab 	bl	8007d06 <USBH_LL_Connect>
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe ffb4 	bl	8007d34 <USBH_LL_Disconnect>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
 8008de0:	4613      	mov	r3, r2
 8008de2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe ff65 	bl	8007cce <USBH_LL_PortEnabled>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe ff65 	bl	8007cea <USBH_LL_PortDisabled>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d12a      	bne.n	8008e90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e3a:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a15      	ldr	r2, [pc, #84]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e46:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e4a:	4b14      	ldr	r3, [pc, #80]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e52:	4b12      	ldr	r3, [pc, #72]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e54:	2208      	movs	r2, #8
 8008e56:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e58:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e64:	4b0d      	ldr	r3, [pc, #52]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e66:	2202      	movs	r2, #2
 8008e68:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e70:	480a      	ldr	r0, [pc, #40]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e72:	f7f8 fc96 	bl	80017a2 <HAL_HCD_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e7c:	f7f7 fe5c 	bl	8000b38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e80:	4806      	ldr	r0, [pc, #24]	@ (8008e9c <USBH_LL_Init+0x74>)
 8008e82:	f7f9 f8f7 	bl	8002074 <HAL_HCD_GetCurrentFrame>
 8008e86:	4603      	mov	r3, r0
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fe fee6 	bl	8007c5c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200005c4 	.word	0x200005c4

08008ea0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f9 f864 	bl	8001f84 <HAL_HCD_Start>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f95e 	bl	8009184 <USBH_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7f9 f86c 	bl	8001fca <HAL_HCD_Stop>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f943 	bl	8009184 <USBH_Get_USB_Status>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f9 f8b6 	bl	8002090 <HAL_HCD_GetCurrentSpeed>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d00c      	beq.n	8008f44 <USBH_LL_GetSpeed+0x38>
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d80d      	bhi.n	8008f4a <USBH_LL_GetSpeed+0x3e>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <USBH_LL_GetSpeed+0x2c>
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d003      	beq.n	8008f3e <USBH_LL_GetSpeed+0x32>
 8008f36:	e008      	b.n	8008f4a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3c:	e008      	b.n	8008f50 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]
    break;
 8008f42:	e005      	b.n	8008f50 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73fb      	strb	r3, [r7, #15]
    break;
 8008f48:	e002      	b.n	8008f50 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4e:	bf00      	nop
  }
  return  speed;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 f847 	bl	8002004 <HAL_HCD_ResetPort>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f901 	bl	8009184 <USBH_Get_USB_Status>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f9 f84f 	bl	800204a <HAL_HCD_HC_GetXferCount>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fb6:	b590      	push	{r4, r7, lr}
 8008fb8:	b089      	sub	sp, #36	@ 0x24
 8008fba:	af04      	add	r7, sp, #16
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	70fb      	strb	r3, [r7, #3]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70bb      	strb	r3, [r7, #2]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008fde:	787c      	ldrb	r4, [r7, #1]
 8008fe0:	78ba      	ldrb	r2, [r7, #2]
 8008fe2:	78f9      	ldrb	r1, [r7, #3]
 8008fe4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008fe6:	9302      	str	r3, [sp, #8]
 8008fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	f7f8 fc3b 	bl	8001870 <HAL_HCD_HC_Init>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f8bf 	bl	8009184 <USBH_Get_USB_Status>
 8009006:	4603      	mov	r3, r0
 8009008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900a:	7bbb      	ldrb	r3, [r7, #14]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	bd90      	pop	{r4, r7, pc}

08009014 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7f8 fcd4 	bl	80019e0 <HAL_HCD_HC_Halt>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f8a0 	bl	8009184 <USBH_Get_USB_Status>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009052:	b590      	push	{r4, r7, lr}
 8009054:	b089      	sub	sp, #36	@ 0x24
 8009056:	af04      	add	r7, sp, #16
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	461a      	mov	r2, r3
 8009060:	4603      	mov	r3, r0
 8009062:	70fb      	strb	r3, [r7, #3]
 8009064:	460b      	mov	r3, r1
 8009066:	70bb      	strb	r3, [r7, #2]
 8009068:	4613      	mov	r3, r2
 800906a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800907a:	787c      	ldrb	r4, [r7, #1]
 800907c:	78ba      	ldrb	r2, [r7, #2]
 800907e:	78f9      	ldrb	r1, [r7, #3]
 8009080:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	4623      	mov	r3, r4
 8009096:	f7f8 fcc7 	bl	8001a28 <HAL_HCD_HC_SubmitRequest>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f86f 	bl	8009184 <USBH_Get_USB_Status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}

080090b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f8 ffa8 	bl	8002020 <HAL_HCD_HC_GetURBState>
 80090d0:	4603      	mov	r3, r0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d103      	bne.n	80090f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f872 	bl	80091dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80090f8:	20c8      	movs	r0, #200	@ 0xc8
 80090fa:	f7f8 f84f 	bl	800119c <HAL_Delay>
  return USBH_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	70fb      	strb	r3, [r7, #3]
 8009114:	4613      	mov	r3, r2
 8009116:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800911e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	3317      	adds	r3, #23
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	4613      	mov	r3, r2
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	333c      	adds	r3, #60	@ 0x3c
 8009146:	78ba      	ldrb	r2, [r7, #2]
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	e009      	b.n	8009160 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	4613      	mov	r3, r2
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	333d      	adds	r3, #61	@ 0x3d
 800915c:	78ba      	ldrb	r2, [r7, #2]
 800915e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7f8 f810 	bl	800119c <HAL_Delay>
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	2b03      	cmp	r3, #3
 8009196:	d817      	bhi.n	80091c8 <USBH_Get_USB_Status+0x44>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <USBH_Get_USB_Status+0x1c>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	080091b7 	.word	0x080091b7
 80091a8:	080091bd 	.word	0x080091bd
 80091ac:	080091c3 	.word	0x080091c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
    break;
 80091b4:	e00b      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ba:	e008      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
    break;
 80091c0:	e005      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80091c2:	2302      	movs	r3, #2
 80091c4:	73fb      	strb	r3, [r7, #15]
    break;
 80091c6:	e002      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80091c8:	2302      	movs	r3, #2
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	bf00      	nop
  }
  return usb_status;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
 80091f4:	e001      	b.n	80091fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80091f6:	2301      	movs	r3, #1
 80091f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	461a      	mov	r2, r3
 80091fe:	2101      	movs	r1, #1
 8009200:	4803      	ldr	r0, [pc, #12]	@ (8009210 <MX_DriverVbusFS+0x34>)
 8009202:	f7f8 fab5 	bl	8001770 <HAL_GPIO_WritePin>
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40020800 	.word	0x40020800

08009214 <malloc>:
 8009214:	4b02      	ldr	r3, [pc, #8]	@ (8009220 <malloc+0xc>)
 8009216:	4601      	mov	r1, r0
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f000 b82d 	b.w	8009278 <_malloc_r>
 800921e:	bf00      	nop
 8009220:	20000038 	.word	0x20000038

08009224 <free>:
 8009224:	4b02      	ldr	r3, [pc, #8]	@ (8009230 <free+0xc>)
 8009226:	4601      	mov	r1, r0
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	f000 ba29 	b.w	8009680 <_free_r>
 800922e:	bf00      	nop
 8009230:	20000038 	.word	0x20000038

08009234 <sbrk_aligned>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4e0f      	ldr	r6, [pc, #60]	@ (8009274 <sbrk_aligned+0x40>)
 8009238:	460c      	mov	r4, r1
 800923a:	6831      	ldr	r1, [r6, #0]
 800923c:	4605      	mov	r5, r0
 800923e:	b911      	cbnz	r1, 8009246 <sbrk_aligned+0x12>
 8009240:	f000 f9e0 	bl	8009604 <_sbrk_r>
 8009244:	6030      	str	r0, [r6, #0]
 8009246:	4621      	mov	r1, r4
 8009248:	4628      	mov	r0, r5
 800924a:	f000 f9db 	bl	8009604 <_sbrk_r>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d103      	bne.n	800925a <sbrk_aligned+0x26>
 8009252:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009256:	4620      	mov	r0, r4
 8009258:	bd70      	pop	{r4, r5, r6, pc}
 800925a:	1cc4      	adds	r4, r0, #3
 800925c:	f024 0403 	bic.w	r4, r4, #3
 8009260:	42a0      	cmp	r0, r4
 8009262:	d0f8      	beq.n	8009256 <sbrk_aligned+0x22>
 8009264:	1a21      	subs	r1, r4, r0
 8009266:	4628      	mov	r0, r5
 8009268:	f000 f9cc 	bl	8009604 <_sbrk_r>
 800926c:	3001      	adds	r0, #1
 800926e:	d1f2      	bne.n	8009256 <sbrk_aligned+0x22>
 8009270:	e7ef      	b.n	8009252 <sbrk_aligned+0x1e>
 8009272:	bf00      	nop
 8009274:	200009a4 	.word	0x200009a4

08009278 <_malloc_r>:
 8009278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800927c:	1ccd      	adds	r5, r1, #3
 800927e:	f025 0503 	bic.w	r5, r5, #3
 8009282:	3508      	adds	r5, #8
 8009284:	2d0c      	cmp	r5, #12
 8009286:	bf38      	it	cc
 8009288:	250c      	movcc	r5, #12
 800928a:	2d00      	cmp	r5, #0
 800928c:	4606      	mov	r6, r0
 800928e:	db01      	blt.n	8009294 <_malloc_r+0x1c>
 8009290:	42a9      	cmp	r1, r5
 8009292:	d904      	bls.n	800929e <_malloc_r+0x26>
 8009294:	230c      	movs	r3, #12
 8009296:	6033      	str	r3, [r6, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009374 <_malloc_r+0xfc>
 80092a2:	f000 f869 	bl	8009378 <__malloc_lock>
 80092a6:	f8d8 3000 	ldr.w	r3, [r8]
 80092aa:	461c      	mov	r4, r3
 80092ac:	bb44      	cbnz	r4, 8009300 <_malloc_r+0x88>
 80092ae:	4629      	mov	r1, r5
 80092b0:	4630      	mov	r0, r6
 80092b2:	f7ff ffbf 	bl	8009234 <sbrk_aligned>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	4604      	mov	r4, r0
 80092ba:	d158      	bne.n	800936e <_malloc_r+0xf6>
 80092bc:	f8d8 4000 	ldr.w	r4, [r8]
 80092c0:	4627      	mov	r7, r4
 80092c2:	2f00      	cmp	r7, #0
 80092c4:	d143      	bne.n	800934e <_malloc_r+0xd6>
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	d04b      	beq.n	8009362 <_malloc_r+0xea>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	4639      	mov	r1, r7
 80092ce:	4630      	mov	r0, r6
 80092d0:	eb04 0903 	add.w	r9, r4, r3
 80092d4:	f000 f996 	bl	8009604 <_sbrk_r>
 80092d8:	4581      	cmp	r9, r0
 80092da:	d142      	bne.n	8009362 <_malloc_r+0xea>
 80092dc:	6821      	ldr	r1, [r4, #0]
 80092de:	1a6d      	subs	r5, r5, r1
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff ffa6 	bl	8009234 <sbrk_aligned>
 80092e8:	3001      	adds	r0, #1
 80092ea:	d03a      	beq.n	8009362 <_malloc_r+0xea>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	442b      	add	r3, r5
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	f8d8 3000 	ldr.w	r3, [r8]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	bb62      	cbnz	r2, 8009354 <_malloc_r+0xdc>
 80092fa:	f8c8 7000 	str.w	r7, [r8]
 80092fe:	e00f      	b.n	8009320 <_malloc_r+0xa8>
 8009300:	6822      	ldr	r2, [r4, #0]
 8009302:	1b52      	subs	r2, r2, r5
 8009304:	d420      	bmi.n	8009348 <_malloc_r+0xd0>
 8009306:	2a0b      	cmp	r2, #11
 8009308:	d917      	bls.n	800933a <_malloc_r+0xc2>
 800930a:	1961      	adds	r1, r4, r5
 800930c:	42a3      	cmp	r3, r4
 800930e:	6025      	str	r5, [r4, #0]
 8009310:	bf18      	it	ne
 8009312:	6059      	strne	r1, [r3, #4]
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	bf08      	it	eq
 8009318:	f8c8 1000 	streq.w	r1, [r8]
 800931c:	5162      	str	r2, [r4, r5]
 800931e:	604b      	str	r3, [r1, #4]
 8009320:	4630      	mov	r0, r6
 8009322:	f000 f82f 	bl	8009384 <__malloc_unlock>
 8009326:	f104 000b 	add.w	r0, r4, #11
 800932a:	1d23      	adds	r3, r4, #4
 800932c:	f020 0007 	bic.w	r0, r0, #7
 8009330:	1ac2      	subs	r2, r0, r3
 8009332:	bf1c      	itt	ne
 8009334:	1a1b      	subne	r3, r3, r0
 8009336:	50a3      	strne	r3, [r4, r2]
 8009338:	e7af      	b.n	800929a <_malloc_r+0x22>
 800933a:	6862      	ldr	r2, [r4, #4]
 800933c:	42a3      	cmp	r3, r4
 800933e:	bf0c      	ite	eq
 8009340:	f8c8 2000 	streq.w	r2, [r8]
 8009344:	605a      	strne	r2, [r3, #4]
 8009346:	e7eb      	b.n	8009320 <_malloc_r+0xa8>
 8009348:	4623      	mov	r3, r4
 800934a:	6864      	ldr	r4, [r4, #4]
 800934c:	e7ae      	b.n	80092ac <_malloc_r+0x34>
 800934e:	463c      	mov	r4, r7
 8009350:	687f      	ldr	r7, [r7, #4]
 8009352:	e7b6      	b.n	80092c2 <_malloc_r+0x4a>
 8009354:	461a      	mov	r2, r3
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	42a3      	cmp	r3, r4
 800935a:	d1fb      	bne.n	8009354 <_malloc_r+0xdc>
 800935c:	2300      	movs	r3, #0
 800935e:	6053      	str	r3, [r2, #4]
 8009360:	e7de      	b.n	8009320 <_malloc_r+0xa8>
 8009362:	230c      	movs	r3, #12
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	4630      	mov	r0, r6
 8009368:	f000 f80c 	bl	8009384 <__malloc_unlock>
 800936c:	e794      	b.n	8009298 <_malloc_r+0x20>
 800936e:	6005      	str	r5, [r0, #0]
 8009370:	e7d6      	b.n	8009320 <_malloc_r+0xa8>
 8009372:	bf00      	nop
 8009374:	200009a8 	.word	0x200009a8

08009378 <__malloc_lock>:
 8009378:	4801      	ldr	r0, [pc, #4]	@ (8009380 <__malloc_lock+0x8>)
 800937a:	f000 b97e 	b.w	800967a <__retarget_lock_acquire_recursive>
 800937e:	bf00      	nop
 8009380:	20000ae8 	.word	0x20000ae8

08009384 <__malloc_unlock>:
 8009384:	4801      	ldr	r0, [pc, #4]	@ (800938c <__malloc_unlock+0x8>)
 8009386:	f000 b979 	b.w	800967c <__retarget_lock_release_recursive>
 800938a:	bf00      	nop
 800938c:	20000ae8 	.word	0x20000ae8

08009390 <std>:
 8009390:	2300      	movs	r3, #0
 8009392:	b510      	push	{r4, lr}
 8009394:	4604      	mov	r4, r0
 8009396:	e9c0 3300 	strd	r3, r3, [r0]
 800939a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800939e:	6083      	str	r3, [r0, #8]
 80093a0:	8181      	strh	r1, [r0, #12]
 80093a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80093a4:	81c2      	strh	r2, [r0, #14]
 80093a6:	6183      	str	r3, [r0, #24]
 80093a8:	4619      	mov	r1, r3
 80093aa:	2208      	movs	r2, #8
 80093ac:	305c      	adds	r0, #92	@ 0x5c
 80093ae:	f000 f921 	bl	80095f4 <memset>
 80093b2:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <std+0x58>)
 80093b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <std+0x5c>)
 80093b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <std+0x60>)
 80093bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093be:	4b0d      	ldr	r3, [pc, #52]	@ (80093f4 <std+0x64>)
 80093c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80093c2:	4b0d      	ldr	r3, [pc, #52]	@ (80093f8 <std+0x68>)
 80093c4:	6224      	str	r4, [r4, #32]
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d006      	beq.n	80093d8 <std+0x48>
 80093ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093ce:	4294      	cmp	r4, r2
 80093d0:	d002      	beq.n	80093d8 <std+0x48>
 80093d2:	33d0      	adds	r3, #208	@ 0xd0
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d105      	bne.n	80093e4 <std+0x54>
 80093d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e0:	f000 b94a 	b.w	8009678 <__retarget_lock_init_recursive>
 80093e4:	bd10      	pop	{r4, pc}
 80093e6:	bf00      	nop
 80093e8:	08009e09 	.word	0x08009e09
 80093ec:	08009e2b 	.word	0x08009e2b
 80093f0:	08009e63 	.word	0x08009e63
 80093f4:	08009e87 	.word	0x08009e87
 80093f8:	200009ac 	.word	0x200009ac

080093fc <stdio_exit_handler>:
 80093fc:	4a02      	ldr	r2, [pc, #8]	@ (8009408 <stdio_exit_handler+0xc>)
 80093fe:	4903      	ldr	r1, [pc, #12]	@ (800940c <stdio_exit_handler+0x10>)
 8009400:	4803      	ldr	r0, [pc, #12]	@ (8009410 <stdio_exit_handler+0x14>)
 8009402:	f000 b869 	b.w	80094d8 <_fwalk_sglue>
 8009406:	bf00      	nop
 8009408:	2000002c 	.word	0x2000002c
 800940c:	08009db9 	.word	0x08009db9
 8009410:	2000003c 	.word	0x2000003c

08009414 <cleanup_stdio>:
 8009414:	6841      	ldr	r1, [r0, #4]
 8009416:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <cleanup_stdio+0x34>)
 8009418:	4299      	cmp	r1, r3
 800941a:	b510      	push	{r4, lr}
 800941c:	4604      	mov	r4, r0
 800941e:	d001      	beq.n	8009424 <cleanup_stdio+0x10>
 8009420:	f000 fcca 	bl	8009db8 <_fflush_r>
 8009424:	68a1      	ldr	r1, [r4, #8]
 8009426:	4b09      	ldr	r3, [pc, #36]	@ (800944c <cleanup_stdio+0x38>)
 8009428:	4299      	cmp	r1, r3
 800942a:	d002      	beq.n	8009432 <cleanup_stdio+0x1e>
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fcc3 	bl	8009db8 <_fflush_r>
 8009432:	68e1      	ldr	r1, [r4, #12]
 8009434:	4b06      	ldr	r3, [pc, #24]	@ (8009450 <cleanup_stdio+0x3c>)
 8009436:	4299      	cmp	r1, r3
 8009438:	d004      	beq.n	8009444 <cleanup_stdio+0x30>
 800943a:	4620      	mov	r0, r4
 800943c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009440:	f000 bcba 	b.w	8009db8 <_fflush_r>
 8009444:	bd10      	pop	{r4, pc}
 8009446:	bf00      	nop
 8009448:	200009ac 	.word	0x200009ac
 800944c:	20000a14 	.word	0x20000a14
 8009450:	20000a7c 	.word	0x20000a7c

08009454 <global_stdio_init.part.0>:
 8009454:	b510      	push	{r4, lr}
 8009456:	4b0b      	ldr	r3, [pc, #44]	@ (8009484 <global_stdio_init.part.0+0x30>)
 8009458:	4c0b      	ldr	r4, [pc, #44]	@ (8009488 <global_stdio_init.part.0+0x34>)
 800945a:	4a0c      	ldr	r2, [pc, #48]	@ (800948c <global_stdio_init.part.0+0x38>)
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	4620      	mov	r0, r4
 8009460:	2200      	movs	r2, #0
 8009462:	2104      	movs	r1, #4
 8009464:	f7ff ff94 	bl	8009390 <std>
 8009468:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800946c:	2201      	movs	r2, #1
 800946e:	2109      	movs	r1, #9
 8009470:	f7ff ff8e 	bl	8009390 <std>
 8009474:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009478:	2202      	movs	r2, #2
 800947a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800947e:	2112      	movs	r1, #18
 8009480:	f7ff bf86 	b.w	8009390 <std>
 8009484:	20000ae4 	.word	0x20000ae4
 8009488:	200009ac 	.word	0x200009ac
 800948c:	080093fd 	.word	0x080093fd

08009490 <__sfp_lock_acquire>:
 8009490:	4801      	ldr	r0, [pc, #4]	@ (8009498 <__sfp_lock_acquire+0x8>)
 8009492:	f000 b8f2 	b.w	800967a <__retarget_lock_acquire_recursive>
 8009496:	bf00      	nop
 8009498:	20000ae9 	.word	0x20000ae9

0800949c <__sfp_lock_release>:
 800949c:	4801      	ldr	r0, [pc, #4]	@ (80094a4 <__sfp_lock_release+0x8>)
 800949e:	f000 b8ed 	b.w	800967c <__retarget_lock_release_recursive>
 80094a2:	bf00      	nop
 80094a4:	20000ae9 	.word	0x20000ae9

080094a8 <__sinit>:
 80094a8:	b510      	push	{r4, lr}
 80094aa:	4604      	mov	r4, r0
 80094ac:	f7ff fff0 	bl	8009490 <__sfp_lock_acquire>
 80094b0:	6a23      	ldr	r3, [r4, #32]
 80094b2:	b11b      	cbz	r3, 80094bc <__sinit+0x14>
 80094b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b8:	f7ff bff0 	b.w	800949c <__sfp_lock_release>
 80094bc:	4b04      	ldr	r3, [pc, #16]	@ (80094d0 <__sinit+0x28>)
 80094be:	6223      	str	r3, [r4, #32]
 80094c0:	4b04      	ldr	r3, [pc, #16]	@ (80094d4 <__sinit+0x2c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1f5      	bne.n	80094b4 <__sinit+0xc>
 80094c8:	f7ff ffc4 	bl	8009454 <global_stdio_init.part.0>
 80094cc:	e7f2      	b.n	80094b4 <__sinit+0xc>
 80094ce:	bf00      	nop
 80094d0:	08009415 	.word	0x08009415
 80094d4:	20000ae4 	.word	0x20000ae4

080094d8 <_fwalk_sglue>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	4607      	mov	r7, r0
 80094de:	4688      	mov	r8, r1
 80094e0:	4614      	mov	r4, r2
 80094e2:	2600      	movs	r6, #0
 80094e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094e8:	f1b9 0901 	subs.w	r9, r9, #1
 80094ec:	d505      	bpl.n	80094fa <_fwalk_sglue+0x22>
 80094ee:	6824      	ldr	r4, [r4, #0]
 80094f0:	2c00      	cmp	r4, #0
 80094f2:	d1f7      	bne.n	80094e4 <_fwalk_sglue+0xc>
 80094f4:	4630      	mov	r0, r6
 80094f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d907      	bls.n	8009510 <_fwalk_sglue+0x38>
 8009500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009504:	3301      	adds	r3, #1
 8009506:	d003      	beq.n	8009510 <_fwalk_sglue+0x38>
 8009508:	4629      	mov	r1, r5
 800950a:	4638      	mov	r0, r7
 800950c:	47c0      	blx	r8
 800950e:	4306      	orrs	r6, r0
 8009510:	3568      	adds	r5, #104	@ 0x68
 8009512:	e7e9      	b.n	80094e8 <_fwalk_sglue+0x10>

08009514 <iprintf>:
 8009514:	b40f      	push	{r0, r1, r2, r3}
 8009516:	b507      	push	{r0, r1, r2, lr}
 8009518:	4906      	ldr	r1, [pc, #24]	@ (8009534 <iprintf+0x20>)
 800951a:	ab04      	add	r3, sp, #16
 800951c:	6808      	ldr	r0, [r1, #0]
 800951e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009522:	6881      	ldr	r1, [r0, #8]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	f000 f91f 	bl	8009768 <_vfiprintf_r>
 800952a:	b003      	add	sp, #12
 800952c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009530:	b004      	add	sp, #16
 8009532:	4770      	bx	lr
 8009534:	20000038 	.word	0x20000038

08009538 <_puts_r>:
 8009538:	6a03      	ldr	r3, [r0, #32]
 800953a:	b570      	push	{r4, r5, r6, lr}
 800953c:	6884      	ldr	r4, [r0, #8]
 800953e:	4605      	mov	r5, r0
 8009540:	460e      	mov	r6, r1
 8009542:	b90b      	cbnz	r3, 8009548 <_puts_r+0x10>
 8009544:	f7ff ffb0 	bl	80094a8 <__sinit>
 8009548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800954a:	07db      	lsls	r3, r3, #31
 800954c:	d405      	bmi.n	800955a <_puts_r+0x22>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	0598      	lsls	r0, r3, #22
 8009552:	d402      	bmi.n	800955a <_puts_r+0x22>
 8009554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009556:	f000 f890 	bl	800967a <__retarget_lock_acquire_recursive>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	0719      	lsls	r1, r3, #28
 800955e:	d502      	bpl.n	8009566 <_puts_r+0x2e>
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d135      	bne.n	80095d2 <_puts_r+0x9a>
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f000 fccf 	bl	8009f0c <__swsetup_r>
 800956e:	b380      	cbz	r0, 80095d2 <_puts_r+0x9a>
 8009570:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009576:	07da      	lsls	r2, r3, #31
 8009578:	d405      	bmi.n	8009586 <_puts_r+0x4e>
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	059b      	lsls	r3, r3, #22
 800957e:	d402      	bmi.n	8009586 <_puts_r+0x4e>
 8009580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009582:	f000 f87b 	bl	800967c <__retarget_lock_release_recursive>
 8009586:	4628      	mov	r0, r5
 8009588:	bd70      	pop	{r4, r5, r6, pc}
 800958a:	2b00      	cmp	r3, #0
 800958c:	da04      	bge.n	8009598 <_puts_r+0x60>
 800958e:	69a2      	ldr	r2, [r4, #24]
 8009590:	429a      	cmp	r2, r3
 8009592:	dc17      	bgt.n	80095c4 <_puts_r+0x8c>
 8009594:	290a      	cmp	r1, #10
 8009596:	d015      	beq.n	80095c4 <_puts_r+0x8c>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	7019      	strb	r1, [r3, #0]
 80095a0:	68a3      	ldr	r3, [r4, #8]
 80095a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095a6:	3b01      	subs	r3, #1
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	2900      	cmp	r1, #0
 80095ac:	d1ed      	bne.n	800958a <_puts_r+0x52>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	da11      	bge.n	80095d6 <_puts_r+0x9e>
 80095b2:	4622      	mov	r2, r4
 80095b4:	210a      	movs	r1, #10
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 fc69 	bl	8009e8e <__swbuf_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d0d7      	beq.n	8009570 <_puts_r+0x38>
 80095c0:	250a      	movs	r5, #10
 80095c2:	e7d7      	b.n	8009574 <_puts_r+0x3c>
 80095c4:	4622      	mov	r2, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 fc61 	bl	8009e8e <__swbuf_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d1e7      	bne.n	80095a0 <_puts_r+0x68>
 80095d0:	e7ce      	b.n	8009570 <_puts_r+0x38>
 80095d2:	3e01      	subs	r6, #1
 80095d4:	e7e4      	b.n	80095a0 <_puts_r+0x68>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	6022      	str	r2, [r4, #0]
 80095dc:	220a      	movs	r2, #10
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	e7ee      	b.n	80095c0 <_puts_r+0x88>
	...

080095e4 <puts>:
 80095e4:	4b02      	ldr	r3, [pc, #8]	@ (80095f0 <puts+0xc>)
 80095e6:	4601      	mov	r1, r0
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f7ff bfa5 	b.w	8009538 <_puts_r>
 80095ee:	bf00      	nop
 80095f0:	20000038 	.word	0x20000038

080095f4 <memset>:
 80095f4:	4402      	add	r2, r0
 80095f6:	4603      	mov	r3, r0
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d100      	bne.n	80095fe <memset+0xa>
 80095fc:	4770      	bx	lr
 80095fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009602:	e7f9      	b.n	80095f8 <memset+0x4>

08009604 <_sbrk_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d06      	ldr	r5, [pc, #24]	@ (8009620 <_sbrk_r+0x1c>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	602b      	str	r3, [r5, #0]
 8009610:	f7f7 fce0 	bl	8000fd4 <_sbrk>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_sbrk_r+0x1a>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_sbrk_r+0x1a>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	20000aec 	.word	0x20000aec

08009624 <__errno>:
 8009624:	4b01      	ldr	r3, [pc, #4]	@ (800962c <__errno+0x8>)
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20000038 	.word	0x20000038

08009630 <__libc_init_array>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	4d0d      	ldr	r5, [pc, #52]	@ (8009668 <__libc_init_array+0x38>)
 8009634:	4c0d      	ldr	r4, [pc, #52]	@ (800966c <__libc_init_array+0x3c>)
 8009636:	1b64      	subs	r4, r4, r5
 8009638:	10a4      	asrs	r4, r4, #2
 800963a:	2600      	movs	r6, #0
 800963c:	42a6      	cmp	r6, r4
 800963e:	d109      	bne.n	8009654 <__libc_init_array+0x24>
 8009640:	4d0b      	ldr	r5, [pc, #44]	@ (8009670 <__libc_init_array+0x40>)
 8009642:	4c0c      	ldr	r4, [pc, #48]	@ (8009674 <__libc_init_array+0x44>)
 8009644:	f000 fd82 	bl	800a14c <_init>
 8009648:	1b64      	subs	r4, r4, r5
 800964a:	10a4      	asrs	r4, r4, #2
 800964c:	2600      	movs	r6, #0
 800964e:	42a6      	cmp	r6, r4
 8009650:	d105      	bne.n	800965e <__libc_init_array+0x2e>
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	f855 3b04 	ldr.w	r3, [r5], #4
 8009658:	4798      	blx	r3
 800965a:	3601      	adds	r6, #1
 800965c:	e7ee      	b.n	800963c <__libc_init_array+0xc>
 800965e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009662:	4798      	blx	r3
 8009664:	3601      	adds	r6, #1
 8009666:	e7f2      	b.n	800964e <__libc_init_array+0x1e>
 8009668:	0800a1d4 	.word	0x0800a1d4
 800966c:	0800a1d4 	.word	0x0800a1d4
 8009670:	0800a1d4 	.word	0x0800a1d4
 8009674:	0800a1d8 	.word	0x0800a1d8

08009678 <__retarget_lock_init_recursive>:
 8009678:	4770      	bx	lr

0800967a <__retarget_lock_acquire_recursive>:
 800967a:	4770      	bx	lr

0800967c <__retarget_lock_release_recursive>:
 800967c:	4770      	bx	lr
	...

08009680 <_free_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4605      	mov	r5, r0
 8009684:	2900      	cmp	r1, #0
 8009686:	d041      	beq.n	800970c <_free_r+0x8c>
 8009688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800968c:	1f0c      	subs	r4, r1, #4
 800968e:	2b00      	cmp	r3, #0
 8009690:	bfb8      	it	lt
 8009692:	18e4      	addlt	r4, r4, r3
 8009694:	f7ff fe70 	bl	8009378 <__malloc_lock>
 8009698:	4a1d      	ldr	r2, [pc, #116]	@ (8009710 <_free_r+0x90>)
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	b933      	cbnz	r3, 80096ac <_free_r+0x2c>
 800969e:	6063      	str	r3, [r4, #4]
 80096a0:	6014      	str	r4, [r2, #0]
 80096a2:	4628      	mov	r0, r5
 80096a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096a8:	f7ff be6c 	b.w	8009384 <__malloc_unlock>
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	d908      	bls.n	80096c2 <_free_r+0x42>
 80096b0:	6820      	ldr	r0, [r4, #0]
 80096b2:	1821      	adds	r1, r4, r0
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf01      	itttt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	1809      	addeq	r1, r1, r0
 80096be:	6021      	streq	r1, [r4, #0]
 80096c0:	e7ed      	b.n	800969e <_free_r+0x1e>
 80096c2:	461a      	mov	r2, r3
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	b10b      	cbz	r3, 80096cc <_free_r+0x4c>
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d9fa      	bls.n	80096c2 <_free_r+0x42>
 80096cc:	6811      	ldr	r1, [r2, #0]
 80096ce:	1850      	adds	r0, r2, r1
 80096d0:	42a0      	cmp	r0, r4
 80096d2:	d10b      	bne.n	80096ec <_free_r+0x6c>
 80096d4:	6820      	ldr	r0, [r4, #0]
 80096d6:	4401      	add	r1, r0
 80096d8:	1850      	adds	r0, r2, r1
 80096da:	4283      	cmp	r3, r0
 80096dc:	6011      	str	r1, [r2, #0]
 80096de:	d1e0      	bne.n	80096a2 <_free_r+0x22>
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	6053      	str	r3, [r2, #4]
 80096e6:	4408      	add	r0, r1
 80096e8:	6010      	str	r0, [r2, #0]
 80096ea:	e7da      	b.n	80096a2 <_free_r+0x22>
 80096ec:	d902      	bls.n	80096f4 <_free_r+0x74>
 80096ee:	230c      	movs	r3, #12
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	e7d6      	b.n	80096a2 <_free_r+0x22>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	1821      	adds	r1, r4, r0
 80096f8:	428b      	cmp	r3, r1
 80096fa:	bf04      	itt	eq
 80096fc:	6819      	ldreq	r1, [r3, #0]
 80096fe:	685b      	ldreq	r3, [r3, #4]
 8009700:	6063      	str	r3, [r4, #4]
 8009702:	bf04      	itt	eq
 8009704:	1809      	addeq	r1, r1, r0
 8009706:	6021      	streq	r1, [r4, #0]
 8009708:	6054      	str	r4, [r2, #4]
 800970a:	e7ca      	b.n	80096a2 <_free_r+0x22>
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	200009a8 	.word	0x200009a8

08009714 <__sfputc_r>:
 8009714:	6893      	ldr	r3, [r2, #8]
 8009716:	3b01      	subs	r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	b410      	push	{r4}
 800971c:	6093      	str	r3, [r2, #8]
 800971e:	da08      	bge.n	8009732 <__sfputc_r+0x1e>
 8009720:	6994      	ldr	r4, [r2, #24]
 8009722:	42a3      	cmp	r3, r4
 8009724:	db01      	blt.n	800972a <__sfputc_r+0x16>
 8009726:	290a      	cmp	r1, #10
 8009728:	d103      	bne.n	8009732 <__sfputc_r+0x1e>
 800972a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972e:	f000 bbae 	b.w	8009e8e <__swbuf_r>
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	1c58      	adds	r0, r3, #1
 8009736:	6010      	str	r0, [r2, #0]
 8009738:	7019      	strb	r1, [r3, #0]
 800973a:	4608      	mov	r0, r1
 800973c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009740:	4770      	bx	lr

08009742 <__sfputs_r>:
 8009742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009744:	4606      	mov	r6, r0
 8009746:	460f      	mov	r7, r1
 8009748:	4614      	mov	r4, r2
 800974a:	18d5      	adds	r5, r2, r3
 800974c:	42ac      	cmp	r4, r5
 800974e:	d101      	bne.n	8009754 <__sfputs_r+0x12>
 8009750:	2000      	movs	r0, #0
 8009752:	e007      	b.n	8009764 <__sfputs_r+0x22>
 8009754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009758:	463a      	mov	r2, r7
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ffda 	bl	8009714 <__sfputc_r>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d1f3      	bne.n	800974c <__sfputs_r+0xa>
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009768 <_vfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	460d      	mov	r5, r1
 800976e:	b09d      	sub	sp, #116	@ 0x74
 8009770:	4614      	mov	r4, r2
 8009772:	4698      	mov	r8, r3
 8009774:	4606      	mov	r6, r0
 8009776:	b118      	cbz	r0, 8009780 <_vfiprintf_r+0x18>
 8009778:	6a03      	ldr	r3, [r0, #32]
 800977a:	b90b      	cbnz	r3, 8009780 <_vfiprintf_r+0x18>
 800977c:	f7ff fe94 	bl	80094a8 <__sinit>
 8009780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009782:	07d9      	lsls	r1, r3, #31
 8009784:	d405      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	059a      	lsls	r2, r3, #22
 800978a:	d402      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 800978c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800978e:	f7ff ff74 	bl	800967a <__retarget_lock_acquire_recursive>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	071b      	lsls	r3, r3, #28
 8009796:	d501      	bpl.n	800979c <_vfiprintf_r+0x34>
 8009798:	692b      	ldr	r3, [r5, #16]
 800979a:	b99b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x5c>
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f000 fbb4 	bl	8009f0c <__swsetup_r>
 80097a4:	b170      	cbz	r0, 80097c4 <_vfiprintf_r+0x5c>
 80097a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097a8:	07dc      	lsls	r4, r3, #31
 80097aa:	d504      	bpl.n	80097b6 <_vfiprintf_r+0x4e>
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097b0:	b01d      	add	sp, #116	@ 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	0598      	lsls	r0, r3, #22
 80097ba:	d4f7      	bmi.n	80097ac <_vfiprintf_r+0x44>
 80097bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097be:	f7ff ff5d 	bl	800967c <__retarget_lock_release_recursive>
 80097c2:	e7f3      	b.n	80097ac <_vfiprintf_r+0x44>
 80097c4:	2300      	movs	r3, #0
 80097c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c8:	2320      	movs	r3, #32
 80097ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d2:	2330      	movs	r3, #48	@ 0x30
 80097d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009984 <_vfiprintf_r+0x21c>
 80097d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097dc:	f04f 0901 	mov.w	r9, #1
 80097e0:	4623      	mov	r3, r4
 80097e2:	469a      	mov	sl, r3
 80097e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e8:	b10a      	cbz	r2, 80097ee <_vfiprintf_r+0x86>
 80097ea:	2a25      	cmp	r2, #37	@ 0x25
 80097ec:	d1f9      	bne.n	80097e2 <_vfiprintf_r+0x7a>
 80097ee:	ebba 0b04 	subs.w	fp, sl, r4
 80097f2:	d00b      	beq.n	800980c <_vfiprintf_r+0xa4>
 80097f4:	465b      	mov	r3, fp
 80097f6:	4622      	mov	r2, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7ff ffa1 	bl	8009742 <__sfputs_r>
 8009800:	3001      	adds	r0, #1
 8009802:	f000 80a7 	beq.w	8009954 <_vfiprintf_r+0x1ec>
 8009806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009808:	445a      	add	r2, fp
 800980a:	9209      	str	r2, [sp, #36]	@ 0x24
 800980c:	f89a 3000 	ldrb.w	r3, [sl]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 809f 	beq.w	8009954 <_vfiprintf_r+0x1ec>
 8009816:	2300      	movs	r3, #0
 8009818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800981c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009820:	f10a 0a01 	add.w	sl, sl, #1
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800982c:	931a      	str	r3, [sp, #104]	@ 0x68
 800982e:	4654      	mov	r4, sl
 8009830:	2205      	movs	r2, #5
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	4853      	ldr	r0, [pc, #332]	@ (8009984 <_vfiprintf_r+0x21c>)
 8009838:	f7f6 fcca 	bl	80001d0 <memchr>
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	b9d8      	cbnz	r0, 8009878 <_vfiprintf_r+0x110>
 8009840:	06d1      	lsls	r1, r2, #27
 8009842:	bf44      	itt	mi
 8009844:	2320      	movmi	r3, #32
 8009846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984a:	0713      	lsls	r3, r2, #28
 800984c:	bf44      	itt	mi
 800984e:	232b      	movmi	r3, #43	@ 0x2b
 8009850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b2a      	cmp	r3, #42	@ 0x2a
 800985a:	d015      	beq.n	8009888 <_vfiprintf_r+0x120>
 800985c:	9a07      	ldr	r2, [sp, #28]
 800985e:	4654      	mov	r4, sl
 8009860:	2000      	movs	r0, #0
 8009862:	f04f 0c0a 	mov.w	ip, #10
 8009866:	4621      	mov	r1, r4
 8009868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800986c:	3b30      	subs	r3, #48	@ 0x30
 800986e:	2b09      	cmp	r3, #9
 8009870:	d94b      	bls.n	800990a <_vfiprintf_r+0x1a2>
 8009872:	b1b0      	cbz	r0, 80098a2 <_vfiprintf_r+0x13a>
 8009874:	9207      	str	r2, [sp, #28]
 8009876:	e014      	b.n	80098a2 <_vfiprintf_r+0x13a>
 8009878:	eba0 0308 	sub.w	r3, r0, r8
 800987c:	fa09 f303 	lsl.w	r3, r9, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	46a2      	mov	sl, r4
 8009886:	e7d2      	b.n	800982e <_vfiprintf_r+0xc6>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	1d19      	adds	r1, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9103      	str	r1, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfbb      	ittet	lt
 8009894:	425b      	neglt	r3, r3
 8009896:	f042 0202 	orrlt.w	r2, r2, #2
 800989a:	9307      	strge	r3, [sp, #28]
 800989c:	9307      	strlt	r3, [sp, #28]
 800989e:	bfb8      	it	lt
 80098a0:	9204      	strlt	r2, [sp, #16]
 80098a2:	7823      	ldrb	r3, [r4, #0]
 80098a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80098a6:	d10a      	bne.n	80098be <_vfiprintf_r+0x156>
 80098a8:	7863      	ldrb	r3, [r4, #1]
 80098aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ac:	d132      	bne.n	8009914 <_vfiprintf_r+0x1ac>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	9203      	str	r2, [sp, #12]
 80098b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098ba:	3402      	adds	r4, #2
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009994 <_vfiprintf_r+0x22c>
 80098c2:	7821      	ldrb	r1, [r4, #0]
 80098c4:	2203      	movs	r2, #3
 80098c6:	4650      	mov	r0, sl
 80098c8:	f7f6 fc82 	bl	80001d0 <memchr>
 80098cc:	b138      	cbz	r0, 80098de <_vfiprintf_r+0x176>
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	eba0 000a 	sub.w	r0, r0, sl
 80098d4:	2240      	movs	r2, #64	@ 0x40
 80098d6:	4082      	lsls	r2, r0
 80098d8:	4313      	orrs	r3, r2
 80098da:	3401      	adds	r4, #1
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e2:	4829      	ldr	r0, [pc, #164]	@ (8009988 <_vfiprintf_r+0x220>)
 80098e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098e8:	2206      	movs	r2, #6
 80098ea:	f7f6 fc71 	bl	80001d0 <memchr>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d03f      	beq.n	8009972 <_vfiprintf_r+0x20a>
 80098f2:	4b26      	ldr	r3, [pc, #152]	@ (800998c <_vfiprintf_r+0x224>)
 80098f4:	bb1b      	cbnz	r3, 800993e <_vfiprintf_r+0x1d6>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	3307      	adds	r3, #7
 80098fa:	f023 0307 	bic.w	r3, r3, #7
 80098fe:	3308      	adds	r3, #8
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009904:	443b      	add	r3, r7
 8009906:	9309      	str	r3, [sp, #36]	@ 0x24
 8009908:	e76a      	b.n	80097e0 <_vfiprintf_r+0x78>
 800990a:	fb0c 3202 	mla	r2, ip, r2, r3
 800990e:	460c      	mov	r4, r1
 8009910:	2001      	movs	r0, #1
 8009912:	e7a8      	b.n	8009866 <_vfiprintf_r+0xfe>
 8009914:	2300      	movs	r3, #0
 8009916:	3401      	adds	r4, #1
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	4619      	mov	r1, r3
 800991c:	f04f 0c0a 	mov.w	ip, #10
 8009920:	4620      	mov	r0, r4
 8009922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009926:	3a30      	subs	r2, #48	@ 0x30
 8009928:	2a09      	cmp	r2, #9
 800992a:	d903      	bls.n	8009934 <_vfiprintf_r+0x1cc>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0c6      	beq.n	80098be <_vfiprintf_r+0x156>
 8009930:	9105      	str	r1, [sp, #20]
 8009932:	e7c4      	b.n	80098be <_vfiprintf_r+0x156>
 8009934:	fb0c 2101 	mla	r1, ip, r1, r2
 8009938:	4604      	mov	r4, r0
 800993a:	2301      	movs	r3, #1
 800993c:	e7f0      	b.n	8009920 <_vfiprintf_r+0x1b8>
 800993e:	ab03      	add	r3, sp, #12
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	462a      	mov	r2, r5
 8009944:	4b12      	ldr	r3, [pc, #72]	@ (8009990 <_vfiprintf_r+0x228>)
 8009946:	a904      	add	r1, sp, #16
 8009948:	4630      	mov	r0, r6
 800994a:	f3af 8000 	nop.w
 800994e:	4607      	mov	r7, r0
 8009950:	1c78      	adds	r0, r7, #1
 8009952:	d1d6      	bne.n	8009902 <_vfiprintf_r+0x19a>
 8009954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009956:	07d9      	lsls	r1, r3, #31
 8009958:	d405      	bmi.n	8009966 <_vfiprintf_r+0x1fe>
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	059a      	lsls	r2, r3, #22
 800995e:	d402      	bmi.n	8009966 <_vfiprintf_r+0x1fe>
 8009960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009962:	f7ff fe8b 	bl	800967c <__retarget_lock_release_recursive>
 8009966:	89ab      	ldrh	r3, [r5, #12]
 8009968:	065b      	lsls	r3, r3, #25
 800996a:	f53f af1f 	bmi.w	80097ac <_vfiprintf_r+0x44>
 800996e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009970:	e71e      	b.n	80097b0 <_vfiprintf_r+0x48>
 8009972:	ab03      	add	r3, sp, #12
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	462a      	mov	r2, r5
 8009978:	4b05      	ldr	r3, [pc, #20]	@ (8009990 <_vfiprintf_r+0x228>)
 800997a:	a904      	add	r1, sp, #16
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f879 	bl	8009a74 <_printf_i>
 8009982:	e7e4      	b.n	800994e <_vfiprintf_r+0x1e6>
 8009984:	0800a198 	.word	0x0800a198
 8009988:	0800a1a2 	.word	0x0800a1a2
 800998c:	00000000 	.word	0x00000000
 8009990:	08009743 	.word	0x08009743
 8009994:	0800a19e 	.word	0x0800a19e

08009998 <_printf_common>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	4616      	mov	r6, r2
 800999e:	4698      	mov	r8, r3
 80099a0:	688a      	ldr	r2, [r1, #8]
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	bfb8      	it	lt
 80099ac:	4613      	movlt	r3, r2
 80099ae:	6033      	str	r3, [r6, #0]
 80099b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099b4:	4607      	mov	r7, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	b10a      	cbz	r2, 80099be <_printf_common+0x26>
 80099ba:	3301      	adds	r3, #1
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	6833      	ldrmi	r3, [r6, #0]
 80099c6:	3302      	addmi	r3, #2
 80099c8:	6033      	strmi	r3, [r6, #0]
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	f015 0506 	ands.w	r5, r5, #6
 80099d0:	d106      	bne.n	80099e0 <_printf_common+0x48>
 80099d2:	f104 0a19 	add.w	sl, r4, #25
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	6832      	ldr	r2, [r6, #0]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dc26      	bgt.n	8009a2e <_printf_common+0x96>
 80099e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	3b00      	subs	r3, #0
 80099e8:	bf18      	it	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	0692      	lsls	r2, r2, #26
 80099ee:	d42b      	bmi.n	8009a48 <_printf_common+0xb0>
 80099f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099f4:	4641      	mov	r1, r8
 80099f6:	4638      	mov	r0, r7
 80099f8:	47c8      	blx	r9
 80099fa:	3001      	adds	r0, #1
 80099fc:	d01e      	beq.n	8009a3c <_printf_common+0xa4>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	6922      	ldr	r2, [r4, #16]
 8009a02:	f003 0306 	and.w	r3, r3, #6
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	bf02      	ittt	eq
 8009a0a:	68e5      	ldreq	r5, [r4, #12]
 8009a0c:	6833      	ldreq	r3, [r6, #0]
 8009a0e:	1aed      	subeq	r5, r5, r3
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	bf0c      	ite	eq
 8009a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a18:	2500      	movne	r5, #0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bfc4      	itt	gt
 8009a1e:	1a9b      	subgt	r3, r3, r2
 8009a20:	18ed      	addgt	r5, r5, r3
 8009a22:	2600      	movs	r6, #0
 8009a24:	341a      	adds	r4, #26
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	d11a      	bne.n	8009a60 <_printf_common+0xc8>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e008      	b.n	8009a40 <_printf_common+0xa8>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4652      	mov	r2, sl
 8009a32:	4641      	mov	r1, r8
 8009a34:	4638      	mov	r0, r7
 8009a36:	47c8      	blx	r9
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d103      	bne.n	8009a44 <_printf_common+0xac>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	3501      	adds	r5, #1
 8009a46:	e7c6      	b.n	80099d6 <_printf_common+0x3e>
 8009a48:	18e1      	adds	r1, r4, r3
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	2030      	movs	r0, #48	@ 0x30
 8009a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a52:	4422      	add	r2, r4
 8009a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	e7c7      	b.n	80099f0 <_printf_common+0x58>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4622      	mov	r2, r4
 8009a64:	4641      	mov	r1, r8
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c8      	blx	r9
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d0e6      	beq.n	8009a3c <_printf_common+0xa4>
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7d9      	b.n	8009a26 <_printf_common+0x8e>
	...

08009a74 <_printf_i>:
 8009a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	7e0f      	ldrb	r7, [r1, #24]
 8009a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a7c:	2f78      	cmp	r7, #120	@ 0x78
 8009a7e:	4691      	mov	r9, r2
 8009a80:	4680      	mov	r8, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	469a      	mov	sl, r3
 8009a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a8a:	d807      	bhi.n	8009a9c <_printf_i+0x28>
 8009a8c:	2f62      	cmp	r7, #98	@ 0x62
 8009a8e:	d80a      	bhi.n	8009aa6 <_printf_i+0x32>
 8009a90:	2f00      	cmp	r7, #0
 8009a92:	f000 80d1 	beq.w	8009c38 <_printf_i+0x1c4>
 8009a96:	2f58      	cmp	r7, #88	@ 0x58
 8009a98:	f000 80b8 	beq.w	8009c0c <_printf_i+0x198>
 8009a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009aa4:	e03a      	b.n	8009b1c <_printf_i+0xa8>
 8009aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009aaa:	2b15      	cmp	r3, #21
 8009aac:	d8f6      	bhi.n	8009a9c <_printf_i+0x28>
 8009aae:	a101      	add	r1, pc, #4	@ (adr r1, 8009ab4 <_printf_i+0x40>)
 8009ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009a9d 	.word	0x08009a9d
 8009ac0:	08009a9d 	.word	0x08009a9d
 8009ac4:	08009a9d 	.word	0x08009a9d
 8009ac8:	08009a9d 	.word	0x08009a9d
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009a9d 	.word	0x08009a9d
 8009ad4:	08009a9d 	.word	0x08009a9d
 8009ad8:	08009a9d 	.word	0x08009a9d
 8009adc:	08009a9d 	.word	0x08009a9d
 8009ae0:	08009c1f 	.word	0x08009c1f
 8009ae4:	08009b4b 	.word	0x08009b4b
 8009ae8:	08009bd9 	.word	0x08009bd9
 8009aec:	08009a9d 	.word	0x08009a9d
 8009af0:	08009a9d 	.word	0x08009a9d
 8009af4:	08009c41 	.word	0x08009c41
 8009af8:	08009a9d 	.word	0x08009a9d
 8009afc:	08009b4b 	.word	0x08009b4b
 8009b00:	08009a9d 	.word	0x08009a9d
 8009b04:	08009a9d 	.word	0x08009a9d
 8009b08:	08009be1 	.word	0x08009be1
 8009b0c:	6833      	ldr	r3, [r6, #0]
 8009b0e:	1d1a      	adds	r2, r3, #4
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6032      	str	r2, [r6, #0]
 8009b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e09c      	b.n	8009c5a <_printf_i+0x1e6>
 8009b20:	6833      	ldr	r3, [r6, #0]
 8009b22:	6820      	ldr	r0, [r4, #0]
 8009b24:	1d19      	adds	r1, r3, #4
 8009b26:	6031      	str	r1, [r6, #0]
 8009b28:	0606      	lsls	r6, r0, #24
 8009b2a:	d501      	bpl.n	8009b30 <_printf_i+0xbc>
 8009b2c:	681d      	ldr	r5, [r3, #0]
 8009b2e:	e003      	b.n	8009b38 <_printf_i+0xc4>
 8009b30:	0645      	lsls	r5, r0, #25
 8009b32:	d5fb      	bpl.n	8009b2c <_printf_i+0xb8>
 8009b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	da03      	bge.n	8009b44 <_printf_i+0xd0>
 8009b3c:	232d      	movs	r3, #45	@ 0x2d
 8009b3e:	426d      	negs	r5, r5
 8009b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b44:	4858      	ldr	r0, [pc, #352]	@ (8009ca8 <_printf_i+0x234>)
 8009b46:	230a      	movs	r3, #10
 8009b48:	e011      	b.n	8009b6e <_printf_i+0xfa>
 8009b4a:	6821      	ldr	r1, [r4, #0]
 8009b4c:	6833      	ldr	r3, [r6, #0]
 8009b4e:	0608      	lsls	r0, r1, #24
 8009b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b54:	d402      	bmi.n	8009b5c <_printf_i+0xe8>
 8009b56:	0649      	lsls	r1, r1, #25
 8009b58:	bf48      	it	mi
 8009b5a:	b2ad      	uxthmi	r5, r5
 8009b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b5e:	4852      	ldr	r0, [pc, #328]	@ (8009ca8 <_printf_i+0x234>)
 8009b60:	6033      	str	r3, [r6, #0]
 8009b62:	bf14      	ite	ne
 8009b64:	230a      	movne	r3, #10
 8009b66:	2308      	moveq	r3, #8
 8009b68:	2100      	movs	r1, #0
 8009b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b6e:	6866      	ldr	r6, [r4, #4]
 8009b70:	60a6      	str	r6, [r4, #8]
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	db05      	blt.n	8009b82 <_printf_i+0x10e>
 8009b76:	6821      	ldr	r1, [r4, #0]
 8009b78:	432e      	orrs	r6, r5
 8009b7a:	f021 0104 	bic.w	r1, r1, #4
 8009b7e:	6021      	str	r1, [r4, #0]
 8009b80:	d04b      	beq.n	8009c1a <_printf_i+0x1a6>
 8009b82:	4616      	mov	r6, r2
 8009b84:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b88:	fb03 5711 	mls	r7, r3, r1, r5
 8009b8c:	5dc7      	ldrb	r7, [r0, r7]
 8009b8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b92:	462f      	mov	r7, r5
 8009b94:	42bb      	cmp	r3, r7
 8009b96:	460d      	mov	r5, r1
 8009b98:	d9f4      	bls.n	8009b84 <_printf_i+0x110>
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d10b      	bne.n	8009bb6 <_printf_i+0x142>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	07df      	lsls	r7, r3, #31
 8009ba2:	d508      	bpl.n	8009bb6 <_printf_i+0x142>
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	6861      	ldr	r1, [r4, #4]
 8009ba8:	4299      	cmp	r1, r3
 8009baa:	bfde      	ittt	le
 8009bac:	2330      	movle	r3, #48	@ 0x30
 8009bae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bb2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009bb6:	1b92      	subs	r2, r2, r6
 8009bb8:	6122      	str	r2, [r4, #16]
 8009bba:	f8cd a000 	str.w	sl, [sp]
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	aa03      	add	r2, sp, #12
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	f7ff fee7 	bl	8009998 <_printf_common>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d14a      	bne.n	8009c64 <_printf_i+0x1f0>
 8009bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bd2:	b004      	add	sp, #16
 8009bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	f043 0320 	orr.w	r3, r3, #32
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	4832      	ldr	r0, [pc, #200]	@ (8009cac <_printf_i+0x238>)
 8009be2:	2778      	movs	r7, #120	@ 0x78
 8009be4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	6831      	ldr	r1, [r6, #0]
 8009bec:	061f      	lsls	r7, r3, #24
 8009bee:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bf2:	d402      	bmi.n	8009bfa <_printf_i+0x186>
 8009bf4:	065f      	lsls	r7, r3, #25
 8009bf6:	bf48      	it	mi
 8009bf8:	b2ad      	uxthmi	r5, r5
 8009bfa:	6031      	str	r1, [r6, #0]
 8009bfc:	07d9      	lsls	r1, r3, #31
 8009bfe:	bf44      	itt	mi
 8009c00:	f043 0320 	orrmi.w	r3, r3, #32
 8009c04:	6023      	strmi	r3, [r4, #0]
 8009c06:	b11d      	cbz	r5, 8009c10 <_printf_i+0x19c>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	e7ad      	b.n	8009b68 <_printf_i+0xf4>
 8009c0c:	4826      	ldr	r0, [pc, #152]	@ (8009ca8 <_printf_i+0x234>)
 8009c0e:	e7e9      	b.n	8009be4 <_printf_i+0x170>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	f023 0320 	bic.w	r3, r3, #32
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	e7f6      	b.n	8009c08 <_printf_i+0x194>
 8009c1a:	4616      	mov	r6, r2
 8009c1c:	e7bd      	b.n	8009b9a <_printf_i+0x126>
 8009c1e:	6833      	ldr	r3, [r6, #0]
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	6961      	ldr	r1, [r4, #20]
 8009c24:	1d18      	adds	r0, r3, #4
 8009c26:	6030      	str	r0, [r6, #0]
 8009c28:	062e      	lsls	r6, r5, #24
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	d501      	bpl.n	8009c32 <_printf_i+0x1be>
 8009c2e:	6019      	str	r1, [r3, #0]
 8009c30:	e002      	b.n	8009c38 <_printf_i+0x1c4>
 8009c32:	0668      	lsls	r0, r5, #25
 8009c34:	d5fb      	bpl.n	8009c2e <_printf_i+0x1ba>
 8009c36:	8019      	strh	r1, [r3, #0]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6123      	str	r3, [r4, #16]
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	e7bc      	b.n	8009bba <_printf_i+0x146>
 8009c40:	6833      	ldr	r3, [r6, #0]
 8009c42:	1d1a      	adds	r2, r3, #4
 8009c44:	6032      	str	r2, [r6, #0]
 8009c46:	681e      	ldr	r6, [r3, #0]
 8009c48:	6862      	ldr	r2, [r4, #4]
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7f6 fabf 	bl	80001d0 <memchr>
 8009c52:	b108      	cbz	r0, 8009c58 <_printf_i+0x1e4>
 8009c54:	1b80      	subs	r0, r0, r6
 8009c56:	6060      	str	r0, [r4, #4]
 8009c58:	6863      	ldr	r3, [r4, #4]
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c62:	e7aa      	b.n	8009bba <_printf_i+0x146>
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	4632      	mov	r2, r6
 8009c68:	4649      	mov	r1, r9
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	47d0      	blx	sl
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d0ad      	beq.n	8009bce <_printf_i+0x15a>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	079b      	lsls	r3, r3, #30
 8009c76:	d413      	bmi.n	8009ca0 <_printf_i+0x22c>
 8009c78:	68e0      	ldr	r0, [r4, #12]
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	4298      	cmp	r0, r3
 8009c7e:	bfb8      	it	lt
 8009c80:	4618      	movlt	r0, r3
 8009c82:	e7a6      	b.n	8009bd2 <_printf_i+0x15e>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4632      	mov	r2, r6
 8009c88:	4649      	mov	r1, r9
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	47d0      	blx	sl
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d09d      	beq.n	8009bce <_printf_i+0x15a>
 8009c92:	3501      	adds	r5, #1
 8009c94:	68e3      	ldr	r3, [r4, #12]
 8009c96:	9903      	ldr	r1, [sp, #12]
 8009c98:	1a5b      	subs	r3, r3, r1
 8009c9a:	42ab      	cmp	r3, r5
 8009c9c:	dcf2      	bgt.n	8009c84 <_printf_i+0x210>
 8009c9e:	e7eb      	b.n	8009c78 <_printf_i+0x204>
 8009ca0:	2500      	movs	r5, #0
 8009ca2:	f104 0619 	add.w	r6, r4, #25
 8009ca6:	e7f5      	b.n	8009c94 <_printf_i+0x220>
 8009ca8:	0800a1a9 	.word	0x0800a1a9
 8009cac:	0800a1ba 	.word	0x0800a1ba

08009cb0 <__sflush_r>:
 8009cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	0716      	lsls	r6, r2, #28
 8009cba:	4605      	mov	r5, r0
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	d454      	bmi.n	8009d6a <__sflush_r+0xba>
 8009cc0:	684b      	ldr	r3, [r1, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	dc02      	bgt.n	8009ccc <__sflush_r+0x1c>
 8009cc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dd48      	ble.n	8009d5e <__sflush_r+0xae>
 8009ccc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	d045      	beq.n	8009d5e <__sflush_r+0xae>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cd8:	682f      	ldr	r7, [r5, #0]
 8009cda:	6a21      	ldr	r1, [r4, #32]
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	d030      	beq.n	8009d42 <__sflush_r+0x92>
 8009ce0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	0759      	lsls	r1, r3, #29
 8009ce6:	d505      	bpl.n	8009cf4 <__sflush_r+0x44>
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cee:	b10b      	cbz	r3, 8009cf4 <__sflush_r+0x44>
 8009cf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cf8:	6a21      	ldr	r1, [r4, #32]
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b0      	blx	r6
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	d106      	bne.n	8009d12 <__sflush_r+0x62>
 8009d04:	6829      	ldr	r1, [r5, #0]
 8009d06:	291d      	cmp	r1, #29
 8009d08:	d82b      	bhi.n	8009d62 <__sflush_r+0xb2>
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8009db4 <__sflush_r+0x104>)
 8009d0c:	40ca      	lsrs	r2, r1
 8009d0e:	07d6      	lsls	r6, r2, #31
 8009d10:	d527      	bpl.n	8009d62 <__sflush_r+0xb2>
 8009d12:	2200      	movs	r2, #0
 8009d14:	6062      	str	r2, [r4, #4]
 8009d16:	04d9      	lsls	r1, r3, #19
 8009d18:	6922      	ldr	r2, [r4, #16]
 8009d1a:	6022      	str	r2, [r4, #0]
 8009d1c:	d504      	bpl.n	8009d28 <__sflush_r+0x78>
 8009d1e:	1c42      	adds	r2, r0, #1
 8009d20:	d101      	bne.n	8009d26 <__sflush_r+0x76>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	b903      	cbnz	r3, 8009d28 <__sflush_r+0x78>
 8009d26:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d2a:	602f      	str	r7, [r5, #0]
 8009d2c:	b1b9      	cbz	r1, 8009d5e <__sflush_r+0xae>
 8009d2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d32:	4299      	cmp	r1, r3
 8009d34:	d002      	beq.n	8009d3c <__sflush_r+0x8c>
 8009d36:	4628      	mov	r0, r5
 8009d38:	f7ff fca2 	bl	8009680 <_free_r>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d40:	e00d      	b.n	8009d5e <__sflush_r+0xae>
 8009d42:	2301      	movs	r3, #1
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b0      	blx	r6
 8009d48:	4602      	mov	r2, r0
 8009d4a:	1c50      	adds	r0, r2, #1
 8009d4c:	d1c9      	bne.n	8009ce2 <__sflush_r+0x32>
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d0c6      	beq.n	8009ce2 <__sflush_r+0x32>
 8009d54:	2b1d      	cmp	r3, #29
 8009d56:	d001      	beq.n	8009d5c <__sflush_r+0xac>
 8009d58:	2b16      	cmp	r3, #22
 8009d5a:	d11e      	bne.n	8009d9a <__sflush_r+0xea>
 8009d5c:	602f      	str	r7, [r5, #0]
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e022      	b.n	8009da8 <__sflush_r+0xf8>
 8009d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d66:	b21b      	sxth	r3, r3
 8009d68:	e01b      	b.n	8009da2 <__sflush_r+0xf2>
 8009d6a:	690f      	ldr	r7, [r1, #16]
 8009d6c:	2f00      	cmp	r7, #0
 8009d6e:	d0f6      	beq.n	8009d5e <__sflush_r+0xae>
 8009d70:	0793      	lsls	r3, r2, #30
 8009d72:	680e      	ldr	r6, [r1, #0]
 8009d74:	bf08      	it	eq
 8009d76:	694b      	ldreq	r3, [r1, #20]
 8009d78:	600f      	str	r7, [r1, #0]
 8009d7a:	bf18      	it	ne
 8009d7c:	2300      	movne	r3, #0
 8009d7e:	eba6 0807 	sub.w	r8, r6, r7
 8009d82:	608b      	str	r3, [r1, #8]
 8009d84:	f1b8 0f00 	cmp.w	r8, #0
 8009d88:	dde9      	ble.n	8009d5e <__sflush_r+0xae>
 8009d8a:	6a21      	ldr	r1, [r4, #32]
 8009d8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d8e:	4643      	mov	r3, r8
 8009d90:	463a      	mov	r2, r7
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b0      	blx	r6
 8009d96:	2800      	cmp	r0, #0
 8009d98:	dc08      	bgt.n	8009dac <__sflush_r+0xfc>
 8009d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dac:	4407      	add	r7, r0
 8009dae:	eba8 0800 	sub.w	r8, r8, r0
 8009db2:	e7e7      	b.n	8009d84 <__sflush_r+0xd4>
 8009db4:	20400001 	.word	0x20400001

08009db8 <_fflush_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	690b      	ldr	r3, [r1, #16]
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	b913      	cbnz	r3, 8009dc8 <_fflush_r+0x10>
 8009dc2:	2500      	movs	r5, #0
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	b118      	cbz	r0, 8009dd2 <_fflush_r+0x1a>
 8009dca:	6a03      	ldr	r3, [r0, #32]
 8009dcc:	b90b      	cbnz	r3, 8009dd2 <_fflush_r+0x1a>
 8009dce:	f7ff fb6b 	bl	80094a8 <__sinit>
 8009dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0f3      	beq.n	8009dc2 <_fflush_r+0xa>
 8009dda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ddc:	07d0      	lsls	r0, r2, #31
 8009dde:	d404      	bmi.n	8009dea <_fflush_r+0x32>
 8009de0:	0599      	lsls	r1, r3, #22
 8009de2:	d402      	bmi.n	8009dea <_fflush_r+0x32>
 8009de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009de6:	f7ff fc48 	bl	800967a <__retarget_lock_acquire_recursive>
 8009dea:	4628      	mov	r0, r5
 8009dec:	4621      	mov	r1, r4
 8009dee:	f7ff ff5f 	bl	8009cb0 <__sflush_r>
 8009df2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009df4:	07da      	lsls	r2, r3, #31
 8009df6:	4605      	mov	r5, r0
 8009df8:	d4e4      	bmi.n	8009dc4 <_fflush_r+0xc>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	059b      	lsls	r3, r3, #22
 8009dfe:	d4e1      	bmi.n	8009dc4 <_fflush_r+0xc>
 8009e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e02:	f7ff fc3b 	bl	800967c <__retarget_lock_release_recursive>
 8009e06:	e7dd      	b.n	8009dc4 <_fflush_r+0xc>

08009e08 <__sread>:
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	f000 f956 	bl	800a0c0 <_read_r>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	bfab      	itete	ge
 8009e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e1c:	181b      	addge	r3, r3, r0
 8009e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e22:	bfac      	ite	ge
 8009e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e26:	81a3      	strhlt	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__swrite>:
 8009e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	461f      	mov	r7, r3
 8009e30:	898b      	ldrh	r3, [r1, #12]
 8009e32:	05db      	lsls	r3, r3, #23
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4616      	mov	r6, r2
 8009e3a:	d505      	bpl.n	8009e48 <__swrite+0x1e>
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	2302      	movs	r3, #2
 8009e42:	2200      	movs	r2, #0
 8009e44:	f000 f92a 	bl	800a09c <_lseek_r>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e52:	81a3      	strh	r3, [r4, #12]
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	4628      	mov	r0, r5
 8009e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	f000 b941 	b.w	800a0e4 <_write_r>

08009e62 <__sseek>:
 8009e62:	b510      	push	{r4, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6a:	f000 f917 	bl	800a09c <_lseek_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	bf15      	itete	ne
 8009e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e7e:	81a3      	strheq	r3, [r4, #12]
 8009e80:	bf18      	it	ne
 8009e82:	81a3      	strhne	r3, [r4, #12]
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <__sclose>:
 8009e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8a:	f000 b93d 	b.w	800a108 <_close_r>

08009e8e <__swbuf_r>:
 8009e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e90:	460e      	mov	r6, r1
 8009e92:	4614      	mov	r4, r2
 8009e94:	4605      	mov	r5, r0
 8009e96:	b118      	cbz	r0, 8009ea0 <__swbuf_r+0x12>
 8009e98:	6a03      	ldr	r3, [r0, #32]
 8009e9a:	b90b      	cbnz	r3, 8009ea0 <__swbuf_r+0x12>
 8009e9c:	f7ff fb04 	bl	80094a8 <__sinit>
 8009ea0:	69a3      	ldr	r3, [r4, #24]
 8009ea2:	60a3      	str	r3, [r4, #8]
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	071a      	lsls	r2, r3, #28
 8009ea8:	d501      	bpl.n	8009eae <__swbuf_r+0x20>
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	b943      	cbnz	r3, 8009ec0 <__swbuf_r+0x32>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f000 f82b 	bl	8009f0c <__swsetup_r>
 8009eb6:	b118      	cbz	r0, 8009ec0 <__swbuf_r+0x32>
 8009eb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	6922      	ldr	r2, [r4, #16]
 8009ec4:	1a98      	subs	r0, r3, r2
 8009ec6:	6963      	ldr	r3, [r4, #20]
 8009ec8:	b2f6      	uxtb	r6, r6
 8009eca:	4283      	cmp	r3, r0
 8009ecc:	4637      	mov	r7, r6
 8009ece:	dc05      	bgt.n	8009edc <__swbuf_r+0x4e>
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f7ff ff70 	bl	8009db8 <_fflush_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d1ed      	bne.n	8009eb8 <__swbuf_r+0x2a>
 8009edc:	68a3      	ldr	r3, [r4, #8]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	60a3      	str	r3, [r4, #8]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	701e      	strb	r6, [r3, #0]
 8009eea:	6962      	ldr	r2, [r4, #20]
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d004      	beq.n	8009efc <__swbuf_r+0x6e>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	07db      	lsls	r3, r3, #31
 8009ef6:	d5e1      	bpl.n	8009ebc <__swbuf_r+0x2e>
 8009ef8:	2e0a      	cmp	r6, #10
 8009efa:	d1df      	bne.n	8009ebc <__swbuf_r+0x2e>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f7ff ff5a 	bl	8009db8 <_fflush_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d0d9      	beq.n	8009ebc <__swbuf_r+0x2e>
 8009f08:	e7d6      	b.n	8009eb8 <__swbuf_r+0x2a>
	...

08009f0c <__swsetup_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4b29      	ldr	r3, [pc, #164]	@ (8009fb4 <__swsetup_r+0xa8>)
 8009f10:	4605      	mov	r5, r0
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	460c      	mov	r4, r1
 8009f16:	b118      	cbz	r0, 8009f20 <__swsetup_r+0x14>
 8009f18:	6a03      	ldr	r3, [r0, #32]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <__swsetup_r+0x14>
 8009f1c:	f7ff fac4 	bl	80094a8 <__sinit>
 8009f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f24:	0719      	lsls	r1, r3, #28
 8009f26:	d422      	bmi.n	8009f6e <__swsetup_r+0x62>
 8009f28:	06da      	lsls	r2, r3, #27
 8009f2a:	d407      	bmi.n	8009f3c <__swsetup_r+0x30>
 8009f2c:	2209      	movs	r2, #9
 8009f2e:	602a      	str	r2, [r5, #0]
 8009f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f3a:	e033      	b.n	8009fa4 <__swsetup_r+0x98>
 8009f3c:	0758      	lsls	r0, r3, #29
 8009f3e:	d512      	bpl.n	8009f66 <__swsetup_r+0x5a>
 8009f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f42:	b141      	cbz	r1, 8009f56 <__swsetup_r+0x4a>
 8009f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d002      	beq.n	8009f52 <__swsetup_r+0x46>
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f7ff fb97 	bl	8009680 <_free_r>
 8009f52:	2300      	movs	r3, #0
 8009f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0308 	orr.w	r3, r3, #8
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b94b      	cbnz	r3, 8009f86 <__swsetup_r+0x7a>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7c:	d003      	beq.n	8009f86 <__swsetup_r+0x7a>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f000 f83f 	bl	800a004 <__smakebuf_r>
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	f013 0201 	ands.w	r2, r3, #1
 8009f8e:	d00a      	beq.n	8009fa6 <__swsetup_r+0x9a>
 8009f90:	2200      	movs	r2, #0
 8009f92:	60a2      	str	r2, [r4, #8]
 8009f94:	6962      	ldr	r2, [r4, #20]
 8009f96:	4252      	negs	r2, r2
 8009f98:	61a2      	str	r2, [r4, #24]
 8009f9a:	6922      	ldr	r2, [r4, #16]
 8009f9c:	b942      	cbnz	r2, 8009fb0 <__swsetup_r+0xa4>
 8009f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fa2:	d1c5      	bne.n	8009f30 <__swsetup_r+0x24>
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	0799      	lsls	r1, r3, #30
 8009fa8:	bf58      	it	pl
 8009faa:	6962      	ldrpl	r2, [r4, #20]
 8009fac:	60a2      	str	r2, [r4, #8]
 8009fae:	e7f4      	b.n	8009f9a <__swsetup_r+0x8e>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7f7      	b.n	8009fa4 <__swsetup_r+0x98>
 8009fb4:	20000038 	.word	0x20000038

08009fb8 <__swhatbuf_r>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	460c      	mov	r4, r1
 8009fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	b096      	sub	sp, #88	@ 0x58
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	461e      	mov	r6, r3
 8009fc8:	da0d      	bge.n	8009fe6 <__swhatbuf_r+0x2e>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fd0:	f04f 0100 	mov.w	r1, #0
 8009fd4:	bf14      	ite	ne
 8009fd6:	2340      	movne	r3, #64	@ 0x40
 8009fd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fdc:	2000      	movs	r0, #0
 8009fde:	6031      	str	r1, [r6, #0]
 8009fe0:	602b      	str	r3, [r5, #0]
 8009fe2:	b016      	add	sp, #88	@ 0x58
 8009fe4:	bd70      	pop	{r4, r5, r6, pc}
 8009fe6:	466a      	mov	r2, sp
 8009fe8:	f000 f89e 	bl	800a128 <_fstat_r>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	dbec      	blt.n	8009fca <__swhatbuf_r+0x12>
 8009ff0:	9901      	ldr	r1, [sp, #4]
 8009ff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ffa:	4259      	negs	r1, r3
 8009ffc:	4159      	adcs	r1, r3
 8009ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a002:	e7eb      	b.n	8009fdc <__swhatbuf_r+0x24>

0800a004 <__smakebuf_r>:
 800a004:	898b      	ldrh	r3, [r1, #12]
 800a006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a008:	079d      	lsls	r5, r3, #30
 800a00a:	4606      	mov	r6, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	d507      	bpl.n	800a020 <__smakebuf_r+0x1c>
 800a010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	6123      	str	r3, [r4, #16]
 800a018:	2301      	movs	r3, #1
 800a01a:	6163      	str	r3, [r4, #20]
 800a01c:	b003      	add	sp, #12
 800a01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a020:	ab01      	add	r3, sp, #4
 800a022:	466a      	mov	r2, sp
 800a024:	f7ff ffc8 	bl	8009fb8 <__swhatbuf_r>
 800a028:	9f00      	ldr	r7, [sp, #0]
 800a02a:	4605      	mov	r5, r0
 800a02c:	4639      	mov	r1, r7
 800a02e:	4630      	mov	r0, r6
 800a030:	f7ff f922 	bl	8009278 <_malloc_r>
 800a034:	b948      	cbnz	r0, 800a04a <__smakebuf_r+0x46>
 800a036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a03a:	059a      	lsls	r2, r3, #22
 800a03c:	d4ee      	bmi.n	800a01c <__smakebuf_r+0x18>
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	f043 0302 	orr.w	r3, r3, #2
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	e7e2      	b.n	800a010 <__smakebuf_r+0xc>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	6020      	str	r0, [r4, #0]
 800a04e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	9b01      	ldr	r3, [sp, #4]
 800a056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a05a:	b15b      	cbz	r3, 800a074 <__smakebuf_r+0x70>
 800a05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f80b 	bl	800a07c <_isatty_r>
 800a066:	b128      	cbz	r0, 800a074 <__smakebuf_r+0x70>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f023 0303 	bic.w	r3, r3, #3
 800a06e:	f043 0301 	orr.w	r3, r3, #1
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	431d      	orrs	r5, r3
 800a078:	81a5      	strh	r5, [r4, #12]
 800a07a:	e7cf      	b.n	800a01c <__smakebuf_r+0x18>

0800a07c <_isatty_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	@ (800a098 <_isatty_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7f6 ff8b 	bl	8000fa2 <_isatty>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_isatty_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_isatty_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20000aec 	.word	0x20000aec

0800a09c <_lseek_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	@ (800a0bc <_lseek_r+0x20>)
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f7f6 ff84 	bl	8000fb8 <_lseek>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_lseek_r+0x1e>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_lseek_r+0x1e>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20000aec 	.word	0x20000aec

0800a0c0 <_read_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	@ (800a0e0 <_read_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f6 ff12 	bl	8000ef8 <_read>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_read_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_read_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20000aec 	.word	0x20000aec

0800a0e4 <_write_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	@ (800a104 <_write_r+0x20>)
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f6 ff1d 	bl	8000f32 <_write>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_write_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_write_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20000aec 	.word	0x20000aec

0800a108 <_close_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d06      	ldr	r5, [pc, #24]	@ (800a124 <_close_r+0x1c>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	f7f6 ff29 	bl	8000f6a <_close>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_close_r+0x1a>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_close_r+0x1a>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20000aec 	.word	0x20000aec

0800a128 <_fstat_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d07      	ldr	r5, [pc, #28]	@ (800a148 <_fstat_r+0x20>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	4611      	mov	r1, r2
 800a134:	602b      	str	r3, [r5, #0]
 800a136:	f7f6 ff24 	bl	8000f82 <_fstat>
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	d102      	bne.n	800a144 <_fstat_r+0x1c>
 800a13e:	682b      	ldr	r3, [r5, #0]
 800a140:	b103      	cbz	r3, 800a144 <_fstat_r+0x1c>
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	bd38      	pop	{r3, r4, r5, pc}
 800a146:	bf00      	nop
 800a148:	20000aec 	.word	0x20000aec

0800a14c <_init>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	bf00      	nop
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr

0800a158 <_fini>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr
